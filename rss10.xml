<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://asmeurer.com/blog/posts/github-cuts/</guid>
      <author>Aaron Meurer (asmeurer)</author>
      <title>Aaron Meurer (asmeurer): GitHub Cuts</title>
      <pubDate>Tue, 06 Nov 2018 22:54:21 GMT</pubDate>
      <link>https://asmeurer.com/blog/posts/github-cuts/</link>
      <description>&lt;div&gt;&lt;p&gt;GitHub recently announced its &lt;a href="https://blog.github.com/2018-08-28-announcing-paper-cuts/"&gt;paper cuts
initiative&lt;/a&gt; to fix
minor issues that make things more difficult for GitHub users. As someone who
spends most of his day on &lt;a href="https://github.com"&gt;github.com&lt;/a&gt;, this initiative is
great, as these small cuts can quickly add up to a painful experience.&lt;/p&gt;
&lt;p&gt;The initiative has already made some great fixes, such as &lt;a href="https://blog.github.com/changelog/2018-07-31-unselectable-diff-markers/"&gt;making the diff
markers
unselectable&lt;/a&gt;
and
&lt;a href="https://blog.github.com/changelog/2018-10-08-issue-and-pull-request-hovercards/"&gt;hovercards&lt;/a&gt;.
Small changes like these are usually quite easy for GitHub to do, but they
make a huge difference to those of use who use GitHub every day.&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://twitter.com/asmeurer/status/1034528642389266432"&gt;recently asked&lt;/a&gt;
how these cuts could be reported to GitHub for fixing, but got no response. So
I am writing this blog post.&lt;/p&gt;
&lt;p&gt;To be very clear: I think that on the whole GitHub is great and they are doing
a great job. And it's still better than the alternatives (to put things in
perspective, I recently spent &lt;a href="https://twitter.com/asmeurer/status/1029158262069899266"&gt;half an
hour&lt;/a&gt; trying to
figure out how to change my password in BitBucket, and GitLab can't even keep
me logged in between sessions). GitHub has and continues to revolutionize the
open source ecosystem, and is still the best place to host an open source
project.&lt;/p&gt;
&lt;p&gt;But since GitHub did
&lt;a href="https://blog.github.com/2018-08-28-announcing-paper-cuts/"&gt;ask&lt;/a&gt; what sorts of
changes they want to see, I'm providing a list. In this post I'm trying to
only ask about things that are small changes (though I realize many won't be
as easy to fix as they may appear from the outside, and I readily admit that I
am not a web developer).&lt;/p&gt;
&lt;p&gt;These are just the things that have bothered me, personally. Other people use
GitHub differently and no doubt have their own pain points. For instance, I
have no suggestions about the project boards feature of GitHub because I don't
use it. If you are also a GitHub user and have your own pain points feel free
to use the comment box below (though I have no idea if GitHub will actually
see them).&lt;/p&gt;
&lt;p&gt;If you work for GitHub and have any questions, feel free to comment below, or
&lt;a href="mailto:asmeurer@gmail.com"&gt;email me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In no particular order:&lt;/p&gt;
&lt;h3&gt;Issues&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow anyone to add labels to issues.&lt;/strong&gt; At the very least, allow the
person who opened the issue to add labels).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new issue transfer ability is great, but please &lt;strong&gt;make it require only
push access, not admin access.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remove the automatic hiding of comments when there are too many.&lt;/strong&gt; I
understand this is done for technical reasons, but it breaks
Cmd-F/scrolling through the page to find comments. Often I go to an issue
trying to find an old comment and can't because buried in the comments is a
button I have to press to actually show the comment (it's even worse when
you have to find and press the button multiple times).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Better indication for cross-referenced pull requests.&lt;/strong&gt; I really don't
know how to fix this, only that it is a problem. It happens all the time
that a new contributor comes to a SymPy issue and asks if it has been
worked on yet. They generally do not seem to notice the cross-referenced
pull requests in the list.
&lt;a href="https://github.com/sympy/sympy/issues/14943"&gt;Here&lt;/a&gt; is an example of what
I'm talking about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Indicate better if a cross-referenced pull request would close an
issue.&lt;/strong&gt; Preferably with text, not just an icon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTML pull request/issue templates.&lt;/strong&gt; I don't know if this counts as a
"cut", as it isn't a simple fix. Right now, many projects use pull
requests/new issue templates, but it is not very user friendly. The problem
is that the whole thing is done in plain text, often with the template text
as an HTML comment to prevent it from appearing in the final issue text.
Even for me, I often find this quite difficult to read through, but for new
contributors, we often find that they don't read it at all. Sure there's no
way to force people to read, but if we could instead create a very simple
HTML form for people to fill out, it would be much more friendly, even to
experienced people like myself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fix the back button in Chrome.&lt;/strong&gt; I don't know if this is something that
GitHub can fix, and I also do not know how things work in other browsers. I
use Chrome on macOS. Often, when I click the "back" button and it takes me
back to an issue page, the contents of the page are out-of-date (the newest
comments or commits do not appear). It's often even more out-of-date than
it was when I left the page. I have to reload the page to get the latest
content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow Markdown formatting in issue titles.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show people's names next to comments as "Real Name (@username)".&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remember my selection for the "sort" setting in the issues list.&lt;/strong&gt; I'd
love to have issues/pull requests sort by "most recently updated" by
default, so that I don't miss updates to old issues/pull requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make advanced search filters more accessible.&lt;/strong&gt; They should autofill,
similar to how Gmail or even GitLab search works (yes, please still all
the good ideas from GitLab; they already stole all their good ideas from
you).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tone down the reaction emojis.&lt;/strong&gt; Maybe this ship has sailed, but
reaction emojis are way too unprofessional for some projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Copy/paste text as Markdown.&lt;/strong&gt; For example, copying "&lt;strong&gt;bold&lt;/strong&gt;" and
pasting it into the comment box would paste &lt;code&gt;**bold**&lt;/code&gt;. Another idea that
you can steal from GitLab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strike out #12345 issue links when the issue/PR is closed/merged&lt;/strong&gt;
(like &lt;strike&gt;#12345&lt;/strike&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Pull requests&lt;/h3&gt;
&lt;ol start="15"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a button that automatically merges a pull request as soon as all the
CI checks pass.&lt;/strong&gt; Any additional commits pushed to the branch in the
interim would cancel it, and it should also be cancellable by someone else
with push access or the PR author.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add some way to disable the automatic hiding of large diffs.&lt;/strong&gt; This
breaks Cmd-F on the page, and makes it harder to scroll through the pull
request to find what you are looking for (typically the most important
changes are the ones that are hidden!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Include all issue/PR authors in the authors search on the pull request
list page.&lt;/strong&gt; Right now it only lists people with push access. But I
generally can't remember people's GitHub usernames, and autofilling based
on all authors would be very helpful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Better contextual guesses for issue autofilling (after typing &lt;code&gt;#&lt;/code&gt;).&lt;/strong&gt;
For instance, if an issue has already been referenced or cross-referenced,
it should appear near the top of the list. We have almost &lt;a href="https://github.com/sympy/sympy/issues"&gt;3000 open
issues&lt;/a&gt; in SymPy, and the current
issue numbers are 5-digits long, so referencing an issue purely by number
is very error prone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Auto-update edited comments.&lt;/strong&gt; Context: SymPy uses a
&lt;a href="https://github.com/sympy/sympy-bot"&gt;bot&lt;/a&gt; that comments on every pull
request, requiring a release notes entry to be added to the description.
This works quite well, but to prevent the bot from spamming, we have it
comment only once, and edit its comment on any further checks. However,
these edits do not automatically update, so people have to manually reload
the page to see them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don't hide full commit messages by default in the commits view.&lt;/strong&gt; It
would be better to encourage people to write good commit messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make issue cross-references in pull request titles work.&lt;/strong&gt; I'd rather
people didn't put issue numbers in pull request titles but they do it
anyway, so it would be nice if they actually worked as links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow me to comment on lines that aren't visible by default.&lt;/strong&gt; That is,
lines that you have to click the "expand" icon above or below the line
numbers to access. As an example, this can be useful to point out a line
that should have been changed but wasn't.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Copying code from a diff that includes lines that aren't visible by
default includes an extra space to the left for those lines.&lt;/strong&gt; This is a
straight up bug. Probably fixing the previous point would also fix this :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make searches include text from the pull request diff.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;When a diff indents a line color the whitespace to the left of the
line.&lt;/strong&gt; (see
&lt;a href="https://twitter.com/asmeurer/status/740611970714480640"&gt;this&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull requests can show commits that are already in master.&lt;/strong&gt; For
example, if someone makes pull request B based off of pull request A and
then A gets merged, B will still show the commits from A. This has been a
bug forever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the "jump to file or symbol" popdown collapsible.&lt;/strong&gt; Specifically
what I mean is I want to be able to show just the files, without any
symbols. For large pull requests, it is very difficult to use this popdown
if there are hundreds of symbols. I typically want to just jump to a
specific file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The status check on the favicon goes away when you switch to the diff
tab.&lt;/strong&gt; Kudos to Marius Gedminas for &lt;a href="https://twitter.com/mgedmin/status/1058381090694553601"&gt;pointing this
out&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/sympy/sympy/pull/15280#issuecomment-426795606"&gt;Apparently&lt;/a&gt;
status checks that use the GitHub Apps API are forced to link into the
checks tab.&lt;/strong&gt; The checks tab is useless if no information is actually
published to it. It would be better if it could link straight to the
external site, like is done with oauth integrations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make it easier to copy someone's username from the pull request page.&lt;/strong&gt;
I generally do this to &lt;code&gt;git remote add&lt;/code&gt; them (using
&lt;a href="https://github.com/github/hub"&gt;hub&lt;/a&gt;). If I try to select their username
from a comment, it's a link, which makes it hard to select. I generally
copy it from the blue text at the top "&lt;em&gt;user&lt;/em&gt; wants to merge &lt;em&gt;n&lt;/em&gt; commits
from &lt;code&gt;sympy:master&lt;/code&gt; from &lt;code&gt;user:branch&lt;/code&gt;. If it were easier to select "user"
or "branch" from that box (say, by double clicking), that would be
helpful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Change the "resolve conversation" UI.&lt;/strong&gt; I keep pressing it on accident
because it's where I expect the "new comment" button to be.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Reviews&lt;/h3&gt;
&lt;p&gt;I wrote a &lt;a href="https://www.asmeurer.com/blog/posts/github-reviews-gripes/"&gt;whole
post&lt;/a&gt; about the
reviews feature when it came out. Not much has changed since then (actually,
it has gotten worse). In short, the feature doesn't work like I would like it
too, and I find the default behavior of deferred comments to be extremely
detrimental. If there were a way to completely disable reviews (for myself, I
don't care about other people using the feature), I would.&lt;/p&gt;
&lt;p&gt;See my blog post for full details on why I think the reviews feature is broken
and actually makes things worse, not better than before. I've summarized a few
things that could change below.&lt;/p&gt;
&lt;ol start="32"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make reviews non-deferred by default.&lt;/strong&gt; This is the biggest thing. If I
had to pick only a single item on this page to be changed, it would be
this. The issue is if I start a review and walk away from it, but forget
to "finalize" it with a review status, the review is never actually seen
by anyone. The simplest way to fix this would be to simply make partial
reviews public.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make Cmd-Enter default to immediate comment.&lt;/strong&gt; Barring the above change,
Cmd-Enter on a pull request line comment should default to immediate
comment, not deferred (review) comment. The problem with the
Cmd-Shift-Enter shortcut is that it is inconsistent: on a normal comment,
it closes the pull request, and on a reply comment, it does nothing. I
shouldn't have to check what "comment context" I am in to figure out what
keyboard shortcut to use. The worst part is if you accidentally start a
review, it's a pain in the ass to undo that and just post a normal
comment. The simples way to fix this would be to swap the current meaning
of Cmd-Enter and Cmd-Shift-Enter for line comments (and no, this wouldn't
be a backwards incompatible change, it would be a regression fix;
Cmd-Enter &lt;em&gt;used&lt;/em&gt; to do the right thing).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow reviewing your own pull request.&lt;/strong&gt; There's no reason to disallow
this, and it would often be quite useful to, for instance, mark a work in
progress PR as such with a "request changes" review. Obviously
self-reviews would be excluded from any required reviews.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unhide the reviews box.&lt;/strong&gt; It should just be the same box as the comment
box, unstead of buried on the diff tab (see my &lt;a href="https://www.asmeurer.com/blog/posts/github-reviews-gripes/"&gt;blog
post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show review status in the pull request list as a red X or green check.&lt;/strong&gt;
This would make it easier to see which pull requests have reviews.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow new commits to invalidate reviews.&lt;/strong&gt; That way they work the same
way as any other status check. (I see that this is now an option for
required reviews, which is new since my original blog post, but it still
doesn't affect the status as reported on the pull requests list).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow requiring zero negative reviews to merge (but not necessarily any
positive reviews)&lt;/strong&gt;. Requiring a positive review is pointless. The person
merging can just add one real quick before they merge, but it is
unnecessary extra work. On the other hand allowing people with push access
to block a merge with a negative review would be very useful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Web editor&lt;/h3&gt;
&lt;ol start="39"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The web editor seems to have a search function, but I can't get it to
actually work.&lt;/strong&gt; Half the time Cmd-F pops open the browser search, which
doesn't find text that isn't on screen. And when I press Cmd-G to actually
do the search, it doesn't work (and there are no buttons to perform the
search either).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add basic syntax testing in the web editor for common languages to catch
basic mistakes.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Mobile site&lt;/h3&gt;
&lt;ol start="41"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Please make the mobile site work with iOS 10.&lt;/strong&gt; I don't see any reason
why simple things like buttons (like the merge button or the comment
button) shouldn't work on a slightly older browser. No, I am not a web
developer, but I do use my phone a lot and I've noticed that literally
every other website works just fine on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a way to disable the mobile site permanently.&lt;/strong&gt; For the most part,
the mobile site is useless (see below). If you aren't going to put full
development effort into it, allow me to disable it permanently so that
every time I visit &lt;a href="https://github.com"&gt;github.com&lt;/a&gt; on my phone it goes to
the desktop site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Seeing as how the site (mobile or not) is almost completely unusable on every
mobile device I own, it's hard to list other things here, but based on back
when it actually worked, these are some of the things that annoyed me the
most. Basically, I have found that virtually every time I go to GitHub to do
anything on mobile, I have to switch to desktop mode to actually do what I
want.&lt;/p&gt;
&lt;p&gt;My apologies if any of these actually work now: as I said,
&lt;a href="https://github.com"&gt;github.com&lt;/a&gt; doesn't actually work at all on my phone.&lt;/p&gt;
&lt;ol start="43"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cannot search issues on mobile.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cannot make a line comment that &lt;em&gt;isn't&lt;/em&gt; a review on mobile.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cannot view lines beyond the default diff in pull requests on mobile.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show more than 2 lines of the README and 0 lines of the code by default
on project pages.&lt;/strong&gt; Yes mobile screens are small but it's also not hard to
scroll on them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support Jupyter notebook rendering on mobile.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Files view&lt;/h3&gt;
&lt;ol start="48"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub needs a better default color theme for syntax highlighting.&lt;/strong&gt;
Most of the colors are very similar to one another and hard to
differentiate. Also things like strings are black, even though one of the
most useful aspects of syntax highlighting generally is to indicate
whether something is in a string or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add MathJax support to markdown files.&lt;/strong&gt; This would be amazingly useful
for SymPy, as well as many scientific software projects. Right now if you
want this you have to use a Jupyter notebook. MathJax support in
issue/pull request comments would be awesome as well, though I'm not
holding out for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add "display source" button for markdown, ReST, etc.&lt;/strong&gt; I mean the button
that is already there for Jupyter notebooks. Right now you have to view
markdown and ReST files "raw" or edit the file to see their source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a link to the pull request in the blame view.&lt;/strong&gt; Usually I want to
find the pull request that produced a change, not just the commit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Wiki&lt;/h3&gt;
&lt;ol start="52"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The wikis used to support LaTeX math with MathJax. It would be great if
this were re-added.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The ability to set push permissions for the wiki separately from the
repo it is attached to, or otherwise create an oauth token that can only
push to the wiki would be useful.&lt;/strong&gt; Context: for SymPy, we use a
&lt;a href="https://github.com/sympy/sympy-bot"&gt;bot&lt;/a&gt; that automatically updates our
&lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes"&gt;release notes&lt;/a&gt; on our
wiki. It works quite well, but the only way it can push to the wiki is if
we give it push access to the full repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Notification emails&lt;/h3&gt;
&lt;ol start="54"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don't clobber special emails/email headers.&lt;/strong&gt; GitHub adds special emails
like &lt;a href="mailto:author@noreply.github.com"&gt;author@noreply.github.com&lt;/a&gt; and
&lt;a href="mailto:mention@noreply.github.com"&gt;mention@noreply.github.com&lt;/a&gt; to email
notifications based on how the notification was triggered. This is useful,
as I can create an email filter for
&lt;a href="mailto:author@noreply.github.com"&gt;author@noreply.github.com&lt;/a&gt; for
notifications on issues and pull requests created by me. The bad news is,
&lt;a href="mailto:mention@noreply.github.com"&gt;mention@noreply.github.com&lt;/a&gt;, which is
added when I am @mentioned, clobbers
&lt;a href="mailto:author@noreply.github.com"&gt;author@noreply.github.com&lt;/a&gt;, so that it
doesn't appear anymore. In other words, as soon as someone @mentions me in
one of my issues, I become &lt;em&gt;less&lt;/em&gt; likely to see it, because it no longer
gets my label (I get @mentioned on &lt;em&gt;a lot&lt;/em&gt; of issues and don't have the
ability to read all of my notification emails). Ditto for the
&lt;code&gt;X-GitHub-Reason&lt;/code&gt; email headers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Readd the "view issue" links in Gmail.&lt;/strong&gt; (I forgot what these are
called). GitHub notification emails used to have these useful "view issue"
buttons that showed up on the right in the email list in Gmail, but they
were removed for some reason.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;ol start="56"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the requests in the API docs actually return what they show in the
docs.&lt;/strong&gt; This means the &lt;a href="https://github.com/octocat/Hello-World/"&gt;example
repo&lt;/a&gt; should have actual example
issues corresponding to what is shown in the docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow giving deploy key access to just one branch.&lt;/strong&gt; That way I can have
a deploy key for &lt;code&gt;gh-pages&lt;/code&gt; and minimize the attack surface that the
existence of that key produces. I think everyone would agree that more
fine-grained permissions throughout the API would be nice, but this is one
that would benefit me personally, specifically for my project
&lt;a href="https://drdoctr.github.io/"&gt;doctr&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;GitHub pages is one of the best features of GitHub, and infact, this very blog
is hosted on it. Very few complaints here, because for the most part, it "just
works".&lt;/p&gt;
&lt;ol start="58"&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/asmeurer/status/831962312122761216"&gt;&lt;strong&gt;Moar themes.&lt;/strong&gt;&lt;/a&gt;
Also it's awesome that you can use any GitHub repo as a theme now, but it
turns out most random themes you find around GitHub don't actually work
very well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The steps to add HTTPS to an existing GitHub pages custom domain are a
bit confusing.&lt;/strong&gt;. This took us a while to figure out for
&lt;a href="https://sympy.org"&gt;sympy.org&lt;/a&gt;. To get things to work, you have to trigger
GitHub to issue a cert for the domain. But the UI to issue the cert is to
paste the domain into the box. So if the domain is already there but it
doesn't work, you have to re-enter it. Also if you want both www and the
apex domain to be HTTPS you have to enter them both in the box to trigger
GitHub to issue a cert. This is primarily a UX issue. See
&lt;a href="https://github.com/sympy/sympy.github.com/issues/105#issuecomment-415899934"&gt;https://github.com/sympy/sympy.github.com/issues/105#issuecomment-415899934&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Settings&lt;/h3&gt;
&lt;ol start="60"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automatically protected branches make the branch difficult to delete
when you are done with it.&lt;/strong&gt; My use-case is to create a branch for the
release, which I want to protect, but I also want to delete the branch
once it is merged. I can protect the branch automatically pretty easily,
but then I have to go and delete the protection rule when it's merged to
delete it. There are several ways this could be fixed. For instance, you
could add a rule to allow protected branches to be deleted if they are
up-to-date with default branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a way to disable the ability for non-admins to create new branches
on a repo.&lt;/strong&gt; We want all of our pull requests to come from forks. Branches
in the repo just create confusion, for instance, they appear whenever
someone clones the repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Related to the previous point, make pull request reverts come from
forks.&lt;/strong&gt; Right now when someone uses the revert pull request button, it
creates a new branch in the same repo, but it would be better if the
branch were made in the person's fork.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow me to enable branch protection by default for new repos.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow me to enable branch protection by default on new branches.&lt;/strong&gt; This
is more important than the previous one because of the feature that lets
people push to your branch on a pull request (which is a great feature by
the way).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clicking a team name in the settings should default to the "members"
tab.&lt;/strong&gt; I don't understand why GitHub has a non-open "discussions" feature,
but I find it to be completely useless, and generally see such things as
harmful for open source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Suggest people to add push access to.&lt;/strong&gt; I don't necessarily mean
passively (though that could be interesting too), but I mean in the page
to add someone, it would be nice if the popup suggested or indicated which
people had contributed the project before, since just searching for a name
searches all of GitHub, and I don't want to accidentally give access to
the wrong person.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Profiles&lt;/h3&gt;
&lt;ol start="67"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stop trying to make profile pages look "cute" with randomly highlighted
pull requests.&lt;/strong&gt; GitHub should have learned by now that profile pages
matter a lot (whether people want them to or not), and there can be
unintended consequences to the things that are put on them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explain what the axes actually mean in the new "activity overview".&lt;/strong&gt;
I'm referring to
&lt;a href="https://twitter.com/asmeurer/status/1033141923630874624"&gt;this&lt;/a&gt; (it's
still in beta and you have to manually enable it on your profile page).
Personally I'm leaving the feature off because I don't like being
metricized/gamified, but if you're going to have it, at least include some
transparency.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Releases&lt;/h3&gt;
&lt;ol start="69"&gt;
&lt;li&gt;&lt;strong&gt;Allow hiding the "source code (zip)" and "source code (tar.gz)" files in
a release.&lt;/strong&gt; We upload our actual release files (generated by &lt;code&gt;setup.py&lt;/code&gt;)
to the GitHub release. We want people to download those, not snapshots of
the repo.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ol start="70"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The repository search function doesn't support partial matches.&lt;/strong&gt; This
is annoying for &lt;a href="https://github.com/conda-forge/"&gt;conda-forge&lt;/a&gt;. For
instance, if I &lt;a href="https://github.com/conda-forge/?utf8=%E2%9C%93&amp;amp;q=png&amp;amp;type=&amp;amp;language="&gt;search for
"png"&lt;/a&gt;
it doesn't show the
&lt;a href="https://github.com/conda-forge/libpng-feedstock"&gt;libpng-feedstock&lt;/a&gt; repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show commit history as a graph.&lt;/strong&gt; Like &lt;code&gt;git log --graph&lt;/code&gt;. This would go
a &lt;em&gt;long&lt;/em&gt; way to helping new users understand git. When I first started
with git, understanding the history as a graph was a major part of me
finally grokking how it worked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bring back the old "fork" UI.&lt;/strong&gt; The one that just had icons for all the
repos, and the icons didn't go away or become harder to find if you
already had a fork. Some of us use the "fork" button to go to our
pre-existing forks, not just to perform a fork action. This was recently
changed and now it's better than it was, but I still don't see why
existing forks need to be harder to find, visually, than nonexisting ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Provide a more official way to request fixes to these cuts.&lt;/strong&gt; I often
ask on Twitter, but get no response. Preferably something public so that
others could vote on them (but I understand if you don't want too much
bikeshedding).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-conclusion</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - A Great Summer with SymPy</title>
      <pubDate>Wed, 22 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-conclusion</link>
      <description>&lt;p&gt;Today&amp;#8217;s day started with receiving an email from Google. Here is a snapshot:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://yathartha22.github.io/public/gsoc4.png" /&gt;&lt;/p&gt;

&lt;p&gt;This left a big smile on my face &amp;#128516;&lt;/p&gt;

&lt;p&gt;The past 3-4 months have been amazing and I have learnt a lot during the course of time. I would like to thank &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt;, &lt;a href="https://github.com/certik"&gt;Ondrej&lt;/a&gt; and the &lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt; team for providing me with this opportunity, my mentor &lt;a href="https://github.com/aktech"&gt;Amit Kumar&lt;/a&gt; for guiding me all through the phases and a special thanks to &lt;a href="https://github.com/smichr"&gt;Chris&lt;/a&gt; who was not officially my mentor but was present all the time for reviweing my work and helping me complete the project successfully.&lt;/p&gt;

&lt;p&gt;Here is what Amit has to say:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://yathartha22.github.io/public/gsoc5.png" /&gt;&lt;/p&gt;

&lt;p&gt;Though GSoC is completed I will be continuing my contribution in the developement of the software.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//final-report/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): GSoC 2018 Final Report</title>
      <pubDate>Tue, 14 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//final-report/</link>
      <description>&lt;p&gt;This post summarizes the work done on the Group Theory part of the combinatorics module during 2018 summers as a part of the GSoC programme</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/08/gsoc-conclusion</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): Concluding GSoC 2018: SymPy</title>
      <pubDate>Tue, 14 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/08/gsoc-conclusion</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;This post summarises the work that I have done during GSoC for SymPy. The links to the Pull Requests are in chronological order under each header. For following the progress made during GSoC, see my &lt;a href="https://sidhantnagpal.github.io/blog"&gt;weekly posts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This summer has been a great learning experience and has helped me get a good exposure of test-driven development. I plan to actively review the work that has went into this project and continue contributing to SymPy. I am grateful to my mentors, &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; for reviewing my work, giving me valuable suggestions, and being readily available for discussions.&lt;/p&gt;

&lt;h2 id="pull-requests"&gt;Pull Requests&lt;/h2&gt;

&lt;p&gt;This is the &lt;a href="https://github.com/sympy/sympy/pulls?q=is%3Apr+author%3Asidhantnagpal+is%3Aclosed"&gt;list&lt;/a&gt; of merged Pull Requests.&lt;/p&gt;

&lt;h4 id="major-additions"&gt;Major Additions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14725"&gt;sympy/sympy#14725&lt;/a&gt;: Add discrete module, and transforms sub-module including Fast Fourier Transform, Number Theoretic Transform, and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14745"&gt;sympy/sympy#14745&lt;/a&gt;: Add convolution sub-module including &lt;code class="highlighter-rouge"&gt;convolution_fft&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;convolution_ntt&lt;/code&gt; and a general method &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; for identifying the type of convolution and handling the cyclic convolution case, and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14765"&gt;sympy/sympy#14765&lt;/a&gt;: Implement Walsh Hadamard Transform and include doctests, unit-tests, docstring for the same.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14783"&gt;sympy/sympy#14783&lt;/a&gt;: Implement &lt;code class="highlighter-rouge"&gt;convolution_fwht&lt;/code&gt; and add support for keyword &lt;code class="highlighter-rouge"&gt;dyadic&lt;/code&gt; in the general &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method, and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14816"&gt;sympy/sympy#14816&lt;/a&gt;: Add a method &lt;code class="highlighter-rouge"&gt;linrec&lt;/code&gt; which allows evaluation of linear recurrences without obtaining closed form expressions, and include tests for the same.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14853"&gt;sympy/sympy#14853&lt;/a&gt;: Implement M&amp;#246;bius Transform using Yate&amp;#8217;s Dynamic Programming method while having &lt;code class="highlighter-rouge"&gt;subset&lt;/code&gt; keyword for flexibility of the implementation, and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14878"&gt;sympy/sympy#14878&lt;/a&gt;: Implement subset convolution and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14928"&gt;sympy/sympy#14928&lt;/a&gt;: Add covering product in convolutions sub-module and include docstring, doctests, unit-tests.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14954"&gt;sympy/sympy#14954&lt;/a&gt;: Add intersecting product in convolutions sub-module and include docstring, doctests, unit-tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="documentation-and-code-refinements"&gt;Documentation and Code Refinements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14969"&gt;sympy/sympy#14969&lt;/a&gt;: Improve Sphinx &lt;a href="http://docs.sympy.org/"&gt;docs&lt;/a&gt; for SymPy, use plural module names - &lt;code class="highlighter-rouge"&gt;convolutions&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;recurrences&lt;/code&gt;, refine the documentation for &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14994"&gt;sympy/sympy#14994&lt;/a&gt;: Add reStructuredText file for &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module for inclusion in Sphinx docs, which can be referred &lt;a href="http://docs.sympy.org/dev/modules/discrete.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/15025"&gt;sympy/sympy#15025&lt;/a&gt;: Refine &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module to fix tests using floats instead of Rationals, adding warning about sequence size for &lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt; and other improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="additional-improvements"&gt;Additional Improvements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14712"&gt;sympy/sympy#14712&lt;/a&gt;: Add &lt;code class="highlighter-rouge"&gt;.rewrite(exp)&lt;/code&gt; capability for instances of &lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt; and fix bugs in &lt;code class="highlighter-rouge"&gt;solvers&lt;/code&gt; module.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14907"&gt;sympy/sympy#14907&lt;/a&gt;: Fix exception handling for factorial modulo and refine the signature for general &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/sympy/sympy-bot/pull/18"&gt;sympy/sympy-bot#18&lt;/a&gt;: Fix the issue of incorrect links being referred in wiki by explicitly specifying the links instead of using relative paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Adding a user-facing public method that internally calls &lt;code class="highlighter-rouge"&gt;discrete.recurrences.linrec&lt;/code&gt; and possibly extending it for different types of recurrences as well.&lt;/li&gt;
  &lt;li&gt;Making methods &lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;convolution_fft&lt;/code&gt; efficient for both symbolic and numeric variants, as some discussion and benchmarking has been done for it and there is some work done by &lt;a href="https://github.com/cbm755"&gt;Colin&lt;/a&gt; for implementing a &lt;code class="highlighter-rouge"&gt;ComplexFloat&lt;/code&gt; class in &lt;a href="https://github.com/sympy/sympy/pull/12192"&gt;sympy/sympy#12192&lt;/a&gt; which would be very helpful for the same.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=17</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): GSoC 2018: Autolev Parser (using ANTLRv4): Final Report</title>
      <pubDate>Sat, 11 Aug 2018 21:28:45 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/11/gsoc-2018-autolev-parser-using-antlrv4-final-report/</link>
      <description>&lt;h2&gt;About Me:&lt;/h2&gt;
&lt;p&gt;I am Nikhil Pappu, an undergraduate Computer Science student at the International Institute of Information Technology, Bangalore.&lt;/p&gt;
&lt;h2&gt;About the Project:&lt;/h2&gt;
&lt;p&gt;Autolev (now superseded by MotionGenesis) is a domain specific language used for symbolic multibody dynamics. The SymPy mechanics module now has enough power and functionality to be a fully featured symbolic dynamics module. The parser parses Autolev (version 4.1) code to SymPy code by making use of SymPy&amp;#8217;s math libraries and the mechanics module.&lt;/p&gt;
&lt;p&gt;The parser has been built using the &lt;a href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework and its main purpose is to help former users of Autolev to get familiarized with multibody dynamics in SymPy.&lt;/p&gt;
&lt;h2&gt;The Plan:&lt;/h2&gt;
&lt;p&gt;The plan was to build a parser using ANTLR that could parse Autolev code to SymPy code.&amp;#160; Overall,&amp;#160; I think I was able to achieve most of what I had hoped for. I had faced some difficulties in some areas of the parser due to the very different nature of Autolev and Python. The parser has some issues as a result. I have specified all the details in the documentation I have written.&lt;/p&gt;
&lt;h2&gt;Work Done:&lt;/h2&gt;
&lt;p&gt;I made a parser for the Autolev language which is now a part of SymPy in the parsing module. I have written the code for the parser using the ANTLR framework. I have also included a bunch of tests for testing the rules of the parser code.&lt;/p&gt;
&lt;p&gt;The majority of the work was a part of PR &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;. I made a second PR &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; for the changes I had made after the main PR.&lt;/p&gt;
&lt;p&gt;I have written documentation for the parser which is a part of these PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also written a PyDy for Autolev Users guide which is a part of PR &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;. This guide is meant to be a quick reference for looking up Autolev-PyDy equivalents.&lt;/p&gt;
&lt;h2&gt;Future Work:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The parser has been built by referring to and parsing codes from the &lt;a class="reference external" href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; and the book &lt;em&gt;Dynamics Online: Theory and Implementation Using Autolev&lt;/em&gt;. Basically, the process involved going through each of these codes, validating the parser results and improving the rules if required to make sure the codes parsed well.
&lt;p&gt;As of now, a large number of codes of &lt;em&gt;Dynamics Online&lt;/em&gt; have been parsed. Completing all the remaining codes of the book would make the parser more complete.&lt;/li&gt;
&lt;li&gt;There are some limitations and issues with the parser and these have been discussed in the documentation. The plan is to fix these in order of priority.&lt;/li&gt;
&lt;li&gt;The parser is currently built using a kind of Concrete Syntax Tree (CST) using the &lt;a class="reference external" href="http://www.antlr.org/"&gt;ANTLR&lt;/a&gt; framework. It would be ideal to switch from a CST to an Abstract Syntax Tree (AST). This way, the parser code will be independent of the ANTLR grammar which makes it a lot more flexible. It would also be easier to make changes to the grammar and the rules of the parser.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would like to keep contributing to SymPy. I would be doing a lot of math in college especially related to data science so I would love to contribute in areas like Probability and Algebra among others. I would also like to help newcomers feel comfortable with the environment.&lt;/p&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;I would like to thank my mentors &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt; and &lt;a href="https://github.com/moorepants"&gt;Jason Moore&lt;/a&gt; for believing in me and taking time out from their busy schedules to guide me throughout the project. I would also like to thank &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for looking over GSoC as the org admin and making sure that we all had a great experience working with SymPy.&lt;/p&gt;
&lt;h2&gt;Links:&lt;/h2&gt;
&lt;p&gt;Main PR: &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Updated parser code PR: &lt;a href="https://github.com/sympy/sympy/pull/15006"&gt;#15006&lt;/a&gt; and&lt;a href="https://github.com/sympy/sympy/pull/15013"&gt; #15013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Documentation PRs: &lt;a href="https://github.com/sympy/sympy/pull/15046"&gt;#15046&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/15066"&gt;#15066&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/15067"&gt;#15067&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyDy for Autolev Users guide PR: &lt;a href="https://github.com/sympy/sympy/pull/15077"&gt;#15077&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Weekly Blog link: &lt;a href="https://nkhlpappu.wordpress.com/"&gt;https://nkhlpappu.wordpress.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-12</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 12 - Continuing with logarithmic solver and implementing lambert solver Part-II</title>
      <pubDate>Thu, 09 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-12</link>
      <description>&lt;p&gt;This week I continued the work with log solver and lambert solver. The log solver implementation is almost done with just few check for assumptions. Symbolic logarithmic equations should be dealt with proper assumptions. Such equations would give unsolved instance of &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a, b, x'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ConditionSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# because the bases (here, `a and b`) should have a positive value &amp;gt; 0)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Discussions with Amit and Chris suggested that there should be some other way to handle vanilla symbols. There should be atleast a &lt;code class="highlighter-rouge"&gt;ValueError&lt;/code&gt; or something else that would tell the user why this cannot be solved. Chris suggested of returning a &lt;code class="highlighter-rouge"&gt;Piecewise&lt;/code&gt; as  object for this scenario. Something like:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fuzzy_and&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;Piecewise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;solutions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ConditionSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;........&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using Piecewise was not the greatest of the option as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Though the assumptions were checked but it didn&amp;#8217;t provided information to the user that why did it not solved.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also using &lt;code class="highlighter-rouge"&gt;Piecewise&lt;/code&gt; had some problem causing recursion error, though it could be solved but it would make things unncessarily complicated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; is not made to return objects other than &lt;code class="highlighter-rouge"&gt;Sets&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we switched to a completely different approach. We tried using a different type of &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;: providing the information within it that is necessary for the equation to be solved. The approach was: &lt;em&gt;Force the equation to get solved but return a ConditionSet (a different than ususal) with the required assumptions, like:&lt;/em&gt;
&lt;code class="highlighter-rouge"&gt;ConditionSet(x, And(a_base&amp;gt;0, b_base&amp;gt;0, Eq(im(a_exp), 0), Eq((im(b_exp), 0))), {solutions})&lt;/code&gt;. So now the above equation would return solutions something like:
&lt;code class="highlighter-rouge"&gt;ConditionSet(x, (a &amp;gt; 0) &amp;amp; (b &amp;gt; 0), Intersection(Reals, {log(b)/(log(a) - log(b))}))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So this approach has been applied in the &lt;a href="https://github.com/sympy/sympy/pull/14792"&gt;PR&lt;/a&gt; as of now, only a few minor changes needs to be done. I will try to finish this by the end of the week.&lt;/p&gt;

&lt;p&gt;Apart from this some work has been done in &lt;code class="highlighter-rouge"&gt;lambert solver&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Used &lt;code class="highlighter-rouge"&gt;_is_lambert&lt;/code&gt; to identify lambert type equations.&lt;/li&gt;
  &lt;li&gt;Implemented bivariate solver (I will add a commit for this soon).&lt;/li&gt;
  &lt;li&gt;Ran &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;&amp;#8217;s tests, to get an idea of the extent to which &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; would handle such equations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What&amp;#8217;s next:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will try to wrap up the work of both the PR&amp;#8217;s. Lambert solver PR would need a bit more time for reviewing but nevertheless I will be continuing its work post GSoC. Implementing these two solvers will make &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; fully functional to handle transcendental equations which is a major part of my GSoC propsal. There will be a few minor things left that I will try to finish post GSoC. Also since this is the last week for the coding period, I will be needing to submit a final report of my work, I will complete and submit it before the deadline.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/08/gsoc-week12</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC 2018: SymPy - Week 12</title>
      <pubDate>Tue, 07 Aug 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/08/gsoc-week12</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The final week of Coding Period has completed.&lt;/p&gt;

&lt;p&gt;This week, the work was mainly concerned with the documentation and refinements in the &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module.
I started by opening PR &lt;a href="https://github.com/sympy/sympy/pull/14994"&gt;#14994&lt;/a&gt; to update Sphinx docs for SymPy.
&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; were kind enough to review the PR and help refine it for the final merge. The documentation for &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module is now part of the SymPy docs and can be referred &lt;a href="http://docs.sympy.org/dev/modules/discrete.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Late this week, I opened PR &lt;a href="https://github.com/sympy/sympy/pull/15025"&gt;#15025&lt;/a&gt; for improvements in the &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module.
&lt;a href="https://github.com/cbm755"&gt;Colin&lt;/a&gt; helped fix accidental floats in unit tests (which should have been Rationals). After the review, the PR was merged successfully.&lt;/p&gt;

&lt;p&gt;Future work would include - addition of a user-facing public method for &lt;code class="highlighter-rouge"&gt;linrec&lt;/code&gt; and making methods &lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;convolution_fft&lt;/code&gt; efficient for both symbolic and numeric variants, as some discussion and benchmarking has been done for it and there is some work done by &lt;a href="https://github.com/cbm755"&gt;Colin&lt;/a&gt; for &lt;code class="highlighter-rouge"&gt;ComplexFloat&lt;/code&gt; class in PR &lt;a href="https://github.com/sympy/sympy/pull/12192"&gt;#12192&lt;/a&gt; which would be helpful for the same.&lt;/p&gt;

&lt;p&gt;Looking forward to the concluding phase, where I will be wrapping up GSoC and preparing the report for the final evaluation.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=15</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 03 Aug 2018 20:36:26 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/08/03/autolev-parser-status-update-4/</link>
      <description>&lt;p&gt;I have made some changes to the parser code to parse more files since &lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt; has been merged. I have also made the changes suggested in that PR after it had been merged. I have opened a new PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/15006/"&gt;#15006&lt;/a&gt;&amp;#160;for the updated parser code. I have also opened &lt;a href="https://github.com/sympy/sympy/pull/15013"&gt;#15013&lt;/a&gt;&amp;#160;to include tests for physics functions which I didn&amp;#8217;t do in the initial PR. The GitLab repo autolev-test-examples is in good shape now and is part of the sympy user.&lt;/p&gt;
&lt;p&gt;I am currently writing the documentation in which I shall include how to use the parser, gotchas, limitations, issues and future improvements. I shall also include a rewritten version of the PyDy for Autolev Users guide in it.&lt;/p&gt;
&lt;p&gt;I shall then write the output tests (Tests to compare the outputs of Autolev against those of SymPy) for most of the test examples in the GitLab repo (I shall include these in a directory called output-tests in the GitLab repo). I think its good to put them here as I don&amp;#8217;t see the need to test these on Travis as changing the parser code won&amp;#8217;t affect these. Plus, they will be in a place where the test examples are which are what they will be based on. We could still test these on Travis if required even from here I suppose.&lt;/p&gt;
&lt;p&gt;Finally, I shall wrap things up with the Final Report and Submission.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=95</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 11: unset_show bug and documentation</title>
      <pubDate>Mon, 30 Jul 2018 17:45:07 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/30/week-11-unset_show-bug-and-documentation/</link>
      <description>&lt;p&gt;Last week, I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;for implementation of plotting methods.&amp;#160;Soon after pushing my commits, many of the jobs failed on Travis. It was strange as I was not able to reciprocate the errors locally.&lt;/p&gt;
&lt;p&gt;After discussing it on Gitter, I got to know that it was due to the printing of plots using TextBackend in the doctest in absence of matplotlib. As matplotlib was present in my system,&amp;#160; doctest used matplotlib backend instead of TextBackend locally, hence passing all tests.&amp;#160;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;&amp;#160;suggested using&amp;#160;&lt;em&gt;unset_show &lt;/em&gt;to stop the printing of plots during doctest but apparently,&amp;#160;&lt;em&gt;unset_show&amp;#160;&lt;/em&gt;didn&amp;#8217;t work for TextBackend. This was fixed by&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14984"&gt;#14984&lt;/a&gt;&amp;#160;later that day and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;passed all the tests after former one was merged.&lt;/p&gt;
&lt;p&gt;This week, I also started editing&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;for documentation. It included a few beam problems along with their ascii diagrams.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;and&lt;a href="https://github.com/sympy/sympy/pull/14453"&gt;#14453&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;&amp;#160;Add more beam problems for documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5320864463564984752</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 11</title>
      <pubDate>Sun, 29 Jul 2018 14:47:17 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-11.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 11th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;The main PR, which contains the major changes of this GSoC period was merged this week. I had not run pyflakes on it. I ran pyflakes on the main PR and fixed undefined issues.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;This week was mainly spent to test code generation. Initially, there was some error in generating the code. An &lt;a href="https://github.com/HPAC/matchpy/issues/33"&gt;issue&lt;/a&gt; was opened in this regard. I tried various other structure of Rubi to get it working.&amp;nbsp; Currently, patterns are not matched correctly. I have opened a &lt;a href="https://github.com/sympy/sympy/pull/14988"&gt;PR&lt;/a&gt; for this. We are still trying to get the code generator working so that we can reduce the loading time of rules. Now, the loading time of all rules is around 10 minutes.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-11</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 11 - Continuing with logarithmic solver and implementing lambert solver</title>
      <pubDate>Sun, 29 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-11</link>
      <description>&lt;p&gt;So this week I started up with implementing and sending a PR for lambert solver &lt;a href="https://github.com/sympy/sympy/pull/14972"&gt;#14972&lt;/a&gt;. Solving these equations can be achieved by &lt;code class="highlighter-rouge"&gt;_solve_lambert&lt;/code&gt; routine of &lt;a href="https://github.com/sympy/sympy/blob/2b4afb6cd0a7cd5791d512b80fce493cda9b57e0/sympy/solvers/bivariate.py"&gt;bivariate.py&lt;/a&gt;. It is really powerful and can solve a varied type of equations having a general form. Another routine comes into action, the &lt;code class="highlighter-rouge"&gt;bivariate_type&lt;/code&gt; to solve majorly lambert type of equations when the former is unable to solve. These two routines can be handy for implementing such equations. As of now I have added &lt;code class="highlighter-rouge"&gt;_solve_lambert()&lt;/code&gt; in the PR. I will add &lt;code class="highlighter-rouge"&gt;bivariate_type&lt;/code&gt; once the log solver PR gets finalised. There are few equations that can be solved by posifying the variable that needs to be solved. A bit discussion is needed on this part.&lt;/p&gt;

&lt;p&gt;Apart from this, a lot of work was done in the &lt;code class="highlighter-rouge"&gt;log solver&lt;/code&gt; PR&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;_term_factors()&lt;/code&gt; is used again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Logic for exponential identifying is modified to not identify lambert type equations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Few mores tests were added.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/smichr"&gt;Chris&lt;/a&gt; advised to make identification helpers such that they identify their class even if they won&amp;#8217;t get solved by their respective solvers, the equation should not be passed to any of the other helpers for further solving. This wasn&amp;#8217;t the case before, the identifying helpers were implemented only for equations that their helpers could solve. So now this idea is implemented for both the exponential and logarithmic solver.
Equations that these identifiers can&amp;#8217;t identify will be further solved as lambert type.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost all the work of the log solver PR is done. I will be finishing the work on lambert solver PR and complete in coming week. I hope both the PR&amp;#8217;s gets merged before the GSoC period ends.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/07/gsoc-week11</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC 2018: SymPy - Week 11</title>
      <pubDate>Sat, 28 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/07/gsoc-week11</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;This week, I started working on adding the final method to convolution module for Intersecting Product. PR &lt;a href="https://github.com/sympy/sympy/pull/14954"&gt;#14954&lt;/a&gt; dealt with the addition of &lt;code class="highlighter-rouge"&gt;intersection_product&lt;/code&gt; method. Intersecting Product was implemented using M&amp;#246;bius Transform with superset enumeration (&lt;code class="highlighter-rouge"&gt;mobius_transform(..., subset=False)&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;inverse_mobius_transform(..., subset=False)&lt;/code&gt;). After minor documentation improvements, the PR was merged successfully. The proposed transforms and convolutions are now part of &lt;code class="highlighter-rouge"&gt;sympy.discrete&lt;/code&gt;. The basic usage for the method is:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intersecting_product&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'u v x y z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;intersecting_product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;intersecting_product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Late this week, I started working on improving the documentation for SymPy&amp;#8217;s Sphinx docs (&lt;a href="http://docs.sympy.org/dev/index.html"&gt;http://docs.sympy.org/dev/index.html&lt;/a&gt;) and other minor changes in the PR &lt;a href="https://github.com/sympy/sympy/pull/14969"&gt;#14969&lt;/a&gt;. Also, issue &lt;a href="https://github.com/sympy/sympy/issues/14964"&gt;#14964&lt;/a&gt; was opened to discuss the possibility of using LaTeX in docstrings for SymPy documentation. The following changes were part of the PR:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use LaTeX for docstrings in functions.combinatorial (reference to &lt;a href="https://github.com/sympy/sympy/issues/14964"&gt;#14964&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Include genocchi and partition numbers in sphinx docs&lt;/li&gt;
  &lt;li&gt;Improve docstrings with single and double backticks for sphinx docs&lt;/li&gt;
  &lt;li&gt;Use plural module names under discrete (discrete.convolutions and discrete.recurrences)&lt;/li&gt;
  &lt;li&gt;Add graphviz as a prerequisite in sympy/doc/README.rst for Debian/Ubuntu&lt;/li&gt;
  &lt;li&gt;Fix links in references containing rounded braces and unicode chars for sphinx docs&lt;/li&gt;
  &lt;li&gt;Miscellaneous improvements to documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Successive reviews and discussions were helpful in finalizing the Pull Requests.&lt;/p&gt;

&lt;p&gt;Looking forward to the final week of Coding Period.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=13</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 27 Jul 2018 20:24:12 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/27/autolev-parser-status-update-3/</link>
      <description>&lt;p&gt;Hello Everyone. I have been working on getting the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14758"&gt;#14758&lt;/a&gt;&amp;#160;into shape and now it is finally merged. I have written my own tests for the PR so as to not include copyrighted files that belong to the creators of Autolev.&lt;/p&gt;
&lt;p&gt;I am now working on a &lt;a href="https://gitlab.com/NikhilPappu/test-examples/"&gt;test-examples repo&lt;/a&gt; which serves as a showcase of the parser and also as a source of additional tests. The repo is private on GitLab as it contains copyrighted files. You can request access at the repo link above. Files from this repo can be copied over to the test_examples folder of parsing/autolev to use them as tests. From now, I will be working on adding more examples from the PyDy example repo, Autolev Tutorial, and Dynamics Online to this repo while improving the code of the parser to parse all these codes. I am also making note of things like errors, inaccuracies etc to include them in the Documentation.&lt;/p&gt;
&lt;p&gt;I will open another PR once I have made enough number of changes to the parser code.&lt;/p&gt;
&lt;p&gt;Here is my plan for the future of this project:&lt;/p&gt;
&lt;p&gt;Till the end of GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work on getting the test-examples repo in good shape.&lt;/li&gt;
&lt;li&gt;Write extensive Documentation (explaining what the parser can do, how to use it,&amp;#160; limitations, issues, future improvements etc).&lt;/li&gt;
&lt;li&gt;Work on as many Dynamics Online codes (which I shall include in the repo) as possible (Wrap up Ch4 and hoping to get half of Ch5 done (as it is quite big)).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Post GSoC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finish the rest of the Dynamics Online Book (Whatever is left of Ch5 and also Ch6 which I think is less important).&lt;/li&gt;
&lt;li&gt;Work on the issues that I will be listing down in the documentation one by one after discussing the possible fixes (Some of these might require changes in the parser while some others require changes in the SymPy code while I do not have much of an idea about the fixes of some other ones).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Nikhil&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=93</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 10: Implementing plotting methods</title>
      <pubDate>Tue, 24 Jul 2018 18:12:09 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/24/week-10-implementing-plotting-methods/</link>
      <description>&lt;p&gt;This week I started working on implementing methods to plot Shear force, bending moment, slope and deflection diagrams.&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;was created for it.&lt;/p&gt;
&lt;p&gt;Mainly four methods were added to the Beam class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot_shear_force: This method returns a plot for Shear force present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_bending_moment: This method returns a plot for Bending moment present in the Beam object.&lt;/li&gt;
&lt;li&gt;plot_slope: This method returns a plot for slope of the elastic curve of the Beam.&lt;/li&gt;
&lt;li&gt;plot_delfection: This method returns a plot for the deflection curve of the Beam object.&lt;/li&gt;
&lt;li&gt;plot_loading_results: This method returns&amp;#160;fig object containing subplots of Shear Force, Bending Moment,&amp;#160;Slope and Deflection of the Beam object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/jashan498/beam_examples/blob/master/beam_plots.ipynb"&gt;Here&lt;/a&gt;&amp;#160;is a sample notebook demonstrating how to use these plotting methods.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14967"&gt;#14967&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;Add more beam problems to the documentation.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//misc/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Subgroup quotients, Polycyclic groups and misc</title>
      <pubDate>Tue, 24 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//misc/</link>
      <description>&lt;p&gt;GSoC'18 Week 9 &amp; 10</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-4503634706614858581</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 10</title>
      <pubDate>Sun, 22 Jul 2018 15:35:32 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-10.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief progress of Rubi&amp;nbsp;module in the 10th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we were able to load all rules. Rubi has now come in a very stable and working condition. One Missing thing in the main &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; was missing instructions and documentation. This week I tried my best to write instructions, so that a new user can easily get familiar with it. I have kept it really simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Initially, I wrote a script in Mathematica to generate downvalues&amp;nbsp;in separate files. This was done till now manually, but now it's automated. Then I wrote a sympy&amp;nbsp;script to generate all rules and constraints in proper files directly just by running a function.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;For a more easier understanding of steps, I created&amp;nbsp;`rubi_parsing_guide.md` explaining all steps.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Next thing I realised that it would be good if we create a parsing script for the tests too. Till now I used maple format. But a lot of manual things were required. So I wrote a script which directly parses tests into sympy&amp;nbsp;format. All this are added properly in `rubi_parsing_guide.md`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;`init` in Rubi&amp;nbsp;too was updated with proper explanation of basic structure of rules and constraints. I also updated docs of few important utility_functions.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Now a new user can easily get familiar with Rubi and working with it will be simple.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;I have also opened a new &lt;a href="https://github.com/sympy/sympy/pull/14956"&gt;PR&lt;/a&gt; for new utility_functions. Once the old &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt; gets merged, we can merge this.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-10</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 10 - Continuing with logarithmic solver</title>
      <pubDate>Sun, 22 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-10</link>
      <description>&lt;p&gt;This week started with the merge of the PR &lt;a href="https://github.com/sympy/sympy/pull/14736"&gt;#14736&lt;/a&gt;. Yehhhh!!!!!. So now &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; will be able to solve a varied type of exponential equations.  Next work is going on to build the logarithmic and lambert solver.&lt;/p&gt;

&lt;p&gt;A lot of discussion has been taken place over the implementation of the logarithmic solver, there were mainly two points to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the logarithmic equation gets evaluated, i.e., should we consider solutions that would make the log term negative.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take for instance a logarithmic equation &lt;code class="highlighter-rouge"&gt;log(x - 3) + log(x + 3) = 0&lt;/code&gt;, when solved the solutions would be &lt;code class="highlighter-rouge"&gt;-sqrt(10) and sqrt(10)&lt;/code&gt;, but &lt;code class="highlighter-rouge"&gt;-sqrt(10)&lt;/code&gt; make the log term negative. So the question was what should we do for such a scenario? Should we add a check to remove these solution or just accept. it.&lt;/p&gt;

&lt;p&gt;As of now as suggested by &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; we should focus on the liberal interpratation for evaluating equations: if an expression can be written in its equivalent form and makes sense then we can consider solutions of this equivalent form. Therefore both the above solutions are acceptable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the identification of the logarithmic equations would take place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The identification of logarithmic type is another question and is still yet to be agreed upon. At first the implementation was done by extracting each term of the expression and see if it has &lt;code class="highlighter-rouge"&gt;log&lt;/code&gt; terms in it, this wasn&amp;#8217;t the best of the method as we are trying to identify a large class of logarithmic equation while solving is done only for a subset of those equations (only those that can be reduced by &lt;code class="highlighter-rouge"&gt;logcombine&lt;/code&gt;). So Amit and Chris stressed upon making the logarithmic identification for equations that its solver would solve. So as of now I have made changes accordingly.&lt;/p&gt;

&lt;p&gt;Another problem that this PR is facing is of the infinite recursion. The equations that both exponential and logarithmic can&amp;#8217;t solve but still their respective solver try to handle gets into infinite recursion. One way (though not appropriate) is to use &lt;code class="highlighter-rouge"&gt;flags&lt;/code&gt; like in &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;, using this would remove the infinite recursion but is not the best way to  handle, therefore I am looking into ways on how to get this fixed.&lt;/p&gt;

&lt;p&gt;Apart from the work on log solver, I did some work on lambert solver- how the implementation would go, ran all the tests of &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;, differentiated the tests that &lt;code class="highlighter-rouge"&gt;_solve_lambert&lt;/code&gt; could solve and that &lt;code class="highlighter-rouge"&gt;bivariate_type&lt;/code&gt; would. I will be adding a PR for this in a day or so.&lt;/p&gt;

&lt;p&gt;Next week goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Finish things with logarithmic solver&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sending a PR for lambert solver and try to finish its work as quickly as possible.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/07/gsoc-week10</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC 2018: SymPy - Week 10</title>
      <pubDate>Sat, 21 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/07/gsoc-week10</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;This week SymPy 1.2 was released, which included the &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module. The complete changelog for the SymPy 1.2 is &lt;a href="https://github.com/sympy/sympy/wiki/Release-Notes-for-1.2"&gt;here&lt;/a&gt;. I started the week by cleaning up &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module, improving the API of public &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method by attending to reviews by &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; and &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and fixing issue &lt;a href="https://github.com/sympy/sympy/issues/14901"&gt;#14901&lt;/a&gt; reported by &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; in &lt;a href="https://github.com/sympy/sympy/pull/14907"&gt;PR #14907&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/sympy/sympy/pull/14907"&gt;PR #14907&lt;/a&gt; has been merged successfully and will be part of SymPy 1.2.1.&lt;/p&gt;

&lt;p&gt;Late this week, I started working on the convolution module for inclusion of &lt;code class="highlighter-rouge"&gt;covering_product&lt;/code&gt;.
The &lt;a href="https://github.com/sympy/sympy/pull/14928"&gt;PR #14298&lt;/a&gt; included the same with documentation, doctests and unit tests.
The implementation of &lt;code class="highlighter-rouge"&gt;covering_product&lt;/code&gt; uses M&amp;#246;bius Transform with subset enumeration (&lt;code class="highlighter-rouge"&gt;mobius_transform(..., subset=True)&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;inverse_mobius_transform(..., subset=True)&lt;/code&gt;). As included in the PR, the usage for the same is:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;covering_product&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'u v x y z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;covering_product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;covering_product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looking forward to the next week, where I will be implementing &lt;code class="highlighter-rouge"&gt;intersecting_product&lt;/code&gt; as the final method for the convolution module.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=9</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Fri, 20 Jul 2018 22:31:06 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/20/autolev-parser-status-update-2/</link>
      <description>&lt;p&gt;I have been working on improving the parser by parsing Dynamics online codes, planning out how to go about writing tests and other aspects of the project and getting the PR into shape.&lt;/p&gt;
&lt;p&gt;I am currently working on writing tests to cover all the rules of the parser. I should be done with this in 2 days.&lt;/p&gt;
&lt;p&gt;This is the plan I have for the third phase:&lt;/p&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Make the PR merge ready:&lt;/span&gt;
&lt;ol&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Finish the tests for the parser rules and get the PR merged.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;open a new PR to work on further improvements.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;additional_tests (will be added in a private BitBucket repo). Here I shall go through many codes from these sources and improve the parser to parse most of these. I shall take notes on little details and errors so that I can include them in the documentation.&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;PyDy example repo (mass spring damper, double pendulum, chaos pendulum examples)&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Dynamics Online Chapters 1 &amp;#8211; 4&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Autolev Tutorial Examples (5.1 &amp;#8211; 5.7)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Documentation (What the parser can do, How it should be used, Limitations, Future improvements etc)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Make the parser parse Dynamics Online Chapter 5 codes and the Bicycle Model.&lt;/li&gt;
&lt;li&gt;&lt;span style="font-weight: 400;"&gt;Final Report&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=71</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 8 &amp; 9: Beam_3d class</title>
      <pubDate>Tue, 17 Jul 2018 16:42:54 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/17/week-8-9-07-july-20-july/</link>
      <description>&lt;p&gt;I started implementing Beam_3d class which can be used to find Shear force, Bending moment, Slope, Deflection and other few things for the Beam object.&amp;#160; PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;was created for this.&lt;/p&gt;
&lt;p&gt;I implemented Beam_3d class using&amp;#160;&amp;#160;&lt;a href="http://homes.civil.aau.dk/jc/FemteSemester/Beams3D.pdf" rel="nofollow"&gt;this paper&lt;/a&gt;&amp;#160;as a reference. Actually, like Beam class, it uses a few sets of equations to find certain quantities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Shear force&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Bending moment&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" rel="noopener"&gt;&lt;img alt="shear" src="https://user-images.githubusercontent.com/31389737/42560335-0c45e50e-8514-11e8-9fb1-f9d27040b4d8.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[N, Q&lt;sub&gt;y&lt;/sub&gt;, Q&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[M&lt;sub&gt;x&lt;/sub&gt;, M&lt;sub&gt;y&lt;/sub&gt;, M&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are the shear force and bending moment along x-y-z-axes respectively (&lt;em&gt;q&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;m&lt;/em&gt;&amp;#160;are applied load and moment).&lt;/li&gt;
&lt;li&gt;To find&amp;#160;&lt;em&gt;Slope&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;Deflection&lt;/em&gt;:&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" rel="noopener"&gt;&lt;img alt="def_1" src="https://user-images.githubusercontent.com/31389737/42560803-2e2ea592-8515-11e8-81cc-b511e1286ff5.png" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" rel="noopener"&gt;&lt;img alt="def_2" src="https://user-images.githubusercontent.com/31389737/42560832-466c2986-8515-11e8-9ac7-4a0939a41a52.png" /&gt;&lt;/a&gt;&lt;br /&gt;
where&amp;#160;&lt;em&gt;[w&lt;sub&gt;x&lt;/sub&gt;, w&lt;sub&gt;y&lt;/sub&gt;, w&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;and&amp;#160;&lt;em&gt;[&amp;#952;&lt;sub&gt;x&lt;/sub&gt;, &amp;#952;&lt;sub&gt;y&lt;/sub&gt;, &amp;#952;&lt;sub&gt;z&lt;/sub&gt;]&lt;/em&gt;&amp;#160;are deflection and slope along three axes respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example for the API:&lt;/p&gt;
&lt;p&gt;There is a beam of l meters long. A constant distributed load of magnitude q&lt;br /&gt;
is applied along the y-axis from start till the end of the beam. A constant distributed&lt;br /&gt;
moment of magnitude m is also applied along the z-axis from start till the end of the beam. Beam is fixed at both of its end. So, deflection of the beam at the both ends&lt;br /&gt;
is restricted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam_3d
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l, E, G, I, A = symbols('l, E, G, I, A')
&amp;gt;&amp;gt;&amp;gt; b = Beam_3d(l, E, G, I, A)
&amp;gt;&amp;gt;&amp;gt; b.apply_support(0, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.apply_support(l, "fixed")
&amp;gt;&amp;gt;&amp;gt; q, m = symbols('q, m')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(q, dir="y")
&amp;gt;&amp;gt;&amp;gt; b.apply_moment_load(m, dir="z")
&amp;gt;&amp;gt;&amp;gt; b.shear_force()
[0, -q*x, 0]
&amp;gt;&amp;gt;&amp;gt; b.bending_moment()
[0, 0, -m*x + q*x**2/2]
&amp;gt;&amp;gt;&amp;gt; b.solve_slope_deflection()
&amp;gt;&amp;gt;&amp;gt; b.slope()
[0, 0, l*x*(-l*q + 3*l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I)) + 3*m)/(6*E*I)
+ q*x**3/(6*E*I) + x**2*(-l*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*(A*G*l**2 + 12*E*I))
- m)/(2*E*I)]
&amp;gt;&amp;gt;&amp;gt; b.deflection()
[0, -l**2*q*x**2/(12*E*I) + l**2*x**2*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(8*E*I*(A*G*l**2 + 12*E*I))
+ l*m*x**2/(4*E*I) - l*x**3*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(12*E*I*(A*G*l**2 + 12*E*I)) - m*x**3/(6*E*I)
+ q*x**4/(24*E*I) + l*x*(A*G*l**2*q - 2*A*G*l*m + 12*E*I*q)/(2*A*G*(A*G*l**2 + 12*E*I)) - q*x**2/(2*A*G), 0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As this class is relatively new, it would require a few improvements in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160;doesn&amp;#8217;t use&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;, I was unable to find a way to represent point load/moments. So for now&amp;#160;&lt;code&gt;Beam_3d&lt;/code&gt;&amp;#160; only supports continous load (applied over the whole span length of beam).&lt;/li&gt;
&lt;li&gt;Also,&amp;#160;This class assumes that any kind of distributed load/moment is&lt;br /&gt;
applied throughout the span of a beam.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, after discussing it with Arihant, we decided to raise NotImplementedError in such cases.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14883"&gt;#14883&lt;/a&gt;&amp;#160;gets merge by the end of next week.&lt;/li&gt;
&lt;li&gt;Start implementing plotting methods for Beam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5913583019178491882</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 9</title>
      <pubDate>Sun, 15 Jul 2018 15:13:26 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-9.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the progress of &lt;/span&gt;rubi&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt; module in the 9th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the very beginning of the week, the PR for appelf1 was merged. My aim for this week was to load all rules and test at least&amp;nbsp;a small part for each type of rule. Due to the time factor, its not possible to test all. Moreover, rubi needs to be updated to the latest version, so the test suite too will be updated.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started with trigo rules. They are huge in number. They were never tested before, so some utility_functions like `&lt;i&gt;TrigReduce&lt;/i&gt;`, `&lt;i&gt;KnownTrigIntegrandQ&lt;/i&gt;`, `&lt;i&gt;FunctionOfTrig&lt;/i&gt;` etc were wrong. They were corrected. Soon I realised a difference between sympy and Mathematica. In mathematica, `&lt;i&gt;1/Cot[x]`&lt;/i&gt; is automatically transformed to `&lt;i&gt;Tan[x]&lt;/i&gt;` and `&lt;i&gt;1/Tan[x]&lt;/i&gt;` too was transformed to `&lt;i&gt;Cot[x]`&lt;/i&gt;. But in sympy, these are different. So, `&lt;i&gt;tan(x)&lt;/i&gt;` didn't match to `&lt;i&gt;cot(x)&lt;/i&gt;` . Francesco suggested to replace all `&lt;i&gt;cot&lt;/i&gt;` with `&lt;i&gt;1/tan&lt;/i&gt;`&amp;nbsp; and similarly for `&lt;i&gt;sec&lt;/i&gt;` and `&lt;i&gt;csc`&lt;/i&gt; (in the code generator too).&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Next, I moved to `&lt;i&gt;inverse_trigo&lt;/i&gt;`, `&lt;i&gt;hyperbolic&lt;/i&gt;` and `&lt;i&gt;inverse_hyperbolic&lt;/i&gt;`. I tested some test cases for all these rules. I also tested `&lt;i&gt;error_functions&lt;/i&gt;` completely to make sure `&lt;i&gt;special_functions&lt;/i&gt;` are working properly.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this, I feel rubi is in a stable and working condition. The loading time is around `&lt;i&gt;10 minutes`&lt;/i&gt;. Except for the loading time, the performance of rubi is good.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have left `&lt;i&gt;DerivativeIntegration&lt;/i&gt;` and `&lt;i&gt;Piecewise&lt;/i&gt;` rules. We will be discussing it.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/07/gsoc-week9</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC 2018: SymPy - Week 9</title>
      <pubDate>Sat, 14 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/07/gsoc-week9</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The second phase of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;This week I worked on implementing Subset Convolution for &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module.
PR &lt;a href="https://github.com/sympy/sympy/pull/14878"&gt;#14878&lt;/a&gt; was opened for the same. The PR included unit tests, documentation, and correspondingly &lt;code class="highlighter-rouge"&gt;subset&lt;/code&gt; keyword was added for public &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;After discussing the implementation details and references with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;, the approach was finalized. The PR has been merged successfully. The usage for the same is:&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.discrete.convolutions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convolution_subset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'u v x y z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution_subset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plan for this phase has executed well, and the second evaluation has been successful.&lt;/p&gt;

&lt;p&gt;Looking forward to the final phase of Coding Period.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-9</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 9 - Starting up with Lambert equations</title>
      <pubDate>Fri, 13 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-9</link>
      <description>&lt;p&gt;At the start of the week I worked on the leftovers of week 8:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;added &lt;code class="highlighter-rouge"&gt;log_singularities()&lt;/code&gt; that will help in determining logarithmic singularities,&lt;/li&gt;
  &lt;li&gt;improved documentation of all helpers as suggested by Amit to maintain consistency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Status of the PR&amp;#8217;s:&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/14736"&gt;#14736&lt;/a&gt; is ready to be merged.&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/14792"&gt;#14792&lt;/a&gt; is being worked on. Major tasks has been completed, just review and refining has to be done.&lt;/p&gt;

&lt;p&gt;Apart from this I started working on the way Lambert type equations can be solved through &lt;code class="highlighter-rouge"&gt;_transolve()&lt;/code&gt;. I looked into &lt;code class="highlighter-rouge"&gt;_tsolve's&lt;/code&gt; way of handling such equations.
For solving Lambert type equations &lt;code class="highlighter-rouge"&gt;_tsolve()&lt;/code&gt; largely depends on &lt;code class="highlighter-rouge"&gt;bivariate.py&lt;/code&gt;. It takes help of the different utility functions implemented there.
Of them two important are &lt;code class="highlighter-rouge"&gt;_solve_lambert()&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;bivariate_type()&lt;/code&gt;. These two helpers help in getting the equations evaluated.&lt;/p&gt;

&lt;p&gt;Equations that can be written in the standard form as: &lt;code class="highlighter-rouge"&gt;A + B*x + C*log(D + E*x) = 0&lt;/code&gt; has the solutions in terms of &lt;code class="highlighter-rouge"&gt;Lambert&lt;/code&gt; function as:&lt;/p&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;D/E + C*B*W(t) with (B/C*E)*exp((BD - AE)/CE)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is what &lt;code class="highlighter-rouge"&gt;_solve_lambert()&lt;/code&gt; determines and accordingly returns the solutions, otherwise returns a &lt;code class="highlighter-rouge"&gt;NotImplementedError&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code class="highlighter-rouge"&gt;_solve_lambert()&lt;/code&gt; is unable to handle &lt;code class="highlighter-rouge"&gt;bivariate_type()&lt;/code&gt; is tried. This function first tries to identify the type of composite bivariate and then substitutes &lt;code class="highlighter-rouge"&gt;Dummy&lt;/code&gt; in place of them. For eq: &lt;code class="highlighter-rouge"&gt;(x + y)**2 - 3&lt;/code&gt; would become &lt;code class="highlighter-rouge"&gt;_u**2 - 3&lt;/code&gt; where &lt;code class="highlighter-rouge"&gt;_u&lt;/code&gt; is the dummy variable. The idea is that solving the latter equation for &lt;code class="highlighter-rouge"&gt;u&lt;/code&gt; and then equating the solutions to the former equation is equivalent for solving the original one.&lt;/p&gt;

&lt;p&gt;While implementing in &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; this philosophy needs to be applied. As of now I have looked into different tests on how they behave. I will start implementing it next.&lt;/p&gt;

&lt;p&gt;Next week&amp;#8217;s plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Finishing with the logsolver&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implementing lambert solver.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//polycylic-groups-part1/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Polycyclic groups - Part1</title>
      <pubDate>Wed, 11 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//polycylic-groups-part1/</link>
      <description>&lt;p&gt;GSoC'18 Week 7 &amp; 8</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-7572262454034848939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 8</title>
      <pubDate>Sun, 08 Jul 2018 15:20:15 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-8.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief summary of the progress of rubi integration module in the 8th week of GSoC period.&lt;br /&gt;&lt;br /&gt;We completed the testing of logarithmic test cases. Some of the tests are failing as they depend on trigonometric rules. The rules and tests have been updated in this &lt;a href="https://github.com/sympy/sympy/pull/14756/"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Next, I loaded all trigonometric rules. They are huge in number. So the loading time increased from &lt;i&gt;1 min 30 sec&lt;/i&gt; to around&amp;nbsp;&lt;i&gt;6 min&lt;/i&gt;. For now, I have not loaded them. I also updated the test cases for &lt;i&gt;parsetools&lt;/i&gt; and fixed code quality issues. Currently, the travis is failing due to a bug, which has been fixed in branch &lt;i&gt;1.2.&lt;/i&gt; In the upcoming week, &lt;i&gt;1.2&lt;/i&gt;&amp;nbsp;probably will get merged in master.&lt;br /&gt;&lt;br /&gt;Then I moved on to implementing &lt;i&gt;appellf1&lt;/i&gt; in sympy. Progress can be seen in this &lt;a href="https://github.com/sympy/sympy/pull/14882"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We will be updating our &lt;i&gt;utility_functions&lt;/i&gt; to the latest version of RUBI.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-8</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 8 - Improving solving of logarithmic equations</title>
      <pubDate>Sun, 08 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-8</link>
      <description>&lt;p&gt;Before the start of the week Amit and I discussed on a few points on:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt; is an identifier helper for &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; to determine whether the expression is logarithmic or not.
      and &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt; is a solving helper that returns the equation in a tractable form for &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to better handle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What should &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt; return?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While designing the method at first it returned a &lt;code class="highlighter-rouge"&gt;logcombined&lt;/code&gt; equation if found to be logarithmic, but we agreed upon having consistency among all the identifying helpers to return either &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How &lt;code class="highlighter-rouge"&gt;_is_logarithmic()&lt;/code&gt; should work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next question was how it should work. We can implement it in two ways either to make the &lt;code class="highlighter-rouge"&gt;logcombined&lt;/code&gt; equation, if the expression reduces, it is obviously a logarithmic equation otherwise not. We also need to check whether the equation reduced has the variable to be solved in its &lt;code class="highlighter-rouge"&gt;free_symbols&lt;/code&gt;
But &lt;code class="highlighter-rouge"&gt;logcombine&lt;/code&gt; possessed a problem that it unknowingly manipulates the equation, like &lt;code class="highlighter-rouge"&gt;log(x) - log(2*x)&lt;/code&gt; would reduce to &lt;code class="highlighter-rouge"&gt;log(1/2)&lt;/code&gt; for which the routine would return &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt; as there are no symbol involved. So a more better way needs to be implemented.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt; will handle removing unwanted solutions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply reducing the logarithmic equation to a tractable form for &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to handle would cause spurious solutions in the result. Therefore it becomes necessary to remove them. Take for example: &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; gives the result of &lt;code class="highlighter-rouge"&gt;log(x - 3) + log(x + 3)&lt;/code&gt; as &lt;code class="highlighter-rouge"&gt;{-sqrt(10), sqrt(10)}&lt;/code&gt;, but &lt;code class="highlighter-rouge"&gt;-sqrt(10)&lt;/code&gt; is not the solution in &lt;code class="highlighter-rouge"&gt;Real&lt;/code&gt; domain. Therefore one way to remove it was using &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt;. Amit suggested on to have a look over the singularities and try incorporating the check in &lt;code class="highlighter-rouge"&gt;_solveset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Things that I did during the week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improved &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removed the &lt;code class="highlighter-rouge"&gt;logcombine&lt;/code&gt; way of checking the equation. As of now the &lt;code class="highlighter-rouge"&gt;_is_logarithm&lt;/code&gt; checks for every term to be logarithmic in terms of the variable to be solved, if so it returns &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; otherwise &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improved the &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As per the current documentation of &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; this routine is improved to return a modified form of the equation that &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; could better handle. Checking of the spurious solutions will take place in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; itself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Way to remove spurious solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To handle this scenario I have added a &lt;a href="https://github.com/sympy/sympy/pull/14792/files#diff-eec0422923e8f100745c015cd8fdd6cfR985"&gt;check&lt;/a&gt; in &lt;code class="highlighter-rouge"&gt;_solveset&lt;/code&gt; specifically for logarithmic equations to remove spurious solutions.
The idea is based on the fact that natural log in undefined for negative and zero value, therefore this method gets each term of the expression, substitutes each solution to every term one by one and if for any term the value isn&amp;#8217;t real that solution will not be included.&lt;/p&gt;

&lt;p&gt;Why &lt;code class="highlighter-rouge"&gt;checksol()&lt;/code&gt; is not the appropriate way?&lt;/p&gt;

&lt;p&gt;At first I thought of using the &lt;code class="highlighter-rouge"&gt;checksol()&lt;/code&gt;, but it possessed a problem. &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt; unintensionally allows wrong solution to creep in. Take for example &lt;code class="highlighter-rouge"&gt;log(3*x) - log(-x + 1) - log(4*x + 1)&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; would give &lt;code class="highlighter-rouge"&gt;-1/2 and 1/2&lt;/code&gt; as the solutions but the former isn&amp;#8217;t a solution in real domain. Using &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt; would not remove this as &lt;code class="highlighter-rouge"&gt;I*pi&lt;/code&gt; gets cancelled out during evaluating the expression therefore it returns &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt;, which is not correct.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Addressing comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this few changes have been done in the &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; &lt;a href="https://github.com/sympy/sympy/pull/14736"&gt;PR&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I have added a method that would return all the terms present in the expression: &lt;a href="https://github.com/sympy/sympy/pull/14736/files#diff-eec0422923e8f100745c015cd8fdd6cfR988"&gt;make_expr_args()&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Made the expresssion remain unevaluated when doing &lt;a href="https://github.com/sympy/sympy/pull/14736/files#diff-eec0422923e8f100745c015cd8fdd6cfR1299"&gt;lhs - rhs&lt;/a&gt; within &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read this &lt;a href="http://localhost:4000/gsoc-week-5"&gt;blog&lt;/a&gt; for better understanding of logarithmic solving.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=65</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 7: Using continuum_mechanics with units</title>
      <pubDate>Sat, 07 Jul 2018 07:59:05 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/07/07/week-7-30-june-06-july/</link>
      <description>&lt;p&gt;This week I mainly focused on finding and solving a bug due to which continuum_mechanics gave&amp;#160;&lt;em&gt;ValueError&lt;/em&gt; on using units with the quantities passed. Initially, I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14856"&gt;#14856&lt;/a&gt;, which included a workaround in the Beam class itself to handle that error. But&amp;#160;&lt;a href="https://github.com/parsoyaarihant"&gt;Arihant&lt;/a&gt;&amp;#160;suggested opening a separate PR as the error was occurring due to a bug in the separate module.&lt;/p&gt;
&lt;p&gt;So,&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;was created. &lt;em&gt;is_commutative&amp;#160;&lt;/em&gt;attribute was added in the&amp;#160;&lt;em&gt;Prefix&lt;/em&gt; class&amp;#160; (setting &lt;em&gt;Prefix&lt;/em&gt;.&lt;em&gt;is_commutative &lt;/em&gt;to&lt;em&gt; True&amp;#160;&lt;/em&gt;removed&amp;#160;&lt;em&gt;PolynomialError&lt;/em&gt;). While doing changes in the PR, another bug appeared:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units import meter, newton, kilo
&amp;gt;&amp;gt;&amp;gt; from sympy.physics.units.util import quantity_simplify
&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; quantity_simplify(x*(8*newton + y))
x*(8*newton + y, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This bug was solved with few changes. After&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;gets merged, continuum_mechanics should work with quantities involving units.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14865"&gt;#14865&lt;/a&gt;&amp;#160;gets merged.&lt;/li&gt;
&lt;li&gt;Open a Pull Request and start working on 3dbeam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/07/gsoc-week8</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC 2018: SymPy - Week 8</title>
      <pubDate>Fri, 06 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/07/gsoc-week8</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.com/files/gsoc-sympy.png" style="width: 75%; height: 75%; float: left; margin-left: 55px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;This week I started working on adding M&amp;#246;bius Transform to the &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module using Yate&amp;#8217;s DP (Dynamic Programming) method for implementation as part of PR &lt;a href="https://github.com/sympy/sympy/pull/14853"&gt;#14853&lt;/a&gt;. The proposed transforms are part of &lt;code class="highlighter-rouge"&gt;sympy.discrete.transforms&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;After discussing with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;, the methods implementing this transform were added with appropriate names. The keyword &lt;code class="highlighter-rouge"&gt;subset&lt;/code&gt; is used as a boolean to choose whether enumeration is done over subsets or supersets. The usage for the transform is:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'w x y z'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The PR was merged successfully, after inclusion of docstring and unit tests for the transform.&lt;/p&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=7</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Thu, 05 Jul 2018 20:36:54 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/05/autolev-parser-status-update/</link>
      <description>&lt;p&gt;I have a PR for a working parser now with some test cases. The Travis errors I had previously have been fixed.&lt;/p&gt;
&lt;p&gt;I am currently going through the chapters of the book &lt;em&gt;Dynamics Online: Theory and Implementation with Autolev&amp;#160;&lt;/em&gt;and parsing most of the Autolev codes I come across. I feel this would help to make the parser more complete. After getting the desired parsed code I am also running the code and checking that the results are same/similar to the Autolev responses in the .ALL files.&lt;/p&gt;
&lt;p&gt;I have parsed the codes of Chapter 1 and 2 of the book and am currently working on Chapter 3. There are 6 Chapters overall and the bulk of the stuff is concentrated in Chapters 4 and 5.&lt;/p&gt;
&lt;p&gt;After parsing the codes of this book, I shall update the parser code and the tests in the PR. I will add more test cases as well. I will also send in a file containing all the parsed codes of&amp;#160;&lt;em&gt;Dynamics Online&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A lot of the codes are parsing completely fine. A few I feel are quite difficult to parse to SymPy code using a parser and they wouldn&amp;#8217;t even be in the spirit of SymPy/Python if parsed exactly. I have marked these for later. A few of them are producing slightly altered expressions or in some cases errors in SymPy. I am classifying all the codes appropriately based on criteria like this.&lt;/p&gt;
&lt;p&gt;After parsing the book I plan on finishing up the leftover parts of the &lt;a href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; examples and making sure the Bicycle Model Autolev code is parsed.&lt;/p&gt;
&lt;p&gt;I will then go on to do a complete code cleanup (general cleanup, using standard conventions and better variable names, adding more comments etc).&lt;/p&gt;
&lt;p&gt;Finally, I will wrap things up by writing the Documentation and a Final Report. In these I shall discuss: what the parser can do, how it should be used (there are some minor things in some cases that the user should note to get a proper SymPy parse), limitations and future improvements.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-9120952001144543939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 7</title>
      <pubDate>Sun, 01 Jul 2018 15:19:06 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-7.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the seventh week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we found a solution for matching `exp` as `Pow`. This week major part was spent in testing exponential rules. Here are some problem faced.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;1. UnevaluatedExpr is quite untested and results in recursion errors in many places.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;like `u = UnevaluatedExpr(E)` now when we want to find imaginary and real part of `u`, using `im(u)`. It causes recursion error. There were other instances too. So in those functions, I replaced them back to `exp`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;2. There was a lot of index error because length of args of a `Pow` object is 2. Whereas for `exp` it's 1. Utility functions used in lot of places `.args[1]`. I found all possible places where arguments of a `Pow` object was accessed using `.args[0] and .args[1]` . I replaced them with `.base` and `.exp`.&amp;nbsp;This solved the problem&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;There were more minor changes in many utility functions. Currently, I have finished the exponential testing and almost all are passing. I have pushed all changes in this &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: Arial, Helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have tested a small part of logarithmic tests. I will try to finish them in 2 days and next move on to either special functions on trigonometric rules.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
