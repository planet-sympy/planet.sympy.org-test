<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-9120952001144543939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 7</title>
      <pubDate>Sun, 01 Jul 2018 15:19:06 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-7.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the seventh week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we found a solution for matching `exp` as `Pow`. This week major part was spent in testing exponential rules. Here are some problem faced.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;1. UnevaluatedExpr is quite untested and results in recursion errors in many places.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;like `u = UnevaluatedExpr(E)` now when we want to find imaginary and real part of `u`, using `im(u)`. It causes recursion error. There were other instances too. So in those functions, I replaced them back to `exp`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;2. There was a lot of index error because length of args of a `Pow` object is 2. Whereas for `exp` it's 1. Utility functions used in lot of places `.args[1]`. I found all possible places where arguments of a `Pow` object was accessed using `.args[0] and .args[1]` . I replaced them with `.base` and `.exp`.&amp;nbsp;This solved the problem&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;There were more minor changes in many utility functions. Currently, I have finished the exponential testing and almost all are passing. I have pushed all changes in this &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: Arial, Helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have tested a small part of logarithmic tests. I will try to finish them in 2 days and next move on to either special functions on trigonometric rules.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=63</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 6 (23 June &#x2013; 29 June)</title>
      <pubDate>Fri, 29 Jun 2018 06:32:05 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/29/week-6-23-june-29-june/</link>
      <description>&lt;p&gt;Last week I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;to solve statically indeterminate beam systems using boundary conditions (bc_slope and bc_deflection). This week I mainly focussed on implementing a logic to find the maximum bending moment and maximum shear force in a beam.&lt;/p&gt;
&lt;p&gt;Initially, I thought it would be as simple as differentiating the bending_moment and shear force and then solving those using solve. But solve couldn&amp;#8217;t represent Interval solutions and hence gave a NonImplemented error, as both of these quantities can occur in Intervals.&lt;/p&gt;
&lt;p&gt;So instead of using solve over whole spam length, I found out points of discontinuity in the respective equations using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for term in terms:
    if isinstance(term, Mul):
         term = term.args[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where terms are all the Muls extracted from Add. and&amp;#160;&lt;code&gt;term.args[-1]&lt;/code&gt;&amp;#160;gives us the point of singularity.&lt;/p&gt;
&lt;p&gt;Now between two singularity points, our function can be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A continuous and differentiable function (hence no Interval solution)&lt;/li&gt;
&lt;li&gt;or a constant value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for the first scenario, you just use solve over that interval and see values at the endpoint. The higher one of both gives you maxima in that interval. For the second, the constant value is indeed maximum by itself. Then compare maxims of all intervals and return location and its value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; l, P = symbols('l, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; b = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; R1, R2 = symbols('R1, R2')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 0, 0, end=l)
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(R1, R2)
&amp;gt;&amp;gt;&amp;gt; b.max_bmoment()
(l/2, P*l**2/8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beam class gives ValueError if passed value contains unit. So I would focus on fixing it.&lt;/li&gt;
&lt;li&gt;Read relevant theory for implementation of 3dBeam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week6and7</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 6 &amp; 7</title>
      <pubDate>Thu, 28 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week6and7.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The second phase of Coding Period has started.&lt;/p&gt;

&lt;p&gt;I started this phase working on &lt;code class="highlighter-rouge"&gt;sympy.discrete.recurrence&lt;/code&gt; module. After having an initial discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; regarding the functionality to be implemented, I did the proof-of-concept for the same on a remote branch.&lt;/p&gt;

&lt;p&gt;After the approach was finalized, the implementation was polished before opening the PR. The PR &lt;a href="https://github.com/sympy/sympy/pull/14816"&gt;#14816&lt;/a&gt; also included documentation, doctests, and unit tests for the module.&lt;/p&gt;

&lt;p&gt;The method &lt;code class="highlighter-rouge"&gt;linrec(coeffs, init, n)&lt;/code&gt; takes coefficients, initial values and point of evaluation for the linear recurrence. Usage for a recurrence like &lt;code class="highlighter-rouge"&gt;f(n) = f(n - 7) + f(n - 13) + f(n - 17)&lt;/code&gt; (having order &lt;code class="highlighter-rouge"&gt;17&lt;/code&gt;) would be:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;linrec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As suggested by &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt;, it will be good to have a user-facing method that calls &lt;code class="highlighter-rouge"&gt;linrec&lt;/code&gt; internally for performing the computation.&lt;/p&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6731843843505254405</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 6</title>
      <pubDate>Sun, 24 Jun 2018 15:53:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-6.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here is the brief work done for rubi in the 6th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;Last week almost 70 % of the miscellaneous algebra was tested. In the start of the week, the miscellaneous algebra testing was completed. The miscellaneous algebra test cases have been pushed in this &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;After this, I moved on to load exponential rules and test them. While loading the exponential rules, there were some parsing issues. Those were fixed. On start of the testing, it was found that some integrals depend upon the logarithmic and special_function rules. Those too needed to be loaded. There were some undefined or wrongly defined utility_functions like `CancelCommonFactors`, `Gamma (gammainc)`, `PolyGamma`, `ProductLog` and few more small functions. These didn't take much time. I fixed all these.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Soon I realised a major issue of `exp` and `Pow`. Sympy doesn't identify exp as Pow. The rubi rules are defined in such a way that exp needs to be realised as Pow. I tried to process an expression to replace exp with Pow. These are the major methods I tried :&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(E, z, evaluate=False) . This does not&amp;nbsp;work well, an expression containing Mul is evaluated to exp. I tried to fix it. I found that `flatten` of Mul causes the evaluation. I found the code messy. These can be solved but requires more time.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(Dummy('E', z, evaluate=False) .This was suggested by Aaron. The matching part has no issues in this. But functions which use&amp;nbsp;the property of `E` does not work properly. Like `Log(E)` should evaluate to 1.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(UnevaluatedExpr(E), z) . In this the matching was as expected. I modified `Log` as `return log(z).doit()` . But then also there were some issues. I made a new subclass `rubi_unevaluated_expr`. To solve the commutative issue, I defined a property in this new subclass.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I think the last one is the best solution for now. Another issue was some rules which caused recursion errors like one in the image&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;a href="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s1600/blogrubi.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span&gt;&lt;img border="0" height="56" src="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s640/blogrubi.png" width="640" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;To solve it I checked that if last 5 rules applied are same then return a Function `Integrate` and replace it at last while returning. This works fine.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;In this week, I was unable to do much testing. But I am sure the upcoming week will be better in this respect. I have tested a small part of exponential rules. In the upcoming week, I will try to finish exponential rules within 2-3 days and soon move to logarithmic rules.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=61</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 5 (16 June &#x2013; 22 June)</title>
      <pubDate>Sat, 23 Jun 2018 11:54:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/23/week-5-16-june-22-june/</link>
      <description>&lt;p&gt;This week I worked on solving&amp;#160;statically indeterminate beam systems and created &lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;for that. Some work was already done in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;, which me and Jason reviewed during community bonding period.&lt;/p&gt;
&lt;p&gt;Now Beam class uses boundary conditions (bc_deflection and bc_slope) to solve for unknown reactions, hence making statically indeterminate systems solvable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; F = Symbol('F')
&amp;gt;&amp;gt;&amp;gt; l = Symbol('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; b5 = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; b5.bc_deflection = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; b5.bc_slope = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; R1, R2, M1, M2 = symbols('R1, R2, M1, M2')
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M2, l, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(-F, l/2, -1)
&amp;gt;&amp;gt;&amp;gt; b5.solve_for_reaction_loads(R1, R2, M1, M2)
&amp;gt;&amp;gt;&amp;gt; b5.reaction_loads
{R1: F/2, R2: F/2, M1: -F*l/8, M2: F*l/8}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add max_bmoment and mx_shear_force methods to&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5483137592484274057</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 5</title>
      <pubDate>Sun, 17 Jun 2018 17:12:20 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-5.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the 5th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started this week with testing miscellaneous algebraic test cases. Soon it was found that most test cases depend on rules of `Miscellaneous integration`. So I loaded those rules. There were few new structure in constraints. So parser too was updated for incorporating those.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;While testing, `ExpandIntegrand` did not function well. Matcher used in ExpandIntegrand was of sympy. I changed ExpandIntegrand using replace_all of matchpy. In few more functions I changed the structure using matchpy. In this week, a major part of the time was spent in utility functions. There are many changes. Also some of the test cases of last year was wrong. It gave different result in mathematica. The test cases which I have updated matches with Mathematica's output. I have pushed all changes of utility function in this &lt;a href="https://github.com/sympy/sympy/pull/14756/files"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Parallely I have also tested around 70 % of miscellaneous algebraic. I will complete the testing within one or two days. After this I will move on to exponential rules and exponential test cases.&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=56</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 4 (9 June &#x2013; 15 June)</title>
      <pubDate>Fri, 15 Jun 2018 11:00:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/15/week-4-9-june-15-june/</link>
      <description>&lt;p&gt;This week I worked on adding support for beams connected via hinge in &lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;. Support for axially fixed beams and its API was implemented last week.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_solve_hinge_beams&lt;/code&gt;&amp;#160;was added as a helper function to solve such Beams.&amp;#160;&lt;span class="pl-s"&gt;This method resolves the composite Beam into its sub-beams and then&amp;#160;equations of shear force, bending moment, slope and deflection are&amp;#160;evaluated for both of them separately. These equations are then solved&amp;#160;for unknown reactions and integration constants using the boundary&amp;#160;conditions applied on the Beam. Equal deflection of both sub-beams&amp;#160;at the hinge joint gives us another equation to solve the system.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So the final API looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hinge_hinge_blog" class=" size-full wp-image-57 aligncenter" src="https://singhjashan.files.wordpress.com/2018/06/hinge_hinge_blog.png?w=730" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l = symbols('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; R1, M1, R2, R3, P = symbols('R1 M1 R2 R3 P')
&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2,"hinge")
&amp;gt;&amp;gt;&amp;gt; b.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R3, 4*l, -1
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 3*l, -1)
&amp;gt;&amp;gt;&amp;gt; b.bc_slope = [(0, 0)]
&amp;gt;&amp;gt;&amp;gt; b.bc_deflection = [(0, 0), (l, 0), (4*l, 0)]
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(M1, R1, R2, R3)
&amp;gt;&amp;gt;&amp;gt; b.reaction_loads
{R3: -P/2, R2: -5*P/4, M1: -P*l/4, R1: 3*P/4}
&amp;gt;&amp;gt;&amp;gt; b.slope().subs(x, 3*l)
-7*P*l**2/(48*E*I)
&amp;gt;&amp;gt;&amp;gt; b.deflection().subs(x, 2*l)
7*P*l**3/(24*E*I)&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See for changes in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;to get it merged.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week5</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 5</title>
      <pubDate>Fri, 15 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week5.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The first phase of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;This week, I started working on the convolution for &lt;img src="http://latex.codecogs.com/svg.latex?\dpi{300}&amp;space;\large&amp;space;2^n" title="\large 2^n" /&gt;&lt;code class="highlighter-rouge"&gt;-group&lt;/code&gt; using &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt; - Dyadic (XOR) Convolution. The PR &lt;a href="https://github.com/sympy/sympy/pull/14783"&gt;#14783&lt;/a&gt; dealt with this addition to the module.&lt;/p&gt;

&lt;p&gt;I had a useful discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; for clearing the API and naming convention. &lt;br /&gt;
The &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method uses &lt;code class="highlighter-rouge"&gt;dyadic=True&lt;/code&gt; as the hint which uses &lt;code class="highlighter-rouge"&gt;convolution_fwht&lt;/code&gt; for the implementation. Appropriate documentation, doctests and unit tests are also included.&lt;/p&gt;

&lt;p&gt;Successive reviews helped in refining the PR, before the final merge later in the week.&lt;/p&gt;

&lt;p&gt;The usage for the same is:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.discrete.convolution&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convolution_fwht&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'u v x y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dyadic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution_fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plan for this phase has executed according to the timeline, and the first evaluation has been successful.&lt;/p&gt;

&lt;p&gt;Looking forward to the next phase of Coding Period.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2004986996788736575</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 4</title>
      <pubDate>Sun, 10 Jun 2018 16:47:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-4.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief work done in the 4th week.&lt;br /&gt;&lt;br /&gt;In this week I have completed the testing of &lt;i&gt;trinomial products. &lt;/i&gt;There are around 2700 test cases. I have tested them all in sympy. I have updated the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&amp;nbsp;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Currently, a few tests are failing because of 2 major issues :&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Apart - Some features are unimplemented in apart of sympy. So expressions are not simplified.&lt;/li&gt;&lt;li&gt;appellf1 - There is a missing implementation of appellf1 in sympy.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;If the above two issues are solved, almost all tests will pass.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Utility functions have been improved a lot this week. The &lt;i&gt;is_polynomial &lt;/i&gt;of sympy&amp;nbsp;has certain issues and so the constraints were affected. I have re-written PolynomialQ. It&amp;nbsp;is not full proof, but it handles most of the cases. There are many small changes in utility functions. They can be seen in the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am lagging behind my proposed timeline. But the work in rubi is time-consuming. When a test fails, finding the same rule in Mathematica, finding whether all constraints return the same result in Mathematica and sympy and finding whether utility functions are working in a different way takes time. I apologise for the same. I will try to speed up my work as much as possible.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this week, I will be testing Miscellaneous algebra and Exponential tests.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=53</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 3 (2 June &#x2013; 8 June)</title>
      <pubDate>Sat, 09 Jun 2018 23:40:11 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/09/week-3-2-june-8-june/</link>
      <description>&lt;p&gt;This week me, Arihant and Jason discussed the API for creating composite Beam objects. Initially, we used &lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;&amp;#160;to represent our changing second_moment but then we agreed upon&amp;#160;&lt;code&gt;.join&lt;/code&gt; method to represent such beams. So the final API was like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2, E, 1.5*I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.length
&lt;span class="pl-c1"&gt;4&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; b.second_moment
Piecewise((&lt;span class="pl-c1"&gt;1.5&lt;/span&gt;&lt;span class="pl-k"&gt;*&lt;/span&gt;I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;), (I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#160;&lt;code&gt;b1.join(b2, "fixed")&lt;/code&gt;&amp;#160;joins b2 at the right end of b1 via a fixed connection.All this was implemented in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;&amp;#160;and hopefully it would be merged in coming few days.&lt;/p&gt;
&lt;p&gt;I also created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;at the end of this week implementing&amp;#160;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;max_deflection&lt;/code&gt;&amp;#160;methods.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;is an easier way to apply support structures on our Beam object rather than adding all the reaction loads and moments and constraints on it by yourself. Its API is not finalised yet but for now it is something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;b.apply_support(position, type='hinge')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;position&lt;/code&gt;&amp;#160;represents the position at which support was applied&lt;/p&gt;
&lt;p&gt;and type is type of support structure. It can be either&amp;#160;&lt;code&gt;hinge&lt;/code&gt;, &lt;code&gt;roller&lt;/code&gt;&amp;#160;or &lt;code&gt;cantilever&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add support for composite beams connected via hinge.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week4</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 4</title>
      <pubDate>Sat, 09 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week4.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;Another week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;Starting this week, I worked on PR &lt;a href="https://github.com/sympy/sympy/pull/14765"&gt;#14765&lt;/a&gt; for implementing Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As pointed out by &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;, symbolic coefficients could be supported by this transform as the general Kronecker matrix only contains &lt;code class="highlighter-rouge"&gt;+/-1&lt;/code&gt;, which means it essentialy requires only addition or subtraction to perform the transformation. Also, the PR review helped fix a minor issue related to string concatenation.&lt;/p&gt;

&lt;p&gt;Usage for &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a b c d'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Documentation, doctests, and unit tests are also added for this transform.&lt;/p&gt;

&lt;p&gt;Looking forward to next week, where I will be implementing XOR convolution using &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6327049288703125321</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 3</title>
      <pubDate>Sun, 03 Jun 2018 12:02:48 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-3.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the update of my work in the third week of GSoC.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Unlike last week, this week clarified some of the real problems of our implementation of rubi.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I began to freshly test trinomial products after getting the older test-suite.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Initially, I came across the problem of &lt;i&gt;Coeff &lt;/i&gt;and &lt;i&gt;Sum&lt;/i&gt;. I solved this by redefining &lt;i&gt;Coeff&lt;/i&gt; and introducing a function &lt;i&gt;Sum_doit&lt;/i&gt;. After this, I realised &lt;i&gt;With&lt;/i&gt; statement was not being parsed correctly for many cases. Parsetools was improved to take care of the &lt;i&gt;with&lt;/i&gt; statements.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;After this, I encountered with some utility functions where the output was not as expected. This is the major cause of the failing tests. Constraints too are affected by this. I tried to find and solve as much as possible. I have to trace all functions in cases of failing tests and compare the output with Mathematica. I improved few utility functions and updated in the &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: arial, helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;. Also, there were some exceptions in &lt;/span&gt;Matchpy&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, where constraints were being checked taking x as a numerical value. It resulted in TypeErrors. So I updated the constraints in such a way that it avoids such exceptions.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this and some small changes, I almost have tested half of the trinomial products in the test-suite. Some issues are not solved yet, like :&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Sorting of variables.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Not implemented error in apart of sympy.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;And few rules, which are not well defined.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;Here is the brief work of this week:&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Solved the issue of Sum and Coeff.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved parsetools for with statements.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;little modification to constraints definition.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved utility functions&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;minor changes in parsetools.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;I was supposed to completely test trinomial products within this week. I tried hard, but the debugging part is time taking. Finding the real issue for failing &lt;/span&gt;test&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, takes time. Also, it needs to be compared with Mathematica. But the good thing is that, after finding the issue and fixing it, tests are&amp;nbsp;passing. So after this week, I can say that if we are good with our utility functions, we will be able to test more than 90% of the original &lt;/span&gt;rubi&lt;span style="font-family: arial, helvetica, sans-serif;"&gt; test suite.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the upcoming week, I will do more testing and complete trinomial products.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week3</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 3</title>
      <pubDate>Sun, 03 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week3.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The third week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;I started the week by finalizing the PR &lt;a href="https://github.com/sympy/sympy/pull/14745"&gt;#14745&lt;/a&gt;. The PR has been merged successfully. The master branch of &lt;code class="highlighter-rouge"&gt;sympy&lt;/code&gt; now contains &lt;code class="highlighter-rouge"&gt;sympy.discrete.transforms&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sympy.discrete.convolution&lt;/code&gt;. I have tested corner cases as well. Documentation and Doctests are complete for the transforms and types of convolution that are currently part of master.&lt;/p&gt;

&lt;p&gt;Late this week, I pushed commits to &lt;a href="https://github.com/sympy/sympy/pull/14712"&gt;PR #14712&lt;/a&gt; with the aim of fixing failing tests in &lt;code class="highlighter-rouge"&gt;test_util.py&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;test_inequalities.py&lt;/code&gt; due to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. The remaining tests are failing as &lt;code class="highlighter-rouge"&gt;solvers&lt;/code&gt; can not currently solve the transcendental equations when rewritten in exponential form.&lt;/p&gt;

&lt;p&gt;Looking forward to next week, where I will be working on the Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=45</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 2 (25 May &#x2013; 1 June)</title>
      <pubDate>Fri, 01 Jun 2018 18:53:34 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/01/week-3-25-may-1-june/</link>
      <description>&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Exams kept me occupied for previous 11 days so I wasn&amp;#8217;t able to contribute much. Coming to this week&amp;#8217;s work, I created two pull request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; :This PR implemented&amp;#160;&lt;code&gt;remove_load&lt;/code&gt;&amp;#160;method to remove previously applied loads on the beam object.&amp;#160;This method is&amp;#160; little different from adding a negative load to make net equal to zero and would work only if that particular load exists on beam.&lt;/li&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; : This PR implemented&amp;#160;&lt;code&gt;point_cflexure&lt;/code&gt;&amp;#160;method to find &lt;a href="https://en.wikipedia.org/wiki/Contraflexure"&gt;point of contraflexure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; also included&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;method which keeps a track of all load applied on beam.&lt;/p&gt;
&lt;p&gt;It is different from&amp;#160;&lt;code&gt;b.load&lt;/code&gt;&amp;#160;as it treat each load as a separate entity.&amp;#160;&lt;code&gt;load&lt;/code&gt;&amp;#160;property would sum up all the loads at a particular point but&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;will still show them as separate loads. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b.apply_load(4, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(2, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.load
6*SingularityFunction(x, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.applied_loads
[(4, 2, -1, None), (2, 2, -1, None)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difficulty with &lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; occured in finding solution of&amp;#160;&lt;code&gt;moment_curve&lt;/code&gt;&amp;#160;.&amp;#160; Actually moment is zero outside the spam length too, which made&amp;#160;&lt;code&gt;solve&lt;/code&gt;&amp;#160;to return a solution in form of&amp;#160;&lt;code&gt;Interval&lt;/code&gt;&amp;#160;which is not a compatible return type for&amp;#160;&lt;code&gt;solve&lt;/code&gt;.&amp;#160;&lt;code&gt;solveset&lt;/code&gt;&amp;#160;was of no help too as it can&amp;#8217;t be used with multivariate expressions. The problem, however, was solved by wrapping&amp;#160;&lt;code&gt;bending_moment&lt;/code&gt;&amp;#160; with a&amp;#160;&lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;function with its value equal to&amp;#160;&lt;code&gt;float("nan")&lt;/code&gt;&amp;#160;outside the spam length.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make&amp;#160;&lt;code&gt;beam.py&lt;/code&gt;&amp;#160;compatible to solve non-prismatic beams.&lt;/li&gt;
&lt;li&gt;Try to find a way around for the issue occurring in PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for non-horizontal beams.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/blogs/os_day2</guid>
      <author>Gaurav Dhingra (gxyd)</author>
      <title>Gaurav Dhingra (gxyd): Operating Systems - Day 2</title>
      <pubDate>Wed, 30 May 2018 00:00:00 GMT</pubDate>
      <link>https://gxyd.github.io/blogs/os_day2/</link>
      <description>&lt;p&gt;Patch policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Patch should have a &lt;i&gt;&lt;b&gt;Subject&lt;/b&gt;: [PATCH] Docs: Add info on supported kernels to REPORTING-BUGS.&lt;/i&gt;. Here clearly &lt;i&gt;Docs&lt;/i&gt; indicate that it that the patch makes changes to the documentation section.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;i&gt;Why&amp;#8217;s&lt;/i&gt; are more important than &lt;i&gt;What&lt;/i&gt; in body of patch (aka commit message?).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seems like a lot of drivers subfolder have a separate file &amp;#8220;TODO&amp;#8221; listing the work that needs to be done. For example, currently there is a file drivers/dma/TODO which lists a few tasks that needs to be done, here is the list of task mentioned in that file:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move remaining drivers to use new slave interface&lt;/li&gt;
      &lt;li&gt;Remove old slave pointer machansim&lt;/li&gt;
      &lt;li&gt;Check other subsystems for dma drivers and merge/move to dmaengine&lt;/li&gt;
      &lt;li&gt;Remove &lt;code class="highlighter-rouge"&gt;dma_slave_config&lt;/code&gt;&amp;#8217;s dma direction.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id="include-guard"&gt;Include guard&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Include_guard"&gt;Include guard&lt;/a&gt; is one of the topics I went through since seeing header file, it seems to be appearing at the top. Since I am also using CodeBlocks for coding in C these days, Codeblocks provides with automatic inclusion of &lt;i&gt;include guard&lt;/i&gt;(aka &lt;i&gt;macro guard&lt;/i&gt;) when we start a new header file.&lt;/p&gt;

&lt;p&gt;In a C/C++ program if a function/struct/&amp;#8230; is defined more than once, then it raises an error (&lt;b&gt;one definition rule&lt;/b&gt;). To avoid this problem include guards are used.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;#ifndef FILE_NAME_H
#define FILE_NAME_H


/* code goes here */


#endif /* end of include guard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for complete understandstanding, see &lt;a href="https://en.wikipedia.org/wiki/Include_guard#Use_of_#include_guards"&gt;this example&lt;/a&gt;. Though I still need to figure out why on this line &lt;a href="https://elixir.bootlin.com/linux/latest/source/drivers/staging/board/board.h#L2"&gt;drivers/staging/board/board.h#line2&lt;/a&gt; we have use of &lt;code class="highlighter-rouge"&gt;__&lt;/code&gt; around the file name.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="static-keyword-in-c"&gt;static keyword in C&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;This &lt;a href="https://stackoverflow.com/a/572550/3396379"&gt;stackoverflow answer suffices&lt;/a&gt;, actually &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; is used quite a lot in kernel code, which made me to have a look at its meaning.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="difference-between-header-and-source-file-in-c-also-in-c"&gt;difference between header and source file in C (also in C++)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;This &lt;a href="https://gxyd.github.io/answer on stackoverflow"&gt;https://stackoverflow.com/questions/3482948/any-fundamental-difference-between-source-and-header-files-in-c&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id="typedef-in-c"&gt;typedef in C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; is a reserved keyword in C. It creates an alias name for another datatype. Example (from wikipedia):&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;typedef int length;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#8217;s see an example from linux kernel source code:&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;typedef unsigned char  uch;
typedef unsigned short  ush;
typedef unsigned long  ulg;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this, it is very clear what purpose does &lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; does have. But, I beilieve I saw someuse of &lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; related to &lt;code class="highlighter-rouge"&gt;struct&lt;/code&gt; in linux kernel code but I don&amp;#8217;t remember where, but will write about it when I come across it.&lt;/p&gt;

&lt;p&gt;USEFUL INFO: I found this website which hosts the kernel source online &lt;a href="https://elixir.bootlin.com/linux/latest/source"&gt;https://elixir.bootlin.com/linux/latest/source&lt;/a&gt;, I found it to be pretty handy to use. It&amp;#8217;s better than github&amp;#8217;s online source code viewer I&amp;#8217;d say.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="code-analysing-section"&gt;code analysing section&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;#8217;s see this codeblock taken from []&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;struct ashmem_area {
    char name[ASHMEM_FULL_NAME_LEN];
    struct list_head_unpinned_list;
    struct file *file;
    size_t size;
    unsigned long prot_mask;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id="hexadecimal-representation-of-address"&gt;Hexadecimal representation of address&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often used is the hexadecimal representation for address (saw that in lecture by Prof. Jakob Eriksson). For ex, convert 10,995 into hexadecimal value would be 2AF3. The prefix &lt;code class="highlighter-rouge"&gt;0x&lt;/code&gt; is used in C (and probably also in assembly) to denote this in hexadecimal system, which would denote this value by &lt;code class="highlighter-rouge"&gt;0x2AF3&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/05/gsoc-week2</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 2</title>
      <pubDate>Tue, 29 May 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/05/gsoc-week2.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The second week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;I started the week by finalizing the PR &lt;a href="https://github.com/sympy/sympy/pull/14725"&gt;#14725&lt;/a&gt;. The PR has been merged successfully. Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;) will be added along with XOR Convolution at a later point of time.&lt;/p&gt;

&lt;p&gt;Late this week, I started working on the convolution module &lt;a href="https://github.com/sympy/sympy/pull/14745"&gt;PR #14745&lt;/a&gt; with the aim of adding the following along with appropriate tests.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Convolution using Fast Fourier Transform (&lt;code class="highlighter-rouge"&gt;convolution_fft&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Convolution using Number Theoretic Transform (&lt;code class="highlighter-rouge"&gt;convolution_ntt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;General Convolution method (&lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; suggested using &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; as the name for the methods instead of &lt;code class="highlighter-rouge"&gt;conv&lt;/code&gt;.
I had a detailed discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; regarding the API of the methods, the need to tie convolution with DFT (Discrete Fourier Transform), and handling the cyclic convolution case.&lt;/p&gt;

&lt;p&gt;Successive reviews helped in the following changes to PR:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;including &lt;code class="highlighter-rouge"&gt;cycle&lt;/code&gt; for general &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;usage of &lt;code class="highlighter-rouge"&gt;**hints&lt;/code&gt; argument in &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; for flexibility of the API&lt;/li&gt;
  &lt;li&gt;handling empty list &lt;code class="highlighter-rouge"&gt;[]&lt;/code&gt; cases&lt;/li&gt;
  &lt;li&gt;defaulting &lt;code class="highlighter-rouge"&gt;cycle=0&lt;/code&gt; as normal convolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2627530986362511513</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 2</title>
      <pubDate>Sat, 26 May 2018 20:39:44 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/05/gsoc-2018-week-2.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the brief work done and progress in my project (Rubi) in the second week.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;This week was quite frustrating for me. I gave a lot of time but the outcome was little less. Initially my aim was to solve the problem of the order in which rule was matched. But I have to revert back to my initial structure as the new structure was extremely time consuming. Next I thought to keep track of the rules applied to an expression. This could be a great help in debugging too. So I implemented it.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Next I moved on to testing &lt;i&gt;trinomial_products . &lt;/i&gt;But here also results were not good. Our rules are of older version (4.10.8) , but we did not have the test-suite of that version. So I tried extremely hard to test those tests with rubi 4.10.8 . For 3 - 4 days , I put a great effort. At last I realised, things will not work this way. So, I then mailed to Albert, the maintainer of original Rubi, asking him for the test-suite of older version. And the good part is that he has provided me the test-suite today. So now I will move to test our rubi with this test-suite.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;In between all this, I found some errors in utility function . I corrected them and updated the &lt;a href="https://github.com/sympy/sympy/pull/14724"&gt;PR&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here are the works done by me this week :&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Made necessary changes in the &lt;i&gt;parsetools&lt;/i&gt; and &lt;i&gt;rubi , &lt;/i&gt;so that it keeps track of the rules applied to an expression.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;&lt;i&gt;test_1_2 &lt;/i&gt;of algebraic rules completely passes without any failure. (Removed all &lt;i&gt;@XFAIL &lt;/i&gt;from &lt;i&gt;test_1_2 &lt;/i&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Corrected &lt;i&gt;AppellF1, NegQ, PositiveQ, BinomialMatchQ, TrinomialMatchQ &lt;/i&gt;in the utility functions.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;For the upcoming week I plan to make test suits of &lt;i&gt;trinomial&lt;/i&gt; and &lt;i&gt;miscellaneous algebra &lt;/i&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/05/gsoc-week1</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 1</title>
      <pubDate>Wed, 23 May 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/05/gsoc-week1.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The first week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;I started the week working on the PR &lt;a href="https://github.com/sympy/sympy/pull/14712"&gt;#14712&lt;/a&gt; to fix existing issues &lt;a href="https://github.com/sympy/sympy/issues/14262"&gt;#14262&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/issues/12744"&gt;#12744&lt;/a&gt;. There were some complications caused by the PR as it was affecting the &lt;code class="highlighter-rouge"&gt;solvers&lt;/code&gt; module. The failing tests on travis revealed some bugs and issues in &lt;code class="highlighter-rouge"&gt;solvers&lt;/code&gt;. The bugs are fixed, though minor issues still persist.&lt;/p&gt;

&lt;p&gt;Late this week, I started working on the first &lt;a href="https://github.com/sympy/sympy/pull/14725"&gt;PR #14725&lt;/a&gt; as part of my project with the aim of adding the following along with appropriate tests.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Discrete Module&lt;/li&gt;
  &lt;li&gt;Transforms Module&lt;/li&gt;
  &lt;li&gt;Fast Fourier Transform (&lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Number Theoretic Transform (&lt;code class="highlighter-rouge"&gt;ntt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; raised an important concern regarding large symbolic expressions while using &lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt;. &lt;br /&gt;
&lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; helped me fix a minor import issue. &lt;br /&gt;
Successive reviews helped in the following changes to PR:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;using &lt;code class="highlighter-rouge"&gt;iterable(...)&lt;/code&gt; instead of &lt;code class="highlighter-rouge"&gt;hasattr(..., '__iter__')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;adding doctests&lt;/li&gt;
  &lt;li&gt;improving documentation&lt;/li&gt;
  &lt;li&gt;fixing precision issues in &lt;code class="highlighter-rouge"&gt;fft&lt;/code&gt; using argument &lt;code class="highlighter-rouge"&gt;dps&lt;/code&gt; for decimal places or using unevaluated symbols in the first place (by passing &lt;code class="highlighter-rouge"&gt;dps=None&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-1227858324235625174</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018 : Week 1</title>
      <pubDate>Fri, 18 May 2018 20:09:36 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/05/gsoc-2018-week-1_18.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hi everyone. Here is the brief summary of my works completed and works which are in progress in the first week.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;For proper implementation of RUBI in sympy, we have a high dependence on&amp;nbsp;&lt;a href="https://github.com/HPAC/matchpy"&gt;matchpy&lt;/a&gt;. This might limit the performance of RUBI in sympy. I am currently targeting to have a correct set of rules and utility functions.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;This week I opened this PR&amp;nbsp;&lt;a href="https://github.com/sympy/sympy/pull/14724"&gt;#14724&lt;/a&gt;,&amp;nbsp; from which progress in my work can be tracked. While testing the code, sometimes there were recursion errors because the same set of rule continuously were applied to the expression and there was no simplification. This worked in Mathematica because a order of matching(specificity order) is maintained in Mathematica. We use downvalues to parse the code in matchpy format. So we know the order. I found a way to fix the order in matchpy. I used&amp;nbsp;&lt;i&gt;ManyToOneMatcher&lt;/i&gt;&amp;nbsp;to find all rules being matched to an expression. Then pickup the most prior rule and then perform replacement. It is little slow but we can debug our rules (parsetools) and utility functions.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;In this week I have done the following improvements:&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Replaced lambdas with proper functions in replacement rule.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Implemented a new structure of rule matching&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Partially loaded&amp;nbsp;&lt;i&gt;integrand_simplification&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Fixed few minor issues in parsetools and utility_functions&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Next, I am targeting to completely load&amp;nbsp;&lt;i&gt;integrand_simplification&lt;/i&gt;&amp;nbsp;and perform complete testing of algebraic rules.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=2</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser (using ANTLR v4)</title>
      <pubDate>Wed, 16 May 2018 20:05:08 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/05/16/autolev-parser-using-antlr-v4/</link>
      <description>&lt;p&gt;In this post, I shall discuss my project: Autolev Parser (using ANTLR v4). This is the timeline I am proposing. Please suggest any changes if required.&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;Timeline:&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Finalize this after discussing things with the mentors.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Phase 1:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Weeks 1 and 2 (May 15 &amp;#8211; May 28): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Refactor the grammar and the preprocessing steps. Finish parsing the mathematical entities of Autolev.&amp;#160;&amp;#160;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Start off with parsing the symbolic dynamics part of Autolev. (&lt;/span&gt;&lt;b&gt;Pull request #1)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Weeks 3 and 4 (May 29 &amp;#8211; Jun 11): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Work on parsing the symbolic dynamics part of Autolev using sympy.physics.vector and sympy.physics.mechanics. &lt;/span&gt;&lt;b&gt;(Pull request #2)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Phase 2:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Weeks 5 (Jun 12 &amp;#8211; Jun 18): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Work further on the symbolic dynamics part. Work on the more difficult parts of the parser ie translations which are quite indirect and require more code and tweaking as opposed to calling equivalent SymPy commands. &lt;/span&gt;&lt;b&gt;(Pull request #3)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Weeks 6, 7 and 8 (Jun 19 &amp;#8211; Jul 9): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Work on parsing the solvers and visualization parts. Use sympy.solvers and numerical solvers from the SciPy stack to translate the algebraic, nonlinear and ODE solvers. Use pydy.codegen to solve the equations of motion numerically and use sympy.physics.units to manipulate the units before plugging the values in. Use matplotlib and pydy.viz to translate the plotting parts. &lt;/span&gt;&lt;b&gt;(Pull request #4)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Phase 3:&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;b&gt;Weeks 9, 10 and 11 (Jul 17 &amp;#8211; Aug 6): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Refactor and tie up all the things done earlier and work on writing lots of test cases and well documented examples. Run benchmarking tests and make sure the results obtained are correct. &lt;/span&gt;&lt;b&gt;(Pull request #5)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Week 12: (Jul 10 &amp;#8211; Jul 16) &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Implement the error handling and recovery mechanism discussed in the Design section.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Week 13 (Aug 6 &amp;#8211; Aug 14): &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Wrap everything up. Refactor the code, tests and examples and do a cleanup. &lt;/span&gt;&lt;b&gt;(Pull request #6)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Code Setup:&lt;/h3&gt;
&lt;p&gt;Now I shall discuss some of the technical details about how my code is setup. You can find the code on my Github &lt;a href="https://github.com/NikhilPappu/autolev-parser" rel="noopener" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The antlr_essentials directory contains the antlr&amp;#160;jar file and some bat files. If you want to run antlr commands, first specify the classpath of this jar file in the commands prompt.&lt;/li&gt;
&lt;li&gt;The test files directory contains the example test files on which I run the code. The files example5.1-example5.9 are examples of the same names in the &lt;a href="http://ems.guc.edu.eg/Download.ashx?id=239&amp;amp;file=Autolev%20tutorial_143_239.pdf" rel="noopener" target="_blank"&gt;Autolev&amp;#160;Tutorial&lt;/a&gt;.&amp;#160; I have also included whipple.txt which is the bicycle model Autolev code. The directory also contains png image files of the parse trees generated when the grammar is run on these test files.&lt;/li&gt;
&lt;li&gt;Autolev.g4 is the grammar file. AutolevLexer.py, AutolevParser.py and AutolevListener.py are files automatically generated by ANTLR. A listener is basically a tree walker which triggers events when it enters and exits a rule. One can use this mechanism by subclassing AutolevListener.&lt;/li&gt;
&lt;li&gt;The file myListener.py contains the myListener class which simply subclasses AutolevListener. This is where I will be putting the majority of the parser code.&lt;/li&gt;
&lt;li&gt;The file autolev.py initializes the parser, lexer and listener and is the file you would want to run. Running &amp;#8216;python autolev.py input.txt&amp;#8217; on the file input.txt which contains Autolev code would generate the parsed SymPy output in an output file of choice.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/NikhilPappu/autolev-parser/blob/master/pydy_for_autolev_users.rst" rel="noopener" target="_blank"&gt;pydy_for_autolev_users.rst&lt;/a&gt; is a guide and I will keep updating it as I keep parsing more of the Autolev language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I haven&amp;#8217;t put much of an emphasis on code readability. Should this be an aspect to focus on? I am thinking the parsed output and the results are of primary concern. One reason I feel this way is because this isn&amp;#8217;t core SymPy code and the project is niche and that the majority of code is based in ANTLR. Please tell me if you don&amp;#8217;t think the same.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Status of the Project:&lt;/h3&gt;
&lt;p&gt;I have finished writing the grammar for the Autolev language. I am now partway through parsing the mathematical entities.&lt;/p&gt;
&lt;p&gt;Parsing Mathematical Entities :&lt;br /&gt;
# Constants &amp;#10003;&lt;br /&gt;
# Variables &amp;#10003;&lt;br /&gt;
# Imaginary &amp;#10003;&lt;br /&gt;
# MotionVariables &amp;#10003;&lt;br /&gt;
# Specifieds &amp;#10003;&lt;br /&gt;
# Expression reconstruction&amp;#160;&amp;#10003;&lt;br /&gt;
# Assignments&amp;#160;&amp;#10003;&lt;br /&gt;
# Math commands (deal with function calls) and expressions&lt;br /&gt;
# Reserved names and constants (T, Pi etc)&lt;br /&gt;
# Matrices&lt;/p&gt;
&lt;p&gt;I have written code to parse the basic mathematical variable declarations such as constants, variables, specifieds etc.&amp;#160; I have also written code for expression reconstruction and assignment. I will now work all the math commands, reserved names and matrices. I will be handling vectors and dyadics in the physics part as sympy.physics.vector is more appropriate in the sense of Autolev and symbolic dynamics. Go over &lt;a href="https://github.com/NikhilPappu/autolev-parser/blob/master/pydy_for_autolev_users.rst" rel="noopener" target="_blank"&gt;pydy_for_autolev_users.rst&lt;/a&gt;&amp;#160;to get an idea of the different mathematical commands and physical entities. You can have a look at input1.txt and the parsed output in output1.txt in the test_files directory of &lt;a href="https://github.com/NikhilPappu/autolev-parser" rel="noopener" target="_blank"&gt;autolev-parser&lt;/a&gt;&amp;#160;on my Github.&lt;/p&gt;
&lt;p&gt;I will get started with the symbolic dynamics part next once I am done with the mathematical entities.&lt;/p&gt;
&lt;p&gt;Do you think I am headed in the right direction with the project? Please let me know what you think. Any feedback is much appreciated.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/05/gsoc-community-bonding</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Community Bonding</title>
      <pubDate>Wed, 16 May 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/05/gsoc-community-bonding.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The community bonding period has concluded. As proposed, I have gone through the existing modules and have thought about various aspects of the implementation which needed to be taken care of. The discussion for the project will take place on &lt;code class="highlighter-rouge"&gt;gitter&lt;/code&gt; under &lt;code class="highlighter-rouge"&gt;sympy/discrete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Discussion for API is premature but it will shape as the Coding Period commences. Meanwhile, I have control of what all needs to be done in accordance with the proposed timeline.&lt;/p&gt;

&lt;p&gt;Being familiar with the development workflow and having contributed to SymPy, I assisted new contributors and also helped review existing PRs - &lt;a href="https://github.com/sympy/sympy/pull/14679"&gt;#14678&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/14698"&gt;#14698&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/14707"&gt;#14707&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking forward to Coding Period.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-1192230641141498169</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Proposal Acceptance and Community Bonding Period</title>
      <pubDate>Fri, 11 May 2018 18:59:02 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/05/gsoc-2017-proposal-acceptance-and.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello, I'm Ashish Kumar Gaurav a undergraduate student at Indian Institute of Technology, Kharagpur. My proposal for completing rule based integration(RUBI) in sympy has been accepted as a part of Google Summer of Code.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;RUBI consists of about 10,000 rules. Sympy can use these rules rather than various algorithms to perform efficient integration. RUBI had been a GSoC project last year but it could not be completed. I hope that I will be able to bring RUBI in a working state.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="background-color: #fdfdfd; text-align: start;"&gt;&lt;span&gt;Community bonding period is near end and coding period will be starting on 14th May. In this period I have done the following improvements:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: left;"&gt;&lt;span&gt;Fixed a bug in parsetool, which raised exceptions while sympifying the code.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span&gt;Removed repeated definition of same constraints. All constraints are present in a single file &lt;span style="background-color: #cccccc;"&gt;constraints.py&lt;/span&gt; , in which each constraint is defined uniquely. Earlier same constraints were defined multiple times. An issue had also been created &lt;a href="https://github.com/HPAC/matchpy/issues/27"&gt;here&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span&gt;Removed dependencies of lambda function from &lt;span style="background-color: #cccccc;"&gt;constraints&lt;/span&gt;. lamdas are now replaced ny normal function.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;In the upcoming week, I will remove dependencies of lambda from &lt;span style="background-color: #cccccc;"&gt;ReplacementRule &lt;/span&gt;. I will then start testing the integrals and fixing bugs.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=3</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Google Summer of Code with SymPy</title>
      <pubDate>Mon, 30 Apr 2018 14:03:57 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/04/30/google-summer-of-code-with-sympy/</link>
      <description>&lt;p&gt;About a week ago, Google announced the projects selected for this year&amp;#8217;s Summer of Code. I am glad to inform that my project, &lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/projects/#4687503924133888"&gt;Create a Rich Beam Solving System&lt;/a&gt;&lt;/strong&gt;, for&amp;#160;SymPy got selected for GSoC 2018.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h3&gt;&lt;em&gt;&lt;span style="color: #339966;"&gt;&amp;#160;SymPy&amp;#160;&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;em&gt;&lt;span style="color: #000000;"&gt;&lt;strong&gt;SymPy&lt;/strong&gt;&lt;/span&gt;&amp;#160; is a Python library for symbolic mathematics. It aims to become a full-featured&amp;#160;&lt;span style="color: #339966;"&gt;&lt;span style="color: #000000;"&gt;&lt;strong&gt;Computer Algebra System&lt;/strong&gt;&lt;/span&gt;&amp;#160;&lt;/span&gt;(CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Sympy_logo.svg" class=" wp-image-13 aligncenter" height="246" src="https://singhjashan.files.wordpress.com/2018/04/sympy_logo-svg.png?w=310&amp;#038;h=246" width="310" /&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I entered the world of Open Source a few months back and journey since then was full of learning curves, which I enjoyed the most. You learn something new every time you try to contribute. Your code getting reviewed by other contributors, who are usually packed with more experience than you got, is an added advantage. All this inspired me to spend my summer writing code for open source projects and made me apply for GSoC 2018.&lt;/p&gt;
&lt;p&gt;Coding period for this year&amp;#8217;s GSoC would start on May 14 and should end by August 6. Prior to the coding period is &lt;strong&gt;Community Bonding period&lt;/strong&gt; (April 23 &amp;#8211; May 14) which usually is used for&amp;#160;learning more about the organization&amp;#8217;s community.&lt;/p&gt;
&lt;p&gt;I would be updating this blog every week, keeping track of all the progress I make towards the completion of my project.&lt;/p&gt;
&lt;h1 class="vertical-timeline__block-title"&gt;Community Bonding&lt;/h1&gt;
&lt;p&gt;The first month of GSoC is the Community Bonding period.&amp;#160;In practice, the community bonding period is all about, well, community bonding. Rather than jumping straight into coding, you&amp;#8217;ve got some time to learn about your organization&amp;#8217;s processes.&lt;/p&gt;
&lt;p&gt;During this period I am expected to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss the work plan, we would be following this summer, with my mentors and get to know all the tools required for my project.&lt;/li&gt;
&lt;li&gt;Start a Blog to keep a track of my weekly progress. The Blog is required to have an RSS feed. We are expected to have at least&amp;#160;one blog post a week, describing our progress for that week.&lt;/li&gt;
&lt;li&gt;Sending a pull request with my blog RSS feed to&amp;#160;&lt;a href="https://github.com/sympy/planet-sympy"&gt;https://github.com/sympy/planet-sympy&lt;/a&gt;. For now, I have created this Blog on WordPress but I would be shifting soon to GitHub pages as they look cleaner and show no ads.&lt;/li&gt;
&lt;li&gt;Review pull requests created by other contributors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I am having exams at my university from May 14 until May 26, I would start coding early to cover up for those days. Hopefully, I would be creating my pull request in a day or two.&lt;/p&gt;
&lt;p&gt;Till now I have&amp;#160;been reviewing&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;,&amp;#160;which&amp;#160;coincidentally implements one of the points&amp;#160;I proposed in my GSoC proposal. Hopefully, I would be creating my first pull request in a day or two.&lt;/p&gt;
&lt;h1 class="vertical-timeline__block-title"&gt;&lt;/h1&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/04/gsoc-selection</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): Selected for GSoC: SymPy</title>
      <pubDate>Tue, 24 Apr 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/04/gsoc-selection.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;I am extremely glad to inform that my &lt;a href="https://summerofcode.withgoogle.com/dashboard/project/5222530349006848/overview"&gt;proposal&lt;/a&gt; &amp;#8216;Transforms, Convolution &amp;amp; Linear Recurrence Evaluation&amp;#8217; has been accepted by SymPy for Google Summer of Code 2018.&lt;/p&gt;

&lt;p&gt;For the unitiated, SymPy is a Computer Algebra System (CAS) written entirely in Python. SymPy was started as a project by Ondrej Certik (&lt;a href="https://github.com/certik"&gt;certik&lt;/a&gt;) in 2006. SymPy has participated in every Google Summer of Code since 2007.&lt;/p&gt;

&lt;p&gt;My official mentors are Aaron Meurer (&lt;a href="https://github.com/asmeurer"&gt;asmeurer&lt;/a&gt;) and Kalevi Suominen (&lt;a href="https://github.com/jksuom"&gt;jksuom&lt;/a&gt;). Aaron Meurer (who also joined from GSoC) is the lead developer of SymPy since 2011. Kalevi Suominen (SymPy Member) has mentored for Google Summer of Code in 2016 and 2017. I am extremely lucky to have gotten an opportunity to work with such experienced developers.&lt;/p&gt;

&lt;p&gt;During the Community Bonding Period, I will complete the following tasks:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Setting up the blog with RSS feed for GSoC posts (for &lt;a href="http://planet.sympy.org"&gt;planet.sympy.org&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Discussing the possible modes of communication, and getting information for timings and weekly meetings.&lt;/li&gt;
  &lt;li&gt;Resolving any other issues that might arise during the Coding Period.&lt;/li&gt;
  &lt;li&gt;Getting the details for expected work to be done, discussing the API of the modules to be implemented and studying the existing modules which might be used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would like to thank the SymPy team, especially my mentors - Aaron Meurer and Kalevi Suominen.&lt;/p&gt;

&lt;p&gt;Looking forward to a great summer.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/blogs/os_day1</guid>
      <author>Gaurav Dhingra (gxyd)</author>
      <title>Gaurav Dhingra (gxyd): Operating Systems - Day 1</title>
      <pubDate>Sun, 01 Apr 2018 00:00:00 GMT</pubDate>
      <link>https://gxyd.github.io/blogs/os_day1/</link>
      <description>&lt;p&gt;Looking at linux kernel&lt;/p&gt;

&lt;p&gt;I am currently reading the book &lt;i&gt;Operating System Concepts&lt;/i&gt; by &lt;i&gt;Galvin&lt;/i&gt; and &lt;i&gt;Galge&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;What purpose does an operating system serve?&lt;/p&gt;

&lt;p&gt;Actually an operating system is similar to the government, operating system doesn&amp;#8217;t
do anything useful for the user in its own right but rather creates an environment
in which a variety of programs, apps can be function properly by making use of the
hardware resources (CPU, main memory, I/O devices etc.) properly.&lt;/p&gt;

&lt;p&gt;An operating system is a control program, i.e. it manages the execution of user
programs to prevent errors and improper use of the computer.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Moore&amp;#8217;s law&lt;/b&gt; (not important though): every 18 months the number of transistors
                                        on integrated circuit would double.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id="computer-system-operation"&gt;Computer system operation&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a number of device controllers connected through a common bus, each
device controller is in-charge of specific type of devices. For ex, for usb devices
we have usb-controllers, for audio devices we have audio controllers and so on.&lt;/p&gt;

&lt;p&gt;https://unix.stackexchange.com/q/268340&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id="subscribing-to-linux-kernel-mailing-list"&gt;Subscribing to linux kernel mailing list&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;I subscribed to the main linux kernel mailing list, which is supposed to be a
list of people having major discussions about the kernel and posting bugs there.&lt;/p&gt;

&lt;p&gt;I have been trying to figure out some easy to fix issue on linux kernel. Even
though I don&amp;#8217;t even have a good understanding of the basics of C language nor
of the operating system, but I want to make an attempt at getting my first patch
submitted to the kernel. I can see that there is https://bugzilla.kernel.org/
but from it getting to recently non-fixed easy to fix issues might not be easy
, probably I need something like an (regularly) updated wiki containing such
bugs listing.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it for now.
See ya!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/blog/Talks/SymPy/PyConIndia-Delhi-2017</guid>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <title>Shekhar Prasad Rajak (shekharrajak): PyCon India - Delhi 2017</title>
      <pubDate>Thu, 02 Nov 2017 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/blog/Talks/SymPy/PyConIndia-Delhi-2017</link>
      <description>&lt;h4 id="pycon-india-delhi-2017--proposal-for-workshop"&gt;PyCon India Delhi 2017 : Proposal for Workshop&lt;/h4&gt;

&lt;p&gt;I am very much interested for conferences and talks/workshops and had submitted the workshop
proposal last year(2016) as well for PyCon India. So this year
I started the discussion for the workshop proposal earlier, in the
&lt;a href="https://groups.google.com/forum/#!searchin/sympy/pycon$20india%7Csort:date/sympy/s6IOYvHnHxU/xiiY0vdlAQAJ" target="_blank"&gt;SymPy Google mailing thread&lt;/a&gt;
to make the workshop proposal
interesting and to improve the tutorial contents.&lt;/p&gt;

&lt;p&gt;Since on 2016 proposal, we got the suggestion for adding SymEngine as well into the tutorial content.
So we started discussion for the same. SymEngine project GSoCers, worked for the SymEngine tutorial part.&lt;/p&gt;

&lt;p&gt;People who took part for writting the proposal were :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amit Kumar, Core Developer &amp;amp; GSoC-cer at SymPy&lt;/li&gt;
  &lt;li&gt;Shekhar Prasad Rajak : Core Developer at SymPy GSoC 2016 - Solvers, Sets&lt;/li&gt;
  &lt;li&gt;Shikhar Jaiswal : Student Developer at SymPy GSoC 2017 - SymPy - SymEngine Integration and Python Wrappers&lt;/li&gt;
  &lt;li&gt;Ranjith Kumar : Student Developer at SymPy GSoC 2017 - Solvers and Sets in SymEngine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for contributing on the proposal.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id="computer-aided-algebra-system-cas-for-different-programming-languages-using-symengine-and-sympy"&gt;Computer aided algebra system (CAS) for different programming languages using SymEngine and SymPy&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Github repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I extended the previous year PyCon repo : &lt;a href="https://github.com/Shekharrajak/PyCon-SymPy-SymEngine" target="_blank"&gt;(Github repo for the tutorial &amp;amp; resources)&lt;/a&gt;  and modified it. We added some new contents and SymEngine tutorials added as well.&lt;/p&gt;

&lt;p&gt;We followed the previous year conferences.Mainly these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://in.pycon.org/cfp/pycon-india-2015/proposals/symbolic-computation-with-python-sympy~bqYrb/"&gt;PyCon India 2015&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://cfp.pydelhi.org/pydelhi-conference-2016/proposals/symbolic-computation-with-python-using-sympy/"&gt;PyDelhi Conference 2016&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=f4cXX0wa9VM&amp;amp;t=599s"&gt;Pycon UK 2016&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mechanics : &lt;a href="https://www.moorepants.info/blog/npendulum.html"&gt;https://www.moorepants.info/blog/npendulum.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=EG9uOGPBkvQ"&gt;plotting example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://mattpap.github.io/scipy-2011-tutorial/html/basics.html"&gt;http://mattpap.github.io/scipy-2011-tutorial/html/basics.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/sympy/sympy/wiki/Tutorial"&gt;Basic tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We divided the tutorial part into SymPy and SymEngine.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/Shekharrajak/PyCon-SymPy-SymEngine/tree/master/SymPy_material"&gt;SymPy material we used&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://github.com/Shekharrajak/PyCon-SymPy-SymEngine/tree/master/SymEngine_material"&gt;SymEngine material we used&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="https://shekharrajak.github.io/PyCon-SymPy-SymEngine/slides-pyconindia2017"&gt;Link for the presentation for the workshop day&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interested people can download the IPython noteboook for the tutorial from &lt;a href="https://github.com/Shekharrajak/PyConIndiaSymPyTutorial/archive/master.zip"&gt;this link&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If people want to see the examples online , it is avaiable &lt;a href="http://nbviewer.jupyter.org/github/Shekharrajak/PyCon-SymPy-SymEngine/tree/master/SymPy_material/tutorial_exercises/"&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id="2nd-nov-2017-the-workshop-day"&gt;2nd Nov 2017: The workshop day&lt;/h4&gt;

&lt;p&gt;I reached to the delhi Airport on 2nd Nov around 1AM. Somehow I was able to get room nearby the PyCon center at 5AM :p.&lt;/p&gt;

&lt;div class="post_pic"&gt; &lt;img src="http://shekharrajak.github.io/images/pyconIndiaDelhi/cloud2.jpg" /&gt;  &lt;/div&gt;

&lt;p&gt;I reached to PyCon center at around 9:00AM via cab. Amit and Ranjith were not able to join the PyCon India 2017.
So me and Shikhar were present on time as the Speaker for the workshop.&lt;/p&gt;

&lt;div class="post_pic"&gt; &lt;img src="http://shekharrajak.github.io/images/pyconIndiaDelhi/speaker.jpg" /&gt;  &lt;/div&gt;

&lt;p&gt;We faced some projector issue but fine, we were able to present the slides and tutorial went well. I started the
presentation and slowly went to the tutorial part from beginning to some advance examples.&lt;/p&gt;

&lt;div class="post_pic"&gt; &lt;img src="http://shekharrajak.github.io/images/pyconIndiaDelhi/stage.jpg" /&gt;  &lt;/div&gt;

&lt;p&gt;Shikhar took the mic and covered the SymEngine presentation and basic examples.&lt;/p&gt;

&lt;div class="post_pic"&gt; &lt;img src="http://shekharrajak.github.io/images/pyconIndiaDelhi/stage2.jpg" /&gt;  &lt;/div&gt;

&lt;p&gt;Audience had some good questions and they keep questioning during the workshop. It was a pretty good
experience. It was our first talk/workshop, so we were satisfied with our performance. Hope we will have
better talks/workshops in upcoming conferences, which will transfer the knowledge.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id="after-the-workshop-"&gt;After the workshop :&lt;/h4&gt;

&lt;p&gt;During the lunch, me and shikhar interacted with fellow speakers and GSoCers. We joined some other
workshops as well. I left earlier, since I was sleepy because of night journey from the Banglore.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id="conclusion"&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Overall it was good experience. Since I started preparing the proposal much before the deadline. So we were
able to finish it up on time. I was busy in the month of August, Sept, Oct but we were able to finish the resources and slides on time.
I was expecting some more things to be covered, but it&amp;#8217;s fine. I had written few things in the &lt;a href="https://github.com/Shekharrajak/PyCon-SymPy-SymEngine/wiki" target="_blank"&gt;Github repo wiki page&lt;/a&gt;, it may help for future speakers.
Thanks to PyCon India community for giving us this opportunity.
I hope in future we will have more interesting topics to talk on SymPy and SymEngine and audience
will enjoy to learn SymPy and SymEngine along with us.&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nesar2017.wordpress.com/?p=371</guid>
      <author>Abdullah Javed Nesar (Abdullahjavednesar)</author>
      <title>Abdullah Javed Nesar (Abdullahjavednesar): GSoC 2017: RUBI INTEGRATOR: Final Report</title>
      <pubDate>Fri, 01 Sep 2017 18:35:31 GMT</pubDate>
      <link>https://nesar2017.wordpress.com/2017/09/01/gsoc-2017-rubi-integrator-final-report/</link>
      <description>&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;About Me&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;My name is Abdullah Javed Nesar, I am an undergraduate student at Indian Institute of Technology, Kharagpur.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;About the Project&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A&amp;#160;&lt;strong&gt;Ru&lt;/strong&gt;le&amp;#160;&lt;strong&gt;b&lt;/strong&gt;ased&amp;#160;&lt;strong&gt;i&lt;/strong&gt;ntegrator nicknamed&amp;#160;&lt;strong&gt;Rubi&lt;/strong&gt;&amp;#160;is an entirely new module in SymPy, Integrals. It is an implementation of more than 10,000 rules to cover a wide variety of indefinite integration. Currently SymPy uses algorithms for indefinite integration which are too slow and presents results which are not simplified. Rubi utilizes a set of well defined rules which makes it smart to present the results in a more symmetric and simplified manner.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;The Plan&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The plan earlier was to implement a completely new pattern matcher with multiple functionalities which was as efficient as Mathematica&amp;#8217;s pattern matcher. As the pattern matcher would be the back bone of Rubi. But later we came across matchpy and we planned to implement it in our module. But because it is implemented in Python3.6 Rubi isn&amp;#8217;t capable to support Python version less then 3.6.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="text-decoration: underline;"&gt;Work Done&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utility functions: We have managed to cover majority of the utility functions. Our job was to re-write functions from mathematica to Python.&lt;/li&gt;
&lt;li&gt;Added rules into SymPy using Python parser.&lt;/li&gt;
&lt;li&gt;Added tests cases. But unfortunately we could not include all the tests due to performance issue in Python. Tests was taking too long so we decided to include only a few of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Although we have implemented all the rules, but we could not work much on the performance and so it takes too long for Python to compute results. Because of this issue we could not add all the test cases.&lt;/li&gt;
&lt;li&gt;Working on left out Utility functions. Few of the utility functions were a bit tricky like &lt;code class="highlighter-rouge"&gt;Dist&lt;/code&gt;, &amp;#160;&lt;code class="highlighter-rouge"&gt;FixRhsIntRule&lt;/code&gt;&amp;#160;etc are yet to be implemented.&lt;/li&gt;
&lt;li&gt;Extending rules set for a smarter computation and better results.&lt;/li&gt;
&lt;li&gt;Replacing the SymPy&amp;#8217;s pattern matcher with matchpy in utility functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I would like to thank my mentor &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej &amp;#268;ert&amp;#237;k&lt;/a&gt;&amp;#160;for this project idea and helping me understand the project, I am also thankful to &lt;a href="https://github.com/Upabjojr"&gt;Francesco Bonazzi&lt;/a&gt;&amp;#160;and &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt;&amp;#160;for helping me from the very beginning at every stage whenever I needed help.&lt;/p&gt;
&lt;p&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Link to pull request:&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/12978"&gt;https://github.com/sympy/sympy/pull/12978&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Weekly blog link:&amp;#160;&lt;a href="https://nesar2017.wordpress.com/"&gt;https://nesar2017.wordpress.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://szymag.github.io/post/report/</guid>
      <author>Szymon Mieszczak (szymag)</author>
      <title>Szymon Mieszczak (szymag): GSoC 2017 Report, Implementation of multiple types of coordinate systems for vectors</title>
      <pubDate>Tue, 29 Aug 2017 19:41:21 GMT</pubDate>
      <link>https://szymag.github.io/post/report/</link>
      <description>&lt;p&gt;This page summarizes the work which I&amp;rsquo;ve done this summer.
About me My name is Szymon Mieszczak and I&amp;rsquo;m master student at Adam Mickiewicz University in Pozna&amp;#324;, Poland.
The goals The aim of my work was to introduce different kind of orthogonal curvilinear coordinate systems to vector package in SymPy. Previously coordinate system could be only rotated or/and translated with respect to other coordinate systems.
My work can be split into tasks.</description>
    </item>
    <item>
      <guid isPermaLink="false">https://shikharj.github.io//2017/08/29/Wrapping-Up-GSoC</guid>
      <author>Shikhar Jaiswal (ShikharJ)</author>
      <title>Shikhar Jaiswal (ShikharJ): Wrapping Up GSoC</title>
      <pubDate>Tue, 29 Aug 2017 00:00:00 GMT</pubDate>
      <link>https://shikharj.github.io//2017/08/29/Wrapping-Up-GSoC/</link>
      <description>&lt;p&gt;As I&amp;#8217;m writing this post, the deadline for code submission has finally arrived. It has been a wonderful journey, and the experience has certainly left me as a much better programmer than I originally thought I was. From my first &lt;a href="https://github.com/symengine/symengine/pull/1100"&gt;bug fix&lt;/a&gt;, which despite being a minor issue, took up so much of my time, I wasn&amp;#8217;t even sure that I&amp;#8217;d be associated with the &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;SymEngine&lt;/code&gt; team for so long.&lt;/p&gt;

&lt;p&gt;Google Summer of Code &amp;#8216;17 has officially ended. It had its own ups and downs, though both being rewarding to say the least. Currently all my work is pushed up to the respective repositories, and should be ready to merge soon. Thanks to Isuru, for allowing me to work on this even after the official period ends.&lt;/p&gt;

&lt;h2 id="report"&gt;Report&lt;/h2&gt;

&lt;h3 id="symenginepy"&gt;SymEngine.py&lt;/h3&gt;

&lt;p&gt;I pushed in &lt;a href="https://github.com/symengine/symengine.py/pull/182"&gt;#182&lt;/a&gt; implementing &lt;code class="highlighter-rouge"&gt;Expr&lt;/code&gt; class and fixing the inheritance of various other classes. Some minor changes still might be required in this repository in the time to come, since it might require some more tweaks to finally get everything running in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="sympy"&gt;SymPy&lt;/h3&gt;

&lt;p&gt;Here is a &lt;a href="https://github.com/sympy/sympy/pulls/ShikharJ"&gt;list&lt;/a&gt; of all my PRs currently pending in &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt;. I pushed a lot of them in the last few hours to spare some time before the deadline. These will consequently be worked upon and merged.&lt;/p&gt;

&lt;p&gt;I had a great summer, much more exhilarating than I had expected it to be. A more detailed work report can be found &lt;a href="https://github.com/ShikharJ/GSoC-2017-Work-Report"&gt;here&lt;/a&gt;. A final thanks to the &lt;code class="highlighter-rouge"&gt;SymPy&lt;/code&gt; community, &lt;code class="highlighter-rouge"&gt;Google&lt;/code&gt;, and my mentors Isuru Fernando and Sumith Kulal, for giving me the opportunity to be a part of this. I hope to stay around for a while.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;#2346;&amp;#2369;&amp;#2344;&amp;#2352;&amp;#2381;&amp;#2342;&amp;#2352;&amp;#2381;&amp;#2358;&amp;#2344;&amp;#2366;&amp;#2351;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
