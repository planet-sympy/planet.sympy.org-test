<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Eleventh-Week</guid>
      <title>GSoC Eleventh Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 11 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Eleventh-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;This week I worked on little refactoring of &lt;code class="highlighter-rouge"&gt;Fields&lt;/code&gt; module. Like moving functions implementations from &lt;code class="highlighter-rouge"&gt;.h&lt;/code&gt; file to &lt;code class="highlighter-rouge"&gt;.cpp&lt;/code&gt; file in &lt;a href="https://github.com/symengine/symengine/pull/1060"&gt;this&lt;/a&gt; PR. I added a &lt;code class="highlighter-rouge"&gt;from_uintpoly&lt;/code&gt; method which allows us to create a &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; object from &lt;code class="highlighter-rouge"&gt;UIntPoly&lt;/code&gt; object in &lt;a href="https://github.com/symengine/symengine/pull/1059/"&gt;this&lt;/a&gt; PR. After which I worked on the implementation of &lt;code class="highlighter-rouge"&gt;diff&lt;/code&gt; method for &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; in &lt;a href="https://github.com/symengine/symengine/pull/1060"&gt;this&lt;/a&gt; PR.
&lt;br /&gt;
Then I worked on &lt;code class="highlighter-rouge"&gt;Logic&lt;/code&gt; module. It is needed for the implementation of &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; class in &lt;code class="highlighter-rouge"&gt;Sets&lt;/code&gt; module. It has the implementation for Logical And, Or and Not operations.
&lt;br /&gt;
Both &lt;code class="highlighter-rouge"&gt;Or&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;And&lt;/code&gt; class have a private variable named &lt;code class="highlighter-rouge"&gt;container_&lt;/code&gt; which is a set of &lt;code class="highlighter-rouge"&gt;RCP&amp;lt;const Boolean&amp;gt;&lt;/code&gt;. It stores the &lt;code class="highlighter-rouge"&gt;Boolean&lt;/code&gt; objects on which &lt;code class="highlighter-rouge"&gt;And&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Or&lt;/code&gt; operator can&amp;#8217;t be applied using the known rules.
&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;Not&lt;/code&gt; also has one private variable which is an &lt;code class="highlighter-rouge"&gt;RCB&amp;lt;const Boolean&amp;gt;&lt;/code&gt; object, which stores the &lt;code class="highlighter-rouge"&gt;Boolean&lt;/code&gt; object on which we were not able to apply &lt;code class="highlighter-rouge"&gt;not&lt;/code&gt; operator using the current rules.
&lt;br /&gt;
Then we have three functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;RCP&amp;lt;const Boolean&amp;gt; logical_and(const set_boolean &amp;amp;s);
RCP&amp;lt;const Boolean&amp;gt; logical_or(const set_boolean &amp;amp;s);
RCP&amp;lt;const Boolean&amp;gt; logical_not(const RCP&amp;lt;const Boolean&amp;gt; &amp;amp;s);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are used to do the respective operation on the operands supplied.
&lt;br /&gt;
Talking little about implementaion details:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;RCP&amp;lt;const Boolean&amp;gt; logical_and(const set_boolean &amp;amp;s)
{
   return and_or&amp;lt;And&amp;gt;(s, false);
}

RCP&amp;lt;const Boolean&amp;gt; logical_or(const set_boolean &amp;amp;s)
{
   return and_or&amp;lt;Or&amp;gt;(s, true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the function &lt;code class="highlighter-rouge"&gt;and_or&lt;/code&gt; do the required operations.
&lt;br /&gt;
After &lt;a href="https://github.com/symengine/symengine/pull/1061/"&gt;this&lt;/a&gt; PR gets merged, I would start working on &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; class.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 12</guid>
      <title>GSoC Week 12</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Tue, 09 Aug 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_12.html</link>
      <description>&lt;p&gt;
Hi all, here's a brief summary of the 12th week of my GSoC:
&lt;br /&gt;
Last week I uploaded the &lt;a href="https://gxyd.github.io/gsoc2016/covhtml/index.html"&gt;test-coverage files&lt;/a&gt; on my website, that revealed some interesting places where a few versions of &lt;code&gt;scan&lt;/code&gt; routine in coset enumeration have un-tested &lt;code&gt;if-elif-else&lt;/code&gt; case.
&lt;/p&gt;

&lt;p&gt;
As we are now approaching the end of GSoC time period, we decided to do some testing with some of the examples from 1973cdhw paper [2]. Coset Enumeration got my attention again since:
&lt;/p&gt;

&lt;p&gt;
There seemed to be one bug raising &lt;code&gt;TypeError&lt;/code&gt; so opened issue &lt;a href="https://github.com/sympy/sympy/issues/11449"&gt;sympy/sympy/#11449&lt;/a&gt;, resulting from coset enumeration by the coset-table based method. From beginning it was clear that the issue was not in &lt;code&gt;compress()&lt;/code&gt; method. It was quite difficult for me get onto the main source of problem. But then Kalevi had a closer look on the pseudo-code in Derek Holt and also in Sims Finitely Presented Groups.
&lt;/p&gt;

&lt;p&gt;
I wrote docstrings for a few of methods and fixed the issue &lt;a href="https://github.com/sympy/sympy/issue/11449"&gt;#11449&lt;/a&gt; in PR &lt;a href="https://github.com/sympy/sympy/pull/11460"&gt;#11460&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The problem there in code is explained briefly below
&lt;/p&gt;

&lt;b&gt;Previous code-snippet&lt;/b&gt;
&lt;p&gt;
&lt;pre&gt;
1    i = 0
2    while i &lt; len(C.omega):
3        alpha = C.omega[i]
4        i += 1
5        for x in C.A:
6            if C.table[alpha][C.A_dict[x]] is None:
7                C.define_f(alpha, x)
8                C.process_deductions(R_c_list[C.A_dict[x]], R_c_list[C.A_dict_inv[x]])

&lt;/pre&gt;
&lt;/p&gt;

&lt;b&gt;After code-snippet&lt;/b&gt;
&lt;p&gt;
&lt;pre&gt;
1     while alpha &lt; len(C.table):
2         if C.p[alpha] == alpha:
3             for x in C.A:
4                 if C.p[alpha] != alpha:
5                     break
6                 if C.table[alpha][C.A_dict[x]] is None:
7                    C.define_c(alpha, x)
8                     C.process_deductions(R_c_list[C.A_dict[x]], R_c_list[C.A_dict_inv[x]])

&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Here $\alpha$ looks over in till $\lt$ &lt;code&gt;C.table&lt;/code&gt;. This way all elements of $C.\Omega$ are tested even in case that the set becomes very small. The inner for $x$ loop should also tests $p[i]$ at each round and break if that becomes different from $i$.
&lt;/p&gt;

&lt;p&gt;
The changes that have been addressed in &lt;a href="https://github.com/sympy/sympy/pull/11460"&gt;PR #11460&lt;/a&gt; also include chaging the file name &lt;code&gt;free_group.py&lt;/code&gt; to &lt;code&gt;free_groups.py&lt;/code&gt;, similar to what we have.
&lt;/p&gt;

&lt;p&gt;
It seems that Presentation of Permutation Groups won't happen during GSoC since there's just one more week; instead, I plan to focus on improving and completing the current PR's &lt;a href="https://github.com/sympy/sympy/pull/11361"&gt;#11361&lt;/a&gt; on Modified Todd-Coxeter algorithm and &lt;a href="https://github.com/sympy/sympy/pull/11460"&gt;PR #11460&lt;/a&gt; on addition of docstrings and better user methods.
&lt;/p&gt;

&lt;p&gt;
One more thing, that I would start in this week though may not be completed this week will be the sphinx documentation of finitely presented groups. I found the documentation of Poly's module by Kalevi very much readable and interesting, may be I can seek to follow that.
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;i&gt;

&lt;ul&gt;
  &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory", Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;
  &lt;li&gt;2. &lt;a href="http://staff.itee.uq.edu.au/havas/1973cdhw.pdf"&gt;John J. Cannon; Lucien A. Dimino; George Havas; Jane M. Watson, "Implementation and Analysis of the Todd-Coxeter Algorithm" , Mathematics of Computation, Vol. 27, No. 123. (Jul., 1973), pp. 463-490&lt;/a&gt;&lt;/li&gt;
  &lt;/i&gt;
&lt;br /&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=854</guid>
      <title>GSoC Week 11</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Mon, 08 Aug 2016 10:55:52 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/08/08/gsoc-week-11/</link>
      <description>&lt;p&gt;This week I primarily worked on some bugs and added singular initial conditions to the result of &lt;code&gt;expr_to_holonomic()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Firstly I fixed a bug in &lt;code&gt;.unify()&lt;/code&gt;. There were some errors being raised in it&amp;#160;when one of the Holonomic Function had ground domain&amp;#160;&lt;code&gt;RR&lt;/code&gt;&amp;#160;or an extension of it. This now works fine.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [9]: expr_to_holonomic(1.4*x)*expr_to_holonomic(a*x, x)
Out[9]: HolonomicFunction((-2.0) + (1.0*x)*Dx, x, 0, {2: [1.4*a]})

In [10]: _9.to_expr()
Out[10]:
       2
1.4&amp;#8901;a&amp;#8901;x
&lt;/pre&gt;
&lt;p&gt;Later I fixed a bug in converting the two types of initial condition into one another. Apparently I forgot to add the &lt;code&gt;factorial&lt;/code&gt;&amp;#160;term while converting.&lt;/p&gt;
&lt;p&gt;After that I added singular initial conditions to the result of &lt;code&gt;expr_to_holonomic()&lt;/code&gt;&amp;#160; whenever the Indicial equation have one root. For example:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [14]: expr_to_holonomic(x*exp(x))
Out[14]: HolonomicFunction((-x - 1) + (x)*Dx, x, 0, {1: [1]})

In [15]: _.to_expr()
Out[15]:
   x
x&amp;#8901;&amp;#8495;
&lt;/pre&gt;
&lt;p&gt;I also changed printing of the class &lt;code&gt;HolonomicFunction&lt;/code&gt; to include the initial conditions inside the call, so as to make it proper python. These are implemented in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11480"&gt;#11480&lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11451"&gt;#11451&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right now we are trying to find a way to include convergence conditions in the result while converting Holonomic Functions to expressions.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/854/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/854/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=854&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://kshitij10496.github.io//2016/08/07/GSoC-Week-10-11/</guid>
      <title>GSoC Week 10 &amp; 11 - The One with `solvify`</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Sun, 07 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://kshitij10496.github.io//2016/08/07/GSoC-Week-10-11/</link>
      <description>&lt;p&gt;During the past couple of weeks, I worked on replacing &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; with &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; in solving inequalities.&lt;/p&gt;

&lt;h3 id="issue"&gt;&lt;strong&gt;Issue&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;SymPy&amp;#8217;s univariate inequality solver, &lt;code class="highlighter-rouge"&gt;solve_univariate_inequality&lt;/code&gt; relies on &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; for reducing inequalities.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;isolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve_univariate_inequality&lt;/span&gt; &lt;span class="c"&gt;# for simplicity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we would prefer using &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; internally, it is important to remove the dependency on &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; here.
However, there are a lot of issues which need to be handled carefully. Here are a few of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The major issue with using &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; is the &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; output API.
 As &lt;code class="highlighter-rouge"&gt;isolve&lt;/code&gt; is designed to work according to &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;&amp;#8217;s results, this seems to be &lt;em&gt;the&lt;/em&gt; roadblock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No support for restricted domain.&lt;/p&gt;

    &lt;p&gt;Generally, the inequalties are solved in the entire real domain. However, this might not be what the user want 
 (especially while dealing with trigonometric inequalties). Also, to maintain uniformity across all our solvers,
 support for user-speicifed &lt;code class="highlighter-rouge"&gt;domain&lt;/code&gt; is a must.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Incorrect results for trigonometric inequalties&lt;/p&gt;

    &lt;p&gt;As Issue &lt;a href="https://github.com/sympy/sympy/issues/9721"&gt;#9721&lt;/a&gt;, &lt;code class="highlighter-rouge"&gt;isolve&lt;/code&gt; returns incorrect results for certain trigonometric inequalities.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;  &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;isolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relational&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;isolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relational&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="solutions"&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Implementing &lt;code class="highlighter-rouge"&gt;solvify&lt;/code&gt; : &amp;#8220;solve&amp;#8221;-fy &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;&amp;#8217;s solutions.&lt;br /&gt;
  There were two possible ways to tackle the issue of APIs:&lt;/p&gt;

    &lt;p&gt;a. Refactoring &lt;code class="highlighter-rouge"&gt;isolve&lt;/code&gt; in according with &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; API.&lt;/p&gt;

    &lt;p&gt;b. Somehow returning &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; results from &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt; : &lt;strong&gt;b&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In order to resolve the issue of portability from &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;, I implemented &lt;code class="highlighter-rouge"&gt;solvify&lt;/code&gt; which returns solve-like results.
 We classify the return value based on the type of solution returned by &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Solution    |    Output
   &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-
   FiniteSet   | list&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;ImageSet,&lt;/td&gt;
          &lt;td&gt;list (if &lt;code class="highlighter-rouge"&gt;f&lt;/code&gt; is periodic)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Union&lt;/td&gt;
          &lt;td&gt;&amp;#160;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;EmptySet&lt;/td&gt;
          &lt;td&gt;empty list&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Others&lt;/td&gt;
          &lt;td&gt;None&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adding &lt;code class="highlighter-rouge"&gt;domain&lt;/code&gt; support.&lt;/p&gt;

    &lt;p&gt;I added a &lt;code class="highlighter-rouge"&gt;domain&lt;/code&gt; argument to &lt;code class="highlighter-rouge"&gt;isolve&lt;/code&gt; whose default value is the real domain (&lt;code class="highlighter-rouge"&gt;domain=S.Reals&lt;/code&gt;).
 A few limitation to the conditions of &lt;code class="highlighter-rouge"&gt;S.Infinity&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;S.NegativeInfinity&lt;/code&gt; followed.&lt;/p&gt;

    &lt;p&gt;Another noticable point, from the point of implementation, was to deal with singularities and discontinuities of the given inequality.
 For this, I used the &lt;code class="highlighter-rouge"&gt;continuous_domain&lt;/code&gt; method to find the continuous domains of the expression within the specified domain.&lt;/p&gt;

    &lt;p&gt;This was a minimalistic addition with considerable returns (especially for solving periodic inequalties).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solving trigonometric inequalities.&lt;/p&gt;

    &lt;p&gt;Since most of the trigonometric inequalities are periodic in nature and have infinite solutions, 
 solving the expression in the entire real domain is a repetitive task and computationally expensive.&lt;/p&gt;

    &lt;p&gt;In order to simplify the problem, I intend to solve all the inequalities in a positive periodic interval (say &lt;code class="highlighter-rouge"&gt;[0, 2*pi)&lt;/code&gt; for &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt;).
 We already have a function to compute the real period of a function : &lt;code class="highlighter-rouge"&gt;periodicity&lt;/code&gt;.&lt;br /&gt;
 In case of a non-finite &lt;code class="highlighter-rouge"&gt;domain&lt;/code&gt; argument, I intend to use this to restrict the solutions of the problem to a periodic interval.&lt;/p&gt;

    &lt;p&gt;This might not seem the perfect approach but it seems reasonable to handle infinite interval sets for now.
 We need a new &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; object : &lt;code class="highlighter-rouge"&gt;BigUnion&lt;/code&gt; to represent infinite number of interval objects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="new-implementation"&gt;&lt;em&gt;New Implementation&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;I have opened &lt;a href="https://github.com/sympy/sympy/pull/11458"&gt;PR#11458&lt;/a&gt; for the same with all the implementation details.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;isolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relational&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;isolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relational&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id="after-thoughts"&gt;&lt;em&gt;After thoughts&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;For the past couple of weeks, I haven&amp;#8217;t been able to give much time to the project due to my college schedule.
I try to make up for the lost time during the weekend and meet the 40 hour weekly deadline.&lt;/p&gt;

&lt;p&gt;With the endsem evaluation soon approaching, I expect this PR to get merged and count as a part of my project.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-11</guid>
      <title>Coding Period Week 11</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Sun, 07 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-11/</link>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;eliminate() continue:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PR : &lt;a href="https://github.com/sympy/sympy/pull/11485"&gt;#11485&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regarding issue &lt;a href="https://github.com/sympy/sympy/issues/2720"&gt;#2720&lt;/a&gt;, It is something similar to &lt;code class="highlighter-rouge"&gt;eliminate&lt;/code&gt; present in
&lt;a href="http://reference.wolfram.com/mathematica/ref/Eliminate.html"&gt;wolfram&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right now it is working for real domain and not considering ImageSet, Intersection. Complement. If it find ImageSet, Intersection. Complement
for the symbol to be eliminated, then just raises &lt;code class="highlighter-rouge"&gt;NotImaplementedError&lt;/code&gt;(in near future it can be implemented).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It can take &lt;code class="highlighter-rouge"&gt;N&lt;/code&gt; nummber of equations and &lt;code class="highlighter-rouge"&gt;M&lt;/code&gt; number of &lt;code class="highlighter-rouge"&gt;symbols&lt;/code&gt; to be eliminated. It returns &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; of equations which doesn&amp;#8217;t contains
these &lt;code class="highlighter-rouge"&gt;symbols&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue - Diophantine in Solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11234"&gt;11234&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In &lt;a href="https://github.com/sympy/sympy/pull/11234/commits/6bd9689d37647d6c28111097c433accc2127262e"&gt;commit&lt;/a&gt; : returning
&lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; when it &lt;code class="highlighter-rouge"&gt;diophantine&lt;/code&gt; doesn&amp;#8217;t the diophantine equation type and not able to solve.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Idea for improved _solve_trig in Solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;
In [1]: solveset(sin(x) + cos(y), x, S.Reals)
Out[1]: {x | x &amp;#8714; &amp;#8477; &amp;#8743; sin(x) + cos(y) = 0}

In [2]: solve(sin(x) + cos(y), x)
Out[2]: [asin(cos(y)) + &amp;#960;, -asin(cos(y))]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This above examples is enough to tell that &lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; is not using inverse trigonometric function. We can have something, which can solve trig equations by making free the symbol in lhs and in rhs inverse trig function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;solveset(sin(2*x) - sqrt(3)*cos(2*x), x, S.Reals)&lt;/code&gt; for this right now &lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; is converting it into &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form and solving it.
But it is can be simply solved using &lt;code class="highlighter-rouge"&gt;sin(x + y) == sin(x)*cos(y) + cos(x)*sin(y)&lt;/code&gt; formula.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First divide both side with &lt;code class="highlighter-rouge"&gt;sqrt(a**2 + b**2)&lt;/code&gt; where &lt;code class="highlighter-rouge"&gt;a, b&lt;/code&gt; is coeff of &lt;code class="highlighter-rouge"&gt;sin(2*x)&lt;/code&gt; , &lt;code class="highlighter-rouge"&gt;cos(2*x)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;sin(2*x)/2 - (sqrt(3)/2)*cos(2*x)&lt;/code&gt; ==&amp;gt; &lt;code class="highlighter-rouge"&gt;sin(2*x)*cos(pi/3) - sin(pi/3)*cos(2*x)&lt;/code&gt; ==&amp;gt; &lt;code class="highlighter-rouge"&gt;sin(2*x - pi/3)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now &lt;code class="highlighter-rouge"&gt;sin(2*x - pi/3)&lt;/code&gt; is solvable using &lt;code class="highlighter-rouge"&gt;solve_decomposition&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some analysis about &lt;code class="highlighter-rouge"&gt;Abs&lt;/code&gt; solver :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;
In [1]: solveset(Abs(x) - 1,  x)
ValueError:
Absolute values cannot be inverted in the complex domain.

In [2]: solveset(Abs(x) - (1 + I), x)
ValueError:
Absolute values cannot be inverted in the complex domain.

In [3]: solveset(Abs(x) - y , x)
ValueError:

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Absolute values cannot be inverted in the complex domain.
- In 1st case (for complex domain) ans should be &lt;a href="http://www.wolframalpha.com/input/?i=Abs(x)+-+(1+)+%3D0+for+x"&gt;http://www.wolframalpha.com/input/?i=Abs(x)+-+(1+)+%3D0+for+x&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In 2nd case EmptySet.
and in 3rd case (general solution when domain=S.Complexes) soln should be &lt;a href="http://www.wolframalpha.com/input/?i=Abs(x)+-+y+%3D0+for+x"&gt;http://www.wolframalpha.com/input/?i=Abs(x)+-+y+%3D0+for+x&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In general( 3rd case) it should print
ConditionSet(x, -Abs(re(y)) &amp;lt;= re(x) and re(x) &amp;lt;= Abs(re(y)) and re(y)&amp;gt;0, Eq(im(y), 0) , S.Complexes).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=1005</guid>
      <title>GSoC Week 11</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 06 Aug 2016 12:59:00 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/08/06/gsoc-week-11/</link>
      <description>&lt;p&gt;Hi there! It&amp;#8217;s been eleven weeks into GSoC . The module for solving beam bending problems is almost ready. Now, I am focusing fully on example documentation part because it&amp;#8217;s very important to let others know what&amp;#160;can be done.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Let us see the capabilities:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can create a beam object of certain length, second moment of area and modulus of elasticity. A symbol can also be passed for further uses.&lt;/li&gt;
&lt;li&gt;Can apply loads using its value, start, end and order.&lt;/li&gt;
&lt;li&gt;Can set boundary conditions for the beam.&lt;/li&gt;
&lt;li&gt;Can find the load distribution function.&lt;/li&gt;
&lt;li&gt;Can find the shear force function.&lt;/li&gt;
&lt;li&gt;Can find the bending moment function.&lt;/li&gt;
&lt;li&gt;Can find the slope function.&lt;/li&gt;
&lt;li&gt;Can find the deflection function.&lt;/li&gt;
&lt;li&gt;Can represent each of those function in the Piecewise form.&lt;/li&gt;
&lt;li&gt;Can perform all sorts of mathematical operations on these functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full fledged documentation of tutorial and example for this module is on its way.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;To complete documenting examples and tutorials.&lt;/li&gt;
&lt;li&gt;Get&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11374"&gt;PR 11374&lt;/a&gt;&amp;#160;merged.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for now, looking forward for week 12.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/1005/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/1005/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=1005&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/08/05/GSoC-week-12.html</guid>
      <title>GSoC Week 12</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 05 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/08/05/GSoC-week-12.html</link>
      <description>&lt;p&gt;This week my main work was on Featherstone&amp;#8217;s articulated body algorithm. I
started by prototyping what I thought his algorith might look like in python
code (the algorithm was pulled from chapter 7 of his book). With the passes
prototyped it was apparent that I would need a full description of the
kinematic tree and so I prototyped the building of the kinematic tree from a
single &amp;#8220;base&amp;#8221; body. I then went on to see what it would look like if the
kinematic tree was built during the first pass of his articulated body
algorithm and decided that keeping the two separate would result in cleaner
code.&lt;/p&gt;

&lt;p&gt;With the three passes prototyped and the kinematic tree built I started digging
into Featherstone&amp;#8217;s book to better determine the definition of each of the
variables in the algorithm. While doing this I ended up reading a second source
where Featherstone describes the articulated body algorithm and it was helpful
in furthering my understanding of the algorithm as it was a condensed summary.
I then compared the written version of the algorith in his book and this
article with the two matlab versions he has posted online and the python
version her provides a link for online. This helped me see where some terms he
includes in his book he doesn&amp;#8217;t include in his code. It also helped me to see
what code for the algorithm might look like.&lt;/p&gt;

&lt;p&gt;After working on the mock up of the passes and trying to better understand
them, I switched focus to the joint code that needs to be finished so that it
can be used in my implementation of the articulated body algorithm. This has
lead to some confusion about the design decisions that were made in the past
when putting together the joint code and this is the current stage I am sitting
at as I await feedback on some of my questions.&lt;/p&gt;

&lt;p&gt;This week I also looked over a couple of documentation PR&amp;#8217;s. One was a simple
matter of fixing some indentation and seems mostly ready to merge but the
second turned some docstrings into raw strings so they could add latex math
code. I don&amp;#8217;t know what the general stance is on the latter but I&amp;#8217;m of the
opinion that the docstrings should be human readable since people may actually
look through the code for them or hope that help(function) provides something
useful. In this case the latex math code is cluttered and would be better off
in .rst files where people are only going to be reading the rendered version.
On that PR I am awaiting response from someone with sympy to see if this is
indeed prefered.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;Hopefully I&amp;#8217;ll recieve some feedback about the joints and Featherstone&amp;#8217;s method
so I can keep moving forward with these. In the mean time there are a few other
bits of code I will need to complete that the algorithm uses that is not
directly related to my questions. If I finish these tasks before recieving
feedback I will move forward with changing the joint code as I think would be
best.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) [WIP] Added system.py to physics/mechanics &lt;a href="https://github.com/sympy/sympy/pull/11431"&gt;PR
  #11431&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Intendation fixes &amp;#8211; sympy/concrete/summations.py &lt;a href="https://github.com/sympy/sympy/pull/11473"&gt;PR
  #11473&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Adjustments to Legendre, Jacobi symbols docstrings &lt;a href="https://github.com/sympy/sympy/pull/11474"&gt;PR
  #11474&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] FeatherstonesMethod &lt;a href="https://github.com/sympy/sympy/pull/11415"&gt;PR
  #11415&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Tenth-Week</guid>
      <title>GSoC Tenth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Fri, 05 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Tenth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;This week, I had been working on implementaion of &lt;code class="highlighter-rouge"&gt;Union&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Contains&lt;/code&gt; in &lt;a href="https://github.com/symengine/symengine/pull/1053"&gt;this&lt;/a&gt; PR. &lt;br /&gt;
Our &lt;code class="highlighter-rouge"&gt;Set::contains&lt;/code&gt; function has been changed from :&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;virtual bool contains(const RCP&amp;lt;const Basic&amp;gt; &amp;amp;a) const = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;virtual RCP&amp;lt;const Boolean&amp;gt; contains(const RCP&amp;lt;const Basic&amp;gt; &amp;amp;a) const = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And these functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;virtual bool is_subset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const = 0;
virtual bool is_proper_subset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const = 0;
virtual bool is_superset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const = 0;
virtual bool is_proper_superset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;have been changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;bool is_subset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const
{
    return eq(*this-&amp;gt;set_intersection(o), *this);
}
bool is_proper_subset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const
{
    return not eq(*this, *o) and this-&amp;gt;is_subset(o);
}
bool is_superset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const
{
    return o-&amp;gt;is_subset(rcp_from_this_cast&amp;lt;const Set&amp;gt;());
}
bool is_proper_superset(const RCP&amp;lt;const Set&amp;gt; &amp;amp;o) const
{
    return not eq(*this, *o) and this-&amp;gt;is_superset(o);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;depending solely on &lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the &lt;code class="highlighter-rouge"&gt;SymEngine::set_union(const set_set &amp;amp;in, bool solve = true)&lt;/code&gt; has been defined which will create a &lt;code class="highlighter-rouge"&gt;Union&lt;/code&gt; object with &lt;code class="highlighter-rouge"&gt;in&lt;/code&gt; if it is not solvable, or will do union operation on all of them.
&lt;br /&gt;
Our &lt;code class="highlighter-rouge"&gt;Union&lt;/code&gt; class has &lt;code class="highlighter-rouge"&gt;std::set&lt;/code&gt; of &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; to store the different Set containers which can&amp;#8217;t be unified into one single container.
&lt;br /&gt;
Apart from it, the &lt;code class="highlighter-rouge"&gt;set_intersection&lt;/code&gt; ans &lt;code class="highlighter-rouge"&gt;set_union&lt;/code&gt; virtual functions have been restructured to handle other &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; types case by case.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=780</guid>
      <title>GSoC Week 10</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Mon, 01 Aug 2016 07:31:06 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/08/01/gsoc-week-10/</link>
      <description>&lt;p&gt;Started off this week by continuing my work on &lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;. I added support for singular initial conditions in multiplication and made some amendments in addition too. They now can return a Holonomic function with singular initial condition. The input functions can have singular initial condition both or one of them can have singular one and the other one with ordinary initial condition.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
# one function have singular initial condition and the other have ordinary.
In [4]: expr_to_holonomic(x) + expr_to_holonomic(sqrt(x))
Out[4]: HolonomicFunction((1/2) + (-x/2)Dx + (x**2)Dx**2, x), {1/2: [1], 1: [1]}

In [5]: _4.to_expr()
Out[5]: &amp;#8730;x + x

In [6]: expr_to_holonomic(x) * expr_to_holonomic(sqrt(x))
Out[6]: HolonomicFunction((-3/2) + (x)Dx, x), {3/2: [1]}

In [7]: _6.to_expr()
Out[7]:
 3/2
x

# both have singular initial conditions.
In [9]: expr_to_holonomic((x)**(S(1)/3)) + expr_to_holonomic(sqrt(x))
Out[9]: HolonomicFunction((1/6) + (x/6)Dx + (x**2)Dx**2, x), {1/3: [1], 1/2: [1]}

In [10]: _9.to_expr()
Out[10]:
3 ___
&amp;#9586;&amp;#9585; x  + &amp;#8730;x
In [11]: expr_to_holonomic((x)**(S(1)/3))*expr_to_holonomic(sqrt(x))
Out[11]: HolonomicFunction((-5/6) + (x)Dx, x), {5/6: [1]}

In [12]: _11.to_expr()
Out[12]:
 5/6
x
&lt;/pre&gt;
&lt;p&gt;I found some problems in coding because of storing these initial conditions in two different attributes. So I merged them to a single attribute and instead added methods to check which one is stored and refactored the existing code using it.&lt;/p&gt;
&lt;p&gt;I opened a new PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11451"&gt;#11451&lt;/a&gt;&amp;#160;majorly focused on adding singular initial conditions to the result of &lt;code&gt;.expr_to_holonomic()&lt;/code&gt;&amp;#160;when necessary. At first I added it in converting polynomials. Here are some examples:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [14]: expr_to_holonomic(3*x**3+4*x**2)
Out[14]: HolonomicFunction((-9*x - 8) + (3*x**2 + 4*x)Dx, x), {2: [4, 3]}

In [15]: _14.to_expr()
Out[15]:
 2
x &amp;#8901;(3&amp;#8901;x + 4)

In [16]: expr_to_holonomic(x)
Out[16]: HolonomicFunction((-1) + (x)Dx, x), {1: [1]}

In [17]: _16.to_expr()
Out[17]: x
&lt;/pre&gt;
&lt;p&gt;I also a found a bug in &lt;code&gt;.to_hyper()&lt;/code&gt;&amp;#160;when the recurrence relation has order &lt;code&gt;0&lt;/code&gt;. Added its fix too. Earlier the output also considered negative exponents which weren&amp;#8217;t needed.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
# previously
In [18]: expr_to_holonomic(y*x, x).integrate(x).to_expr()
Out[18]:
 2
x &amp;#8901;y
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + C&amp;#8321;
 2
# after fix
In [19]: expr_to_holonomic(y*x, x).integrate(x).to_expr()
Out[19]:
 2
x &amp;#8901;y
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
 2  

&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What Next:&lt;/p&gt;
&lt;p&gt;&lt;/strong&gt;I hope to add singular initial conditions to more types of functions in &lt;code&gt;.expr_to_holonomic()&lt;/code&gt;.&lt;br /&gt;
&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/780/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/780/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=780&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/08/01/Multivariate-Polynomails</guid>
      <title>Multivariate Polynomials</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Mon, 01 Aug 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/08/01/Multivariate-Polynomails/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;After college has started, work has been slower than usual. Last week I finally wound up Rational Polynomials in &lt;a href="https://github.com/symengine/symengine/pull/1028"&gt;#1028&lt;/a&gt;. Some minor changes still remain in some parts of the code. Most of the changes left are mainly related to code duplication, and will be fixed by writing their templated versions.&lt;/p&gt;

&lt;h3 id="multivariate-polynomials"&gt;Multivariate Polynomials&lt;/h3&gt;

&lt;p&gt;I started off by reading and understanding how the multivariate class is implemented currently in SymEngine. It was developed by the UC Davis team as a part of their course project. The basic idea is pretty simple. It still is a sparse representation and maps from a vector (representing the powers of each generator in the monomial) to the non-zero coefficient multiplied to it. We use an unordered map instead of the ordered map used in the univariate counterpart. The choice does make some sense, as deciding order between two monomials is subjective and does not make sense (for eg. which is larger &lt;code class="highlighter-rouge"&gt;x**2*y&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;x*y**2&lt;/code&gt;) Even if we define a custom ordering, there are no real benefits I could think of that it would provide.&lt;/p&gt;

&lt;p&gt;On a side note, it kind of makes me think why we have stuck to the ordered map implementation for our univariate polynomials. The places it offers benefits are &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;mul&lt;/code&gt; (in some ways) I worked with ordered maps, as that was the implementation the initial polynomial class was built on. I&amp;#8217;m also wondering if it is healthy to use two different implementations for both the polynomial types, univariate and multivariate. This needs to be discussed.&lt;/p&gt;

&lt;p&gt;Right now, I&amp;#8217;m basically refactoring most of the code written in the multivariate class, so that it matches the API more or less from the univariate case. Some functions have been re-written and some unnecessary storage within the polynomials have been removed. Initially, I thought I will stick with the same container based approach I used in the univariate case. This proves to be non trivial for the multivariate case. So, after some discussion with Isuru, we decided to stick with different implementations for SymEngine polynomials and Piranha polynomials, as combining code was not easy. The current work is in &lt;a href="https://github.com/symengine/symengine/pull/1049"&gt;#1049&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="future-work"&gt;Future Work&lt;/h3&gt;

&lt;p&gt;A lot is on my plate right now. Some of the work I plan to finish by the end of the next two weeks are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Finish up the refactoring of multivariate polynomials, and make their interaction with univariate polynomials as seamless as possible&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Introduce wrappers for piranha polynomials to be used as multivariate polynomials within SymEngine&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fix up the remainder of rational polynomials, and template code wherever possible to remove code duplicates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write conversions from &lt;code class="highlighter-rouge"&gt;Basic&lt;/code&gt; to multivariate polynomials, which will finish up one part of the coercion framework as proposed by Isuru&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Off to work!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-10</guid>
      <title>Coding Period Week 10</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Sat, 30 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-10/</link>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;eliminate() continue:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;issue &lt;a href="https://github.com/sympy/sympy/issues/2720"&gt;#2720&lt;/a&gt; : We need some kind of eliminate function, like &lt;a href="http://reference.wolfram.com/mathematica/ref/Eliminate.html"&gt;http://reference.wolfram.com/mathematica/ref/Eliminate.html&lt;/a&gt;. See also &lt;a href="http://stackoverflow.com/q/20826969/161801"&gt;http://stackoverflow.com/q/20826969/161801 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I am trying to use &lt;code class="highlighter-rouge"&gt;subs&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; to get answer. May be one can use &lt;code class="highlighter-rouge"&gt;replace&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;xreplace&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;match&lt;/code&gt; to eliminate some kind of same sub expression.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There can be ans in &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; when we use &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt;. So there should be a technique to handle it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Still need some good idea and technique. WIP.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Output of solveset should be of one type:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Amit discussed about it. Solution we see in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; should be in one type of set. Right now we may have solution in &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Complement&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersection&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;. So there would be problem for user to handle these many solution type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think there should be something that separate &lt;code class="highlighter-rouge"&gt;Complements&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Intersections&lt;/code&gt;,&lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; and main solution in &lt;code class="highlighter-rouge"&gt;Finiteset&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;E.g. if solveset solution is &lt;code class="highlighter-rouge"&gt;Intersection(Complement(FiniteSet(x), {y}), {z})&lt;/code&gt; then
soln : &lt;code class="highlighter-rouge"&gt;FiniteSet(x)&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;x != {y}&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;intersect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue Simplified Trig soln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;According to the &lt;a href="https://github.com/sympy/sympy/pull/11188#issuecomment-234789616"&gt;Harsh comments/review&lt;/a&gt; I modified the PR. Now it seems it is
returning more simplified solution( &lt;a href="https://github.com/sympy/sympy/pull/11188/commits/beaac312f03819bd7221887eb2b4cbe5d49bed5e#diff-85baa04bbf4e1dfd9128782738e45424R1141"&gt;one case is here&lt;/a&gt;) .&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To understand the changes I did in the &lt;code class="highlighter-rouge"&gt;_solve_trig&lt;/code&gt; method, one should check &lt;a href="https://gist.github.com/Shekharrajak/17fdcd2320f572fc9fc8674823137e20"&gt;this gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see the advantage of imageset union, One good example is in &lt;a href="https://gist.github.com/Shekharrajak/a5efc840d9a7d3062289f2d9c5f20b16"&gt;this gist&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=985</guid>
      <title>GSoC Week 10</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 29 Jul 2016 11:20:44 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/29/gsoc-week-10/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been ten weeks into the coding period. I had a meeting with Jason on 25th of this month. We discussed many new changed on the API that I had implemented before this week. Now, the beam bending module is almost ready to solve beam bending problems.&lt;/p&gt;
&lt;p&gt;Let us see how to solve a beam bending problem using this module.&lt;/p&gt;
&lt;p&gt;Problem Statement :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Loaded beam.svg" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Loaded_beam.svg/650px-Loaded_beam.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;The deflection is restricted at the end of the beam.&lt;/p&gt;
&lt;p&gt;Solution :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam

&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol, Piecewise
 
&amp;gt;&amp;gt;&amp;gt; x = Symbol('x')

&amp;gt;&amp;gt;&amp;gt; E = Symbol('E')

&amp;gt;&amp;gt;&amp;gt; I = Symbol('I')

&amp;gt;&amp;gt;&amp;gt; b = Beam(4, E, I)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(value=-9, start=4, order=-1)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(value=-3, start=0, order=-1)

&amp;gt;&amp;gt;&amp;gt; b.apply_load(order=0, start=2, value=6)

&amp;gt;&amp;gt;&amp;gt; b.bc_deflection = [(4, 0)]

&amp;gt;&amp;gt;&amp;gt; b.boundary_conditions
 {'deflection': [(4, 0)], 'moment': [], 'slope': []}

&amp;gt;&amp;gt;&amp;gt; b.load
 -3*SingularityFunction(x, 0, -1) + 6*SingularityFunction(x, 2, 0) - 9*SingularityFunction(x, 4, -1)

&amp;gt;&amp;gt;&amp;gt; b.shear_force()
 -3*SingularityFunction(x, 0, 0) + 6*SingularityFunction(x, 2, 1) - 9*SingularityFunction(x, 4, 0)

&amp;gt;&amp;gt;&amp;gt; b.bending_moment()
 3*SingularityFunction(x, 0, 1) - 3*SingularityFunction(x, 2, 2) + 9*SingularityFunction(x, 4, 1)

&amp;gt;&amp;gt;&amp;gt; b.slope()
 (3*SingularityFunction(x, 0, 2)/2 - SingularityFunction(x, 2, 3) + 9*SingularityFunction(x, 4, 2)/2 - 7)/(E*I)

&amp;gt;&amp;gt;&amp;gt; b.deflection()
 (-7*x + SingularityFunction(x, 0, 3)/2 - SingularityFunction(x, 2, 4)/4 + 3*SingularityFunction(x, 4, 3)/2)/(E*I)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the user wants to represent the deflection in the piecewise form, then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b.deflection().rewrite(Piecewise)
 (-7*x + Piecewise((x**3, x &amp;gt; 0), (0, True))/2
 + 3*Piecewise(((x - 4)**3, x - 4 &amp;gt; 0), (0, True))/2
 - Piecewise(((x - 2)**4, x - 2 &amp;gt; 0), (0, True))/4)/(E*I)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next week&amp;#160;&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Add the end argument in the apply_load method.&lt;/li&gt;
&lt;li&gt;Add Sphinx documentations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/985/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/985/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=985&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/29/GSoC-week-11.html</guid>
      <title>GSoC Week 11</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 29 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/29/GSoC-week-11.html</link>
      <description>&lt;p&gt;Somehow I think I was off by a week. I think last week&amp;#8217;s blog post covers week
9 and 10 and this week&amp;#8217;s covers week 11. This week I created a full draft for
all components of the &lt;code class="highlighter-rouge"&gt;SymbolicSystem&lt;/code&gt; class that will take the place of a
equations of motion generator &amp;#8220;base class&amp;#8221; that was discussed in my project
proposal. I began by creating all of the docstrings for the class followed by
the test code. With the documentation and test code written it was a simple
matter to finish off the code for the class itself. Lastly I added
documentation to two places in sympy, one place contains the autogenerated
documentation from the docstrings and the other place I adapted an example from
pydy to show how to use the new class.&lt;/p&gt;

&lt;p&gt;After working on &lt;code class="highlighter-rouge"&gt;SymbolicSystem&lt;/code&gt; I decided to try to finish off an old PR of
mine regarding the init_printing code that Jason and I had discussed at Scipy.
The idea was to build separate dictionaries to pass to the different printers
in ipython based on the parameters that the specific printers take. The idea
was to find this information using inspect.getargs(). The problem arose when
trying to implement this solution because each separate printer has an expr
argument and a **settings argument and the different possible paramters are
processed internally by the printer. This means that there would not be an
elegant way to build dictionaries for each printer.&lt;/p&gt;

&lt;p&gt;The next thing I worked on this week was looking into Jain&amp;#8217;s version of the
order(N) method as suggested last week. When I started looking over his book,
however, I found that uses a rather different set of notion than Featherstone
and had some additional terms. I have decided to move forward with
Featherstone&amp;#8217;s method due to the summer coming to an end and I am already
familiar with his version of the method. To that end I reread the first part of
chapter 7 in Featherstone&amp;#8217;s book where he discusses the articulated body
method.&lt;/p&gt;

&lt;p&gt;I reviewed two PR&amp;#8217;s this week. This work was rather quick as they were simply
documentation additions. I verified the method docstrings matched what the
mehtod actually does and that the modual docstring included the different
functions present in the file. Determining that they were correct I gave the +1
to merge and they have both since been merged.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;The plan for next week is to focus entirely on the order(N) articulated body
method of forming the equations of motion. I plan on writing the three passes
for the method as if I have all of the information and methods I need in order
to make it work. I expect this to be the best way to determine what additional
code I will need in addition to finding my weak points in how well I understand
the method. Once I have a skeleton of the of how the algorithm is supposed to
work I will stop working directly on the algorithm itself and start working on
the peripheral code such as the joints and body code or spatial vector
processing methods.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Open) [WIP] Added system.py to physics/mechanics &lt;a href="https://github.com/sympy/sympy/pull/11431"&gt;PR
  #11431&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added docstrings to delta and mid property methods &lt;a href="https://github.com/sympy/sympy/pull/11432"&gt;PR
  #11432&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Merged) Added top-level docstring for singularities.py &lt;a href="https://github.com/sympy/sympy/pull/11440"&gt;PR
  #11440&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Ninth-Week</guid>
      <title>GSoC Ninth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Ninth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previous week I had implemented the &lt;strong&gt;Shoup&amp;#8217;s Algorithm&lt;/strong&gt; in &lt;a href="https://github.com/symengine/symengine/pull/1045"&gt;this&lt;/a&gt; PR. During the review we came to realise that it is better to use &lt;code class="highlighter-rouge"&gt;unsigned int&lt;/code&gt; instead of &lt;code class="highlighter-rouge"&gt;integer_class&lt;/code&gt; because we didn&amp;#8217;t need big numbers. 
&lt;br /&gt;&lt;br /&gt;
Working on the same PR, I found a bug in &lt;code class="highlighter-rouge"&gt;negate&lt;/code&gt; and similar function where we were doing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;for (auto &amp;amp;a : dict_) {
  a *= -1;
  a += modulo_;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here: if the &lt;code class="highlighter-rouge"&gt;dict_&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;[0, 0, 10]&lt;/code&gt;, it will negate to &lt;code class="highlighter-rouge"&gt;[11, 11, 1]&lt;/code&gt; in &lt;code class="highlighter-rouge"&gt;GF(11)&lt;/code&gt;. So, it was needed to add a check when the value is &lt;code class="highlighter-rouge"&gt;0&lt;/code&gt;. So, the method was changed to:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;for (auto &amp;amp;a : dict_) {
  a *= -1;
  if (a != 0_z)
    a += modulo_;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Along with it I was working on the &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt; &lt;a href="https://github.com/symengine/symengine/pull/1036"&gt;PR&lt;/a&gt; and it eventually got merged. It introduced &lt;strong&gt;Zassenhaus&amp;#8217;s algorithm&lt;/strong&gt; and &lt;code class="highlighter-rouge"&gt;gf_factor()&lt;/code&gt; function. In coming days, we will have to change &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt; to switch between &lt;code class="highlighter-rouge"&gt;gf_zassenhaus&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;gf_shoup&lt;/code&gt; according to the degree of polynomial.
&lt;br /&gt;&lt;br /&gt;
We made one more design change, we changed the factor container from &lt;code class="highlighter-rouge"&gt;std::pair&amp;lt;GaloisFieldDict, integer_class&amp;gt;&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;std::pair&amp;lt;GaloisFieldDict, unsigned&amp;gt;&lt;/code&gt; because we didn&amp;#8217;t need large numbers as power.
&lt;br /&gt;&lt;br /&gt;
Then I started working on change of base class of &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class from &lt;code class="highlighter-rouge"&gt;UPolyBase&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;UIntPolyBase&lt;/code&gt;, this needed implementation of &lt;code class="highlighter-rouge"&gt;eval&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;multi_eval&lt;/code&gt; method, then I implemented the iterator for &lt;code class="highlighter-rouge"&gt;GaloisField&lt;/code&gt; class and the &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt; method. The &lt;a href="https://github.com/symengine/symengine/pull/1047/files"&gt;PR&lt;/a&gt; is under review.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=663</guid>
      <title>GSoC Week 8 and 9</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 24 Jul 2016 18:28:08 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/07/24/gsoc-week-8-and-9/</link>
      <description>&lt;p&gt;I couldn&amp;#8217;t write a blog post last week so including progress of week 8 and 9 both here.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Week 8&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;I continued working on the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11360"&gt;#11360&lt;/a&gt;. We added functionality to store a different type of initial condition for regular singular points other than the usual &lt;code&gt;[y(0), y'(0), ...]&lt;/code&gt;. The exact format is described &lt;a href="https://github.com/sympy/sympy/blob/master/sympy/holonomic/holonomic.py#L354"&gt;here&lt;/a&gt;&amp;#160;in master, though it is changed to a more elegant form in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;.&amp;#160;This type of initial condition provides more information at regular singular points and is helpful in converting to expressions. Examples on how to use it:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [22]: expr_to_holonomic(sin(x)/x**2, singular_ics={-1: [1, 0, -1]}).to_expr()
Out[22]:
sin(x)
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
   2
  x
&lt;/pre&gt;
&lt;p&gt;I also added method to compute this type of initial condition for algebraic functions of the form &lt;code&gt;P^r&lt;/code&gt;, for some Polynomial &lt;code&gt;P&lt;/code&gt;&amp;#160;and a Rational Number &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [25]: expr_to_holonomic(sqrt(x**2+x))
Out[25]: HolonomicFunction((-x - 1/2) + (x**2 + x)Dx, x), {1/2: [1]}

In [26]: _25.to_expr()
Out[26]:
     _______
&amp;#8730;x&amp;#8901;&amp;#9586;&amp;#9585; x + 1
&lt;/pre&gt;
&lt;p&gt;After that I made some changes in `to_meijerg()` to return the polynomial itself if the `meijerg` function represents a polynomial instead of raising `NotImplementedError`.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [40]: expr_to_holonomic(4*x**3 + 2*x**2, lenics=3).to_meijerg().expand()
Out[40]:
   3      2
4&amp;#8901;x  + 2&amp;#8901;x
&lt;/pre&gt;
&lt;p&gt;I also added code to return the general solution in `_frobenius()` if none of the roots of indicial equation differ by an integer.&lt;/p&gt;
&lt;h1&gt;Week 9&lt;/h1&gt;
&lt;p&gt;I wasn&amp;#8217;t able to do much this week because my college started. I travelled back and had some college related stuff to do.&lt;/p&gt;
&lt;p&gt;I opened &lt;a href="https://github.com/sympy/sympy/pull/11422"&gt;#11422&lt;/a&gt;&amp;#160;and&amp;#160;first added a basic method to determine the domain for polynomial coefficients in the differential equation.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [77]: expr_to_holonomic(sqrt(y*x+z), x=x, lenics=2).to_expr()
Out[77]:
  _________
&amp;#9586;&amp;#9585; x&amp;#8901;y + z 

In [78]: expr_to_holonomic(1.1329138213*x)
Out[78]: HolonomicFunction((-1.1329138213) + (1.1329138213*x)Dx, x), f(0) = 0
&lt;/pre&gt;
&lt;p&gt;Then I added support for the new type of initial condition on regular singular points in &lt;code&gt;.integrate()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [83]: expr_to_holonomic(sin(x)/x**3, singular_ics={-2: [1, 0, -1]}).integrate(x).to_expr()
Out[83]:
 &amp;#9115; 2                          &amp;#9118;
-&amp;#9117;x &amp;#8901;Si(x) + x&amp;#8901;cos(x) + sin(x)&amp;#9120;
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
                 2
              2&amp;#8901;x               

&lt;/pre&gt;
&lt;p&gt;Also added support for the same in addition.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [6]: expr_to_holonomic(sqrt(x)) + expr_to_holonomic(sqrt(2*x))
Out[6]: HolonomicFunction((-1/2) + (x)Dx, x), {1/2: [1 + sqrt(2)]}

In [7]: _6.to_expr()
Out[7]: &amp;#8730;x&amp;#8901;(1 + &amp;#8730;2)
&lt;/pre&gt;
&lt;p&gt;I plan to continue my work on this PR and add more support for this initial condition.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/663/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/663/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=663&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=416</guid>
      <title>GSoC Week 9 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sun, 24 Jul 2016 18:26:27 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/24/gsoc-week-9-progress/</link>
      <description>&lt;p&gt;In the &lt;a href="https://rajithsays.wordpress.com/2016/07/16/gsoc-week-8-progress/"&gt;last blog post&lt;/a&gt; I reported that lambdify function was fully wrapped. Yes, that&amp;#8217;s what I thought at the time! But it did indeed dragged on quite a bit, requiring many changes, which were very educative for me in terms of how Ruby looks at user experience. Several changes were done, including structural changes on calling lambdify, and for supporting older Ruby versions. The really interesting and long discussions on this can be viewed in the &lt;a href="https://github.com/symengine/symengine.rb/pull/61" target="_blank"&gt;PR 61&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apart from that, simultaneously I started reading and exchanging ideas on exception handling. It was agreed that in the C wrappers, an error code to be returned, which can be accessed from the Ruby wrapper, which in turn can raise a Ruby exception. The preliminary model can be seen in &lt;a href="https://github.com/symengine/symengine/pull/1044" target="_blank"&gt;PR 1044&lt;/a&gt; in SymEngine and &lt;a href="https://github.com/symengine/symengine.rb/pull/64" target="_blank"&gt;PR 64&lt;/a&gt; in SymEngine Ruby wrapper.&lt;/p&gt;
&lt;p&gt;Right now any exception is caught and sent to the Ruby Wrapper with an error code of -1, which raises a generic Runtime Error in Ruby. Although not very informative, this is helpful in prevention of crashing the Ruby runtime.&lt;/p&gt;
&lt;p&gt;To illustrate, when the following code (a division by zero) is run before and after is shown.&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;pre&gt;irb(main):001:0&amp;gt; require 'symengine'
=&amp;gt; true
irb(main):002:0&amp;gt; x = SymEngine(1)
=&amp;gt; #&amp;lt;SymEngine::Integer(1)&amp;gt;
irb(main):003:0&amp;gt; y = SymEngine(0)
=&amp;gt; #&amp;lt;SymEngine::Integer(0)&amp;gt;
irb(main):004:0&amp;gt; x/y
terminate called after throwing an instance of 'Teuchos::NullReferenceError'
&amp;#160; what():&amp;#160; /home/rajith/Development/symengine/symengine/utilities/teuchos/Teuchos_RCPNode.cpp:720:

Throw number = 1

Throw test that evaluated to true: true

Teuchos::RCP&amp;lt;SymEngine::Basic const&amp;gt; : You can not call operator-&amp;gt;() or operator*() if getRawPtr()==0!

Abort caught. Printing stacktrace:

Traceback (most recent call last):

Done.
[2]&amp;#160;&amp;#160;&amp;#160; 590 abort (core dumped)&amp;#160; irb&lt;/pre&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;pre&gt;irb(main):001:0&amp;gt; require 'symengine'
=&amp;gt; true
irb(main):002:0&amp;gt; x = SymEngine(1)
=&amp;gt; #&amp;lt;SymEngine::Integer(1)&amp;gt;
irb(main):003:0&amp;gt; y = SymEngine(0)
=&amp;gt; #&amp;lt;SymEngine::Integer(0)&amp;gt;
irb(main):004:0&amp;gt; x/y
RuntimeError: Runtime Error
&amp;#160;&amp;#160; &amp;#160;from (irb):4:in `/'
&amp;#160;&amp;#160; &amp;#160;from (irb):4
&amp;#160;&amp;#160; &amp;#160;from /usr/bin/irb:11:in `&amp;lt;main&amp;gt;'
irb(main):005:0&amp;gt;&lt;/pre&gt;
&lt;p&gt;This is a good improvement overall, but as it&amp;#8217;s nicer to have a more descriptive error shown to the user, that part will be the continuation of exception handling during the 10th week.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/416/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/416/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=416&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://kshitij10496.github.io//2016/07/24/GSoC-Week-09/</guid>
      <title>GSoC Week 09 - The One with Inequalities</title>
      <author>Kshitij Saraogi(kshitij10496)</author>
      <pubDate>Sun, 24 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://kshitij10496.github.io//2016/07/24/GSoC-Week-09/</link>
      <description>&lt;p&gt;This week I worked on solving trigonometric inequalities.&lt;/p&gt;

&lt;h3 id="trigonometric-inequalities"&gt;&lt;strong&gt;Trigonometric inequalities&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The primary univariate inequality solver - &lt;code class="highlighter-rouge"&gt;solve_univariate_inequality&lt;/code&gt;,&lt;br /&gt;
depends upon the results of &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; in order to solve the given inequality.
Taking a cue from &lt;a href="https://github.com/sympy/sympy/pull/10022"&gt;PR#10022&lt;/a&gt; on incorporating &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; for inequalities, I worked on developing an approach for replacing the use of &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; 
with &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; in solving inequalities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Convert &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt;-type output from &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;list&lt;/code&gt; objects similar to that returned by &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most striking difference between both the APIs is the uniform &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; output returned by &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. 
Hence, the prime concern while transitioning from &lt;code class="highlighter-rouge"&gt;solve&lt;/code&gt; to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; should be handling the various type of solutions.&lt;/p&gt;

&lt;p&gt;Here are a few implementation ideas on the same:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FiniteSet&lt;/strong&gt; : finite number of solutions&lt;br /&gt;
Using the &lt;code class="highlighter-rouge"&gt;list&lt;/code&gt; constructor on these type of objects works extremely well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ImageSet&lt;/strong&gt; : infinite number of solutions&lt;br /&gt;
This is generally the case with trigonometric functions as most of them are periodic in nature.
We need to limit the number of solutions to be finite.&lt;br /&gt;
For this, I intend to use the a periodic interval: &lt;code class="highlighter-rouge"&gt;[0, period]&lt;/code&gt; as the basis for filtering the solution set.
This returns a simplified &lt;code class="highlighter-rouge"&gt;FiniteSet&lt;/code&gt; of solutions which can be used to solve inequalities in a restricted interval.
Following which we can generalise the output over the entire domain of the function.&lt;/p&gt;

    &lt;p&gt;A major issue here is the representation of the final solution set.&lt;br /&gt;
For example:&lt;/p&gt;

    &lt;div class="language-python highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9121;&lt;/span&gt;         &lt;span class="err"&gt;&amp;#960;&lt;/span&gt;           &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;&amp;#8901;&amp;#960;&lt;/span&gt;         &lt;span class="err"&gt;&amp;#9124;&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9122;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#9472;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#9472;&amp;#9472;&amp;#9472;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;&amp;#8714;&lt;/span&gt; &lt;span class="err"&gt;&amp;#8484;&amp;#9125;&lt;/span&gt;
&lt;span class="err"&gt;&amp;#9123;&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;            &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="err"&gt;&amp;#9126;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Currently, we do not have a &lt;code class="highlighter-rouge"&gt;Set&lt;/code&gt; object for representing this.&lt;br /&gt;
For this, we need to implement an &lt;em&gt;Indexed Union&lt;/em&gt; : &lt;code class="highlighter-rouge"&gt;Union(X(a) for a in I)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;We can symbolically represent the above solution as &lt;code class="highlighter-rouge"&gt;BigUnion(Interval(2*n*pi + pi/2, 2*n*pi + 3*pi/2), n, S.Intgers)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;After thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, this week my &lt;a href="https://github.com/sympy/sympy/pull/11277"&gt;PR#11277&lt;/a&gt; on periodicity got merged finally.
I have updated the corresponding &lt;a href="https://github.com/sympy/sympy/pull/11141"&gt;PR#11141&lt;/a&gt; which has been stalled for some time now.
Hopefully, it will get merged soon.&lt;/p&gt;

&lt;p&gt;The next week I will devote my time to the implementation part of solving inequalities.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//2016/07/23/Rational-Polynomials-ft-Bugs</guid>
      <title>Rational Polynomials ft. Bugs</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Sat, 23 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//2016/07/23/Rational-Polynomials-ft-Bugs/</link>
      <description>&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;p&gt;Sorry I haven&amp;#8217;t been able to report my work for about two weeks now. Things have become slower mainly due to the fact that my university has resumed and along with it a heavily packed timetable and assignments in the first week don&amp;#8217;t help. I also caught a bad fever the past week which really hindered my progress, but it&amp;#8217;s dying down and I will resume my work with full vigor eventually.&lt;/p&gt;

&lt;p&gt;The work I did do has been summarized below.&lt;/p&gt;

&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;/h3&gt;

&lt;p&gt;While writing the code for the rational polynomials, as mentioned in the last blogpost, I encountered various bugs. Some of them caused other bugs to be exposed, which took a lot of time for me to debug.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;pow(Poly, uint)&lt;/code&gt; was throwing a segmentation fault. After digging in and wasting more than four hours on unrelated checks I figured out that the &lt;code class="highlighter-rouge"&gt;eq&lt;/code&gt; inside the polynomial class was incorrect. Without checking whether the other parameter was a &lt;code class="highlighter-rouge"&gt;Poly&lt;/code&gt; or not, I was &lt;code class="highlighter-rouge"&gt;static_cast&lt;/code&gt;ing it which posed a problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The happiness was shortlived, as the bug persisted. On further inspection I found that the polynomial was being treated as a number! This was because &lt;code class="highlighter-rouge"&gt;is_a_Number&lt;/code&gt; relied on typecodes, and the polynomial types were defined before the &lt;code class="highlighter-rouge"&gt;NUMBERWRAPPER&lt;/code&gt; class, which deemed them numbers. The fix for this was simple, just move the polynomial type code definitions after the numbers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class="highlighter-rouge"&gt;pow&lt;/code&gt; tests pass, but what&amp;#8217;s this? All the &lt;code class="highlighter-rouge"&gt;MSVC&lt;/code&gt; builds on appveyor fail. They all fail a &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; test. Wow, I had not changed any code related to &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; at all, how does it affect that specific test and only on the &lt;code class="highlighter-rouge"&gt;MSVC&lt;/code&gt; compiler? This kept me wondering and looking at the source for a day. Finally, I had to login to the VM of appveyor running the tests. I was not familiar with windows development environment at all, which was the reason I failed a couple of times before I gave up debugging. The next morning I woke up determined to fix this Windows bug, I set the break points in Visual Studio and started the code execution. I found it! It was a bug in the &lt;code class="highlighter-rouge"&gt;CoeffVisitor&lt;/code&gt; itself. The code for the &lt;code class="highlighter-rouge"&gt;coeff&lt;/code&gt; function was incomplete. Why wasn&amp;#8217;t this bug being captured before? Probably because the previous change (in the typecodes) caused a reordering in  a map, which no other compiler was doing. Do read up &lt;a href="https://github.com/symengine/symengine/pull/1033#issuecomment-232973025"&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An appveyor build was failing for unknown reason, which had to be shifted to allowed failures&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was basically the components of &lt;a href="https://github.com/symengine/symengine/pull/1033"&gt;#1033&lt;/a&gt;. Less quantity of changes, but really important none the less.&lt;/p&gt;

&lt;h3 id="rational-polynomials"&gt;Rational Polynomials&lt;/h3&gt;

&lt;p&gt;The work with rational polynomials continues. I had underestimated the amount of work required, and I also feel that I should have broken down rational polynomials into three parts each, just like integer polynomials. Right now, the work continues in &lt;a href="https://github.com/symengine/symengine/pull/1028"&gt;#1028&lt;/a&gt;, but it&amp;#8217;s soon going to become huge with all varieties of changes.&lt;/p&gt;

&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;

&lt;p&gt;I finally benchmarked &lt;a href="https://github.com/sakra/cotire"&gt;cotire&lt;/a&gt; to see how much speedup it was providing to SymEngine builds. &lt;a href="https://github.com/symengine/symengine/issues/1023"&gt;Here&lt;/a&gt; is the short summary of the speedups obtained, and the work to include it is in &lt;a href="https://github.com/symengine/symengine/pull/1041"&gt;#1041&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also a small bug was present in our flint and gmp rational number wrappers. We were not canonicalizing on construction from two integers. It was fixed in &lt;a href="https://github.com/symengine/symengine/pull/1031"&gt;#1031&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Laters!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=942</guid>
      <title>GSoC Week 9</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 22 Jul 2016 19:48:05 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/22/gsoc-week-9/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been nine weeks into the coding period. I had a meeting with Jason on 17&lt;sup&gt;th&amp;#160;&lt;/sup&gt; of this month. He was attending the code sprints at Scipy and I am very glad to meet other Sympy developers.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I have closed the PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11266"&gt;11266&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11374"&gt;11374&lt;/a&gt;, I have removed the use of mechanics Point.&lt;/li&gt;
&lt;li&gt;I have made boundary_conditions as property and the inputs are no longer as **kwargs. Each of the inputs namely moment, slope and deflection are initiated as an empty list. But I have some doubts regarding the behaviour of this method. I feel that this should be used only in the case when a full new set of boundary conditions are given as input. Since to input dynamically, there exists some methods already which would handle each of the cases explicitly. Those methods appends the new inputs whereas this method would delete the existing boundary conditions and apply the newer one. This way the property of being mutable would remain.&lt;/li&gt;
&lt;li&gt;Replaced the solve function by linsolve. Since solve is going to be depreciated in the mear future.&lt;/li&gt;
&lt;li&gt;I have added the docstrings for slope and deflection method as well as for the beam class.&lt;/li&gt;
&lt;li&gt;In deflection method, I have added a new case where if there is no slope boundary condition but there is deflection boundary conditions, it would give operate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I will be working on adding a documentation file for this beam bending problem module exclusively.&lt;/li&gt;
&lt;li&gt;Add some more test for checking the corner cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/942/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/942/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=942&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://jbm950.github.io//2016/07/22/GSoC-week-8-9.html</guid>
      <title>GSoC Week 8 &amp; 9</title>
      <author>James Milam (jbm950)</author>
      <pubDate>Fri, 22 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://jbm950.github.io//2016/07/22/GSoC-week-8-9.html</link>
      <description>&lt;p&gt;Last week I did not end up writing a blog post and so I am combining that
week&amp;#8217;s post with this week. Last week I attended the SciPy 2016 conference and
was able to meet my mentor, and many other contributers to SymPy, in person. I
was also able to help out with the Pydy tutorial.  During this time at the
conference (and this current week) I was able to flesh out the remaining
details on the different portions of the project. I have updated &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
#353&lt;/a&gt; to reflect the api decisions for
SymbolicSystem (previously eombase.EOM).&lt;/p&gt;

&lt;p&gt;In line with trying to put the finishing touches on implementation details
before diving in to code, Jason and I met with someone who has actually
implemented the algorithm in the past to help us with details surrounding
Featherstone&amp;#8217;s method. He also pointed me to a different description of the
same algorithm that may be easier to implement.&lt;/p&gt;

&lt;p&gt;This week I also worked on rewriting the docstrings in
physics/mechanics/body.py because I found the docstrings currently there to be
somewhat confusing. I also did a review on one of Jason&amp;#8217;s PR&amp;#8217;s where he reduces
the amount of work that *method.rhs() has to do when inverting the mass matrix
by pulling out the kinematical information before the inversion takes place.&lt;/p&gt;

&lt;h3 id="future-directions"&gt;Future Directions&lt;/h3&gt;

&lt;p&gt;With the work these past two weeks being focused on implementing the different
parts of the projects, I will start implementing these various parts next week.
I will first work on finishing off the SymbolicSystem object and then move
towards implementing the OrderNMethod. This work should be very straight
forward with all the work that has been put into planning the api&amp;#8217;s.&lt;/p&gt;

&lt;h3 id="prs-and-issues"&gt;PR&amp;#8217;s and Issues&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(Merged) Speeds up the linear system solve in KanesMethod.rhs() &lt;a href="https://github.com/sympy/sympy/pull/10965"&gt;PR
  #10965&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) Docstring cleanup of physics/mechanics/body.py &lt;a href="https://github.com/sympy/sympy/pull/11416"&gt;PR
  #11416&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;(Open) [WIP] Created a basis on which to discuss EOM class &lt;a href="https://github.com/pydy/pydy/pull/353"&gt;PR
  #353&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Eighth-Week</guid>
      <title>GSoC Eighth Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Eighth-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;After completing the work on &lt;code class="highlighter-rouge"&gt;gf_factor&lt;/code&gt;, I moved on to implement Gathen-Shoup&amp;#8217;s factorization algorithm. Like Zassenhaus&amp;#8217;s agorithm, it is also a probabilistic algorithm.
&lt;br /&gt;
The paper is available &lt;a href="http://www.shoup.net/papers/frobenius.pdf"&gt;here&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;First question: Why this algorithm ?&lt;/strong&gt;
&lt;br /&gt;
&amp;gt; Because, it is kind of faster than zassenhaus&amp;#8217;s algorithm.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Second question: What is &amp;#8220;kind of&amp;#8221; here ?&lt;/strong&gt;
&lt;br /&gt;
&amp;gt; Well, it is faster when a specific condition satisfies.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Its asymptotic runtime is &lt;code class="highlighter-rouge"&gt;O(n**2 + n log q).(log n)**2.loglog n&lt;/code&gt;, where &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt; is degree of polynomial and &lt;code class="highlighter-rouge"&gt;q&lt;/code&gt; is the field characteristics.
&lt;br /&gt;
In &lt;a href="https://en.wikipedia.org/wiki/&amp;#213;#Mathematical_use"&gt;&amp;#8220;Soft O&amp;#8221; notation&lt;/a&gt;, it is &lt;code class="highlighter-rouge"&gt;O~(n**2 + n log q)&lt;/code&gt;. While the cantor zassenhaus&amp;#8217;s algorithm has &lt;code class="highlighter-rouge"&gt;O~(n**2 log q)&lt;/code&gt; asymptotic runtime.
&lt;br /&gt;
So when &lt;code class="highlighter-rouge"&gt;log q&lt;/code&gt; approaches &lt;code class="highlighter-rouge"&gt;n&lt;/code&gt;, the difference is remarkable.
&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Algorithm&lt;/th&gt;
      &lt;th style="text-align: center;"&gt;Asymptotic Runtime&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Shoup&lt;/td&gt;
      &lt;td style="text-align: center;"&gt;&lt;code class="highlighter-rouge"&gt;O~(n**2)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Zassenhaus&lt;/td&gt;
      &lt;td style="text-align: center;"&gt;&lt;code class="highlighter-rouge"&gt;O~(n**3)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It also works in three parts, firstly square free factorization, then distinct degree and finally equal degree factorization.
&lt;br /&gt;
I have completed the implementation of this algorithm on &lt;a href="https://github.com/nishnik/symengine/tree/shoup_factorization"&gt;shoup_factorization&lt;/a&gt; branch.
And also, I changed the container (which stores factors) type to &lt;code class="highlighter-rouge"&gt;set&lt;/code&gt;.&lt;br /&gt;
Will send a PR soon.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-9</guid>
      <title>Coding Period Week 9</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-9/</link>
      <description>&lt;p&gt;&lt;strong&gt;Some points regarding trigonometric and inverse trigonometric functions in solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are many issues in solveset &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt;.More inverse trigonometric formula and trigonometric identities should be defined/added or improved.
Also &lt;code class="highlighter-rouge"&gt;simplify&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; and in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; methods should be improved accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some links, that is helpful to improve these functions.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Inverse_trigonometric_functions"&gt;https://en.wikipedia.org/wiki/Inverse_trigonometric_functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Proofs_of_trigonometric_identities"&gt;https://en.wikipedia.org/wiki/Proofs_of_trigonometric_identities&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://owlcation.com/stem/List-of-Inverse-Trig-Function-Identities-Integrals-and-Derivatives"&gt;https://owlcation.com/stem/List-of-Inverse-Trig-Function-Identities-Integrals-and-Derivatives&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; must be more powerful so that &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; get simplified eq. (which solves trig equation by converting them into its &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; solves the trig eq. using its &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form. There may be cases when that &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; form is complicated and solveset fail to handle that form.
There should be technique to convert that complicated form to simpler form(if possible) and then call the &lt;code class="highlighter-rouge"&gt;solveset_complex&lt;/code&gt;. That may help to improve the &lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt; method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We can use &lt;code class="highlighter-rouge"&gt;_osbornei&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;hyper_as_trig&lt;/code&gt; methods defined in &lt;code class="highlighter-rouge"&gt;simplify/fu.py&lt;/code&gt; to convert hyperbolic function to trigonometric function, then we can use &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; (we can&amp;#8217;t use &lt;code class="highlighter-rouge"&gt;trigsimp&lt;/code&gt; for hyperbolic functions).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;First need to improve basic concepts and add more identities. I opened a new PR to improve &lt;code class="highlighter-rouge"&gt;rewrite&lt;/code&gt; for trigonometric functions , PR is &lt;a href="https://github.com/sympy/sympy/pull/11424/"&gt;#11424&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;eliminate() :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;issue &lt;a href="https://github.com/sympy/sympy/issues/2720"&gt;#2720&lt;/a&gt; : We need some kind of eliminate function, like &lt;a href="http://reference.wolfram.com/mathematica/ref/Eliminate.html"&gt;http://reference.wolfram.com/mathematica/ref/Eliminate.html&lt;/a&gt;. See also &lt;a href="http://stackoverflow.com/q/20826969/161801"&gt;http://stackoverflow.com/q/20826969/161801 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It looks something related to &lt;a href="https://github.com/sympy/sympy/pull/11111/files#diff-eec0422923e8f100745c015cd8fdd6cfR1135"&gt;substitution&lt;/a&gt; function.
But they are not same. Using &lt;code class="highlighter-rouge"&gt;eliminate()&lt;/code&gt; we will try to remove the variable(s) from the each equations(not solving the eq).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plan : First choose eq that have min. variables and get the value of the variable, to be eliminated. Go further and &lt;code class="highlighter-rouge"&gt;subs&lt;/code&gt; the value to next min. variable eq., and so on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work in progress.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I found some basic issues in &lt;code class="highlighter-rouge"&gt;ComplexInfinity&lt;/code&gt; and trying to solve them in this PR &lt;a href="https://github.com/sympy/sympy/pull/11409"&gt;#11409&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;there may be many things to be added about &lt;code class="highlighter-rouge"&gt;ComplexInfinity&lt;/code&gt;, one can refer this link to implement them :
&lt;a href="http://reference.wolfram.com/language/ref/ComplexInfinity.html"&gt;http://reference.wolfram.com/language/ref/ComplexInfinity.html&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shekharrajak.github.io/Coding-Period-week-8</guid>
      <title>Coding Period Week 8</title>
      <author>Shekhar Prasad Rajak (shekharrajak)</author>
      <pubDate>Mon, 18 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://shekharrajak.github.io/Coding-Period-week-8/</link>
      <description>&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Continue - Diophantine in Solveset :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11234"&gt;11234&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For general Pythagorean diop_type (Diophantine eq type), it seems diophantine always returns parameterized solution so I did some changes in the PR. &lt;a href="https://github.com/sympy/sympy/pull/11334/commits/6af46fc35db3a74dfda78b6d8e2a0f7d4ec65afe"&gt;commit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can refer this &lt;a href="https://github.com/sympy/sympy/pull/11334#issuecomment-230334645"&gt;comment&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue Simplified Trig soln&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11188"&gt;#11188&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After some changes, the PR is ready for review.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Continue nonlinsolve :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PR &lt;a href="https://github.com/sympy/sympy/pull/11111"&gt;#11111&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Added some XFAIL test-cases of system of Trigonometric equations. &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; trig solver (&lt;code class="highlighter-rouge"&gt;solve_trig&lt;/code&gt;) is not smart enough(&lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; returns &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt;, where soln can be simply inverse trig functions using &lt;code class="highlighter-rouge"&gt;_invert&lt;/code&gt; or inverse Trigonometric functions). So &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; returns &lt;code class="highlighter-rouge"&gt;ConditionSet&lt;/code&gt; that means &lt;code class="highlighter-rouge"&gt;substitution&lt;/code&gt; is not getting soln.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is better to replace trigonometric functions or other &lt;code class="highlighter-rouge"&gt;Function&lt;/code&gt; with symbols&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(e.g. &lt;code class="highlighter-rouge"&gt;sin(x)&lt;/code&gt; &amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;u&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;sin(y)&lt;/code&gt;&amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;v&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;f(x)&lt;/code&gt;&amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;f_x&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;g(x)&lt;/code&gt; &amp;#8211;&amp;gt; &lt;code class="highlighter-rouge"&gt;g_x&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;and then solve for the symbols. After getting solution from &lt;code class="highlighter-rouge"&gt;nonlinsolve&lt;/code&gt; user can invert or do &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(e.g. solveset(Eq(sin(x), soln_u), x, domain) to get value of &lt;code class="highlighter-rouge"&gt;x&lt;/code&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ready for review.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Meanwhile :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We already know that solveset need improved &lt;code class="highlighter-rouge"&gt;invert_real&lt;/code&gt; , &lt;code class="highlighter-rouge"&gt;invert_complex&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Imageset&lt;/code&gt; Intersections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;previous work is in this PR &lt;a href="https://github.com/sympy/sympy/pull/10971"&gt;10971&lt;/a&gt;. Trying to improve them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some cases is here :&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# In 2, 4, 5 intersection is not needed.

In [1]: img = ImageSet(Lambda(n, x/n), S.Complexes)

In [2]: Intersection(img, S.Complexes)
Out[2]:
    &amp;#9127;x        &amp;#9131;
&amp;#8450; &amp;#8745; &amp;#9128;&amp;#9472; | n &amp;#8714; &amp;#8450;&amp;#9132;
    &amp;#9129;n        &amp;#9133;

In [3]: img = ImageSet(Lambda(n, x/n), S.Integers)

In [4]: Intersection(img, S.Complexes)
Out[4]:
&amp;#9127;x        &amp;#9131;    
&amp;#9128;&amp;#9472; | n &amp;#8714; &amp;#8484;&amp;#9132; &amp;#8745; &amp;#8450;
&amp;#9129;n        &amp;#9133;    

In [5]: Intersection(ImageSet(Lambda(n, 2*n*I*pi), S.Integers), S.Complexes)
Out[5]: {2&amp;#8901;&amp;#8520;&amp;#8901;&amp;#960;&amp;#8901;n | n &amp;#8714; &amp;#8484;} &amp;#8745; &amp;#8450;

# ImageSet Intersection is not implemented when inverter returns multiple values.
# here ans should be {0, 1}
In [6]: img1 = ImageSet(Lambda(n, n**2), S.Integers)

In [7]: Intersection(img1, Interval(0,2))
Out[7]:
         &amp;#9127; 2        &amp;#9131;
[0, 2] &amp;#8745; &amp;#9128;n  | n &amp;#8714; &amp;#8484;&amp;#9132;
         &amp;#9129;          &amp;#9133;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;continue..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=393</guid>
      <title>GSoC Week 8 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 16 Jul 2016 16:09:06 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/16/gsoc-week-8-progress/</link>
      <description>&lt;p&gt;When this week started, most of the work up to week 7 were done. In the first couple of days this week, code for parsing was merged, and I started looking into wrapping lambdification of SymEngine Basic expressions.&lt;/p&gt;
&lt;p&gt;This was a seemingly easy task, with two options ahead of me. One was to directly wrap C++&amp;#8217;s lambdify_double method, while the other was to create Ruby lambdas directly.&lt;/p&gt;
&lt;p&gt;After considering various aspects, and with feedback from other contributors, I decided to go ahead with writing them directly in Ruby.&lt;/p&gt;
&lt;p&gt;It is now completed, and undergoing review.&lt;/p&gt;
&lt;p&gt;The code implemented allows lamdifying SymEngine::Basic expressions with free symbols.&lt;/p&gt;
&lt;p&gt;i.e. let, f = x + y, where x and y are SymEngine::Symbols,&lt;/p&gt;
&lt;p&gt;a lambda is expected, such that it can be called, f_lambda.call(3, 4) which would return 7.&lt;/p&gt;
&lt;p&gt;For expressions with single or multiple symbols, it works as following:&lt;/p&gt;
&lt;pre&gt;f = x + y
f_lambda = SymEngine::lambdify(f, [x, y])&lt;/pre&gt;
&lt;p&gt;For expressions with a single symbol, it can be used through the to_proc method, using a &amp;amp; call.&lt;/p&gt;
&lt;pre&gt;f_diam = 2 * SymEngine::PI * r
radii = [2, 3, 4]
diams = radii.map(&amp;amp;f_diam)&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;With another day left already, I am looking at Exception Handling, which I expect to be complicated in implementing.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/393/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/393/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=393&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=841</guid>
      <title>GSoC Week 8</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Fri, 15 Jul 2016 19:47:56 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/15/gsoc-week-8/</link>
      <description>&lt;p&gt;Hello, guys. Welcome back.&amp;#160;It&amp;#8217;s been eight weeks into the coding period and this week I enjoyed a lot while working. I learned to build a list without using a loop, in case, it can be done&amp;#160;more concisely with a &lt;b&gt;&lt;em&gt;list comprehension&lt;/em&gt;&amp;#160;&lt;/b&gt;such as:&lt;/p&gt;
&lt;p&gt;Instead of doing :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In [ ]: b = []
In [ ]: for x in a:
       b.append(10 * x)
 ....:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can do :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In [ ]: b = [&lt;span class="lit"&gt;10&lt;/span&gt; &lt;span class="pun"&gt;*&lt;/span&gt;&lt;span class="pln"&gt; x &lt;/span&gt;&lt;span class="kwd"&gt;for&lt;/span&gt;&lt;span class="pln"&gt; x &lt;/span&gt;&lt;span class="kwd"&gt;in&lt;/span&gt;&lt;span class="pln"&gt; a]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I came to know about stuff , like using zip for transposing a matrix and dividing a list into groups of&lt;em&gt;&lt;strong&gt;&amp;#160;&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;n&lt;/em&gt; .&amp;#160;&lt;/strong&gt;&lt;/strong&gt;This week I had my weekly meeting with Jason and Sartaj on 13th of this month.&amp;#160;They were in&amp;#160;Austin, Texas attending &lt;a href="http://scipy2016.scipy.org/ehome/index.php?eventid=146062&amp;amp;tabid=332930&amp;amp;"&gt;Scipy 2016&lt;/a&gt;,&amp;#160;the 15th annual Scientific Computing with Python conference.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;got merged. So, now the&amp;#160;master branch is updated with a module of singularity functions which can handle almost all the mathematical operations.&lt;/li&gt;
&lt;li&gt;I have used the Singularity Functions &amp;#160;to continue developing the beam bending module at &lt;a href="https://github.com/sympy/sympy/pull/11374"&gt;PR 11374&lt;/a&gt;. I have added the following methods:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;load_as_SingularityFunction&lt;/strong&gt; &lt;/em&gt;: This is a private method which represents a PointLoad and DistributedLoad object into a Singularity Function object and stores in the load beam object attribute.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;load_distribution&lt;/strong&gt;&lt;/em&gt; : This is a public method which outputs a load distribution curve of a beam.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;shear_force :&amp;#160;&lt;/strong&gt;&lt;/em&gt;This is also a public method. It at first checks whether the moment list in boundary conditions dictionary have elements. If it has then it call the bending_moment method and then differentiate the output w.r.t to the free symbol else it just integrates the output of load_distribution method.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;bending_moment&lt;/strong&gt;&lt;/em&gt; : The initial part of this method is similar to the method shear_force. If the test passes then it integrates the load_distibution twice using contants of integrations and later the contants are solved else&amp;#160;it just integrates the output of shear_force method.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;slope&lt;/strong&gt;&lt;/em&gt; : It outputs the slope of a beam by solving the constants.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;deflection&lt;/strong&gt;&lt;/em&gt; : It outputs the elastic curve of the beam.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify the Beam Module.&lt;/li&gt;
&lt;li&gt;Add Sphinx documentations.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="entry-content"&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;
&lt;/div&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/841/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/841/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=841&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nishnik.github.io/GSoC-Seventh-Week</guid>
      <title>GSoC Seventh Week</title>
      <author>Nishant Nikhil (nishnik)</author>
      <pubDate>Wed, 13 Jul 2016 00:00:00 GMT</pubDate>
      <link>http://nishnik.github.io/GSoC-Seventh-Week/</link>
      <description>&lt;p&gt;&lt;img alt="Logo" src="https://summerofcode.withgoogle.com/static/img/summer-of-code-logo.svg" /&gt;&lt;/p&gt;

&lt;p&gt;Previous week, I had started the work on Equal degree factorization &lt;a href="https://github.com/symengine/symengine/pull/1026"&gt;here&lt;/a&gt;. Here I was storing the factors in a vector and then sorting the factors. Certik pointed out that its better to use some other data structure instead of &lt;code class="highlighter-rouge"&gt;vector&lt;/code&gt;. So I have changed the container type to &lt;code class="highlighter-rouge"&gt;set&lt;/code&gt;.
&lt;br /&gt;Then after both Distinct degree factorization and Equal degree factorization being implemented, I started to work on factoring a polynomial in finite field, this needed integrating square free factorization with these two. I worked on &lt;code class="highlighter-rouge"&gt;gf_factor()&lt;/code&gt; method. In this method we take a polynomial in a given field as input, and return all the factors and their respective powers, and polynomial&amp;#8217;s leading coefficient as output.
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-C++"&gt;GaloisFieldDict::gf_factor() const
{
  integer_class lc;
  GaloisFieldDict monic;
  gf_monic(lc, outArg(monic));
  if (monic.degree() &amp;lt; 1)
      return std::make_pair(lc, factors);
  std::vector&amp;lt;std::pair&amp;lt;GaloisFieldDict, integer_class&amp;gt;&amp;gt; sqf_list
      = monic.gf_sqf_list();
  for (auto a : sqf_list) {
      auto temp = (a.first).gf_zassenhaus();
      for (auto f : temp)
          factors.insert({f, a.second});
  }
  return factors;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a given polynomial firstly we get its monic representation and it leading coefficient. Then we find the Square free factors of the monic representation. And on each of the square free factor we run the &lt;code class="highlighter-rouge"&gt;zassenhaus&lt;/code&gt;&amp;#8217;s algorithm.
&lt;br /&gt;
I have been working on &lt;a href="https://github.com/nishnik/symengine/tree/gf_factor"&gt;this&lt;/a&gt; branch, will create a PR after the Equal degree factorization PR gets merged.
&lt;br /&gt;
Then I have started working on Shoup&amp;#8217;s algorithm for polynomial factorization, will post about it in the coming weeks.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC Week 7</guid>
      <title>GSoC Week 7</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Sun, 10 Jul 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc_week_7.html</link>
      <description>&lt;p&gt;
Hi everyone.
&lt;/p&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
Here's what we have been doing for &lt;i&gt;7th&lt;/i&gt; week of &lt;i&gt;GSoC&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Kalevi mentioned about the $LaTex$ not getting rendered on Planet Sympy website, thought it works fine on my website. Following the conversation Aaron opened issue &lt;a href="https://github.com/sympy/planet-sympy/issues/45"&gt;planet-sympy/issues/45&lt;/a&gt;, though it hasn't been fixed.
&lt;/p&gt;

&lt;p&gt;
This week we completed PR &lt;a href="https://github.com/sympy/sympy/pull/11295"&gt;#11295&lt;/a&gt; on Reidemeister Schreier algorithm. Remember the &lt;a href="https://gitter.im/sympy/GroupTheory?at=5776b220cdab7a1f4fbebd34"&gt;blog issue&lt;/a&gt; I asked on our gitter channel. Kalevi suggested to be more on the 'descriptive' side.
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;What do we do this week?&lt;/h4&gt;
Implemented the Reidemeister Schreier algorithm (shortly RS algorithm) and Titze Transformations (shortly TT) in PR #11295 . Most of the pseudo code for RS algorithm is there in the Handbook [1], perhaps majority of the time was spent working with TT. There isn't any pseudo code available for making that work, but we gathered detailed information from [1] combined with Havas Paper [2].

What issues were there?
In the both [1] and [2], there a few assumptions made, like

&lt;pre&gt;
&gt; shall assume that all relators are always cyclically reduced; that is, that
whenever a relator is changed, it is immediately replaced by its cyclic reduction.
&lt;/pre&gt;

&lt;/p&gt;

&lt;p&gt;I opened the issue &lt;a href="https://github.com/sympy/sympy/issues/11352"&gt;#11352&lt;/a&gt; regarding a typo I left in &lt;code&gt;coset_enumeration_c&lt;/code&gt;. Though I didn't expect a PR, @kritkaran94 fixed it. Perhaps a good test case which makes use of different value of &lt;code&gt;max_stack_size&lt;/code&gt; was suggested by Kalevi. One thing came back to me, "everthing is an object in Python", the fact that initially &lt;code&gt;CosetTableDefaultMaxLimit&lt;/code&gt; was a module level variable initially and we changed it to &lt;code&gt;CosetTable.CosetTableDefaultMaxLimit&lt;/code&gt;, module is an object so is a &lt;code&gt;class&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;What hasn't been done?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;No testing for a few of techniques, for example currently no tests exist for &lt;code&gt;elimination_technique_2&lt;/code&gt;, which is a variant of the elimination procedures.
&lt;li&gt;TT doesn't produce the best possible result.
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
Though doing this seemed easy at first. But I didn't wanted to apply &lt;code&gt;identity_cyclic_reduction&lt;/code&gt; every change as there can be a few instance where it not necessary to do this, perhaps because of the property of &lt;i&gt;words&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
The good thing about this week was that I could now understand the limitations that will remain after my GSoC project. The scope of Computational Group Theory is more than what I expected. Apart from that I will be leaving for my college this week stars from &lt;i&gt;15th&lt;/i&gt; of &lt;i&gt;July&lt;/i&gt;, perhaps I don't know how things will shift regarding time for GSoC. Let's be realistic :)
&lt;/p&gt;
&lt;p&gt;
&amp;#2309;&amp;#2354;&amp;#2357;&amp;#2367;&amp;#2342;&amp;#2366;
&lt;/p&gt;
          &lt;h4&gt;References&lt;/h4&gt;
                    &lt;i&gt;

                    &lt;ul&gt;
                      &lt;li&gt;1. Derek F. Holt, Bettina Eick, Bettina, Eamonn A. O'Brien, "Handbook of computational group theory", Discrete Mathematics and its Applications (Boca Raton). Chapman &amp; Hall/CRC, Boca Raton, FL, 2005. ISBN 1-5848-372-3 .&lt;/li&gt;

                      &lt;li&gt;2.&lt;a href="http://staff.itee.uq.edu.au/havas/1974h.pdf"&gt; George Havas, "Reidemeister-Schreier program"&lt;/a&gt;&lt;/li&gt;
                    &lt;/i&gt;
                    &lt;br /&gt;
                    &lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://shubhamtibra.wordpress.com/?p=604</guid>
      <title>GSoC Week 7</title>
      <author>Subham Tibra (shubhamtibra)</author>
      <pubDate>Sun, 10 Jul 2016 17:19:17 GMT</pubDate>
      <link>https://shubhamtibra.wordpress.com/2016/07/10/gsoc-week-7/</link>
      <description>&lt;p&gt;I started working on the support for additional symbolic parameters in the module. So I added an extra argument in the method&amp;#160;&lt;code&gt;expr_to_holonomic&lt;/code&gt; for using custom domains. This will be helpful in integrations. For instance:&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [5]: expr_to_holonomic(sin(x*y), x=x, domain=QQ[y]).integrate(x).to_expr()
Out[5]:
-cos(x&amp;#8901;y) + 1
&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;
     y
In [15]: expr_to_holonomic(log(x*y), x=x, domain=QQ[y]).integrate((x, 1, x)).to_expr()
Out[15]: x&amp;#8901;log(x) + x&amp;#8901;log(y) - x - log(y) + 1
&lt;/pre&gt;
&lt;p&gt;Code upto here was merged at&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11330"&gt;#11330&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that I implemented the &lt;code&gt;Frobenius method&lt;/code&gt;&amp;#160;to support functions where the series may have negative or fractional exponents. Although there are limitations in the algorithm. First one being that we don&amp;#8217;t have an algorithm to compute the general solution. There doesn&amp;#8217;t seem to be a direct algorithm if roots of the &lt;code&gt;indicial equation&lt;/code&gt;&amp;#160;differ by an integer. Second one is the initial conditions. Initial conditions of the function (most of the times they won&amp;#8217;t even exist) can&amp;#8217;t be used if the exponents are fractional or negative.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [23]: expr_to_holonomic(sqrt(x**2-x)).series()
Out[23]:
            3/2       5/2       7/2         9/2         11/2
        C&amp;#8320;&amp;#8901;x      C&amp;#8320;&amp;#8901;x      C&amp;#8320;&amp;#8901;x      5&amp;#8901;C&amp;#8320;&amp;#8901;x      7&amp;#8901;C&amp;#8320;&amp;#8901;x        &amp;#9115; 6&amp;#9118;
C&amp;#8320;&amp;#8901;&amp;#8730;x - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + O&amp;#9117;x &amp;#9120;
           2         8         16        128         256            

In [28]: expr_to_holonomic(cos(x)**2/x**2, initcond=False).series()
Out[28]:
         2         4                       3         5
     C&amp;#8322;&amp;#8901;x    2&amp;#8901;C&amp;#8322;&amp;#8901;x    C&amp;#8321;   2&amp;#8901;C&amp;#8321;&amp;#8901;x   2&amp;#8901;C&amp;#8321;&amp;#8901;x    4&amp;#8901;C&amp;#8321;&amp;#8901;x    C&amp;#8320;    &amp;#9115; 6&amp;#9118;
C&amp;#8322; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; - &amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + O&amp;#9117;x &amp;#9120;
       3        45     x      3         15       315      2
                                                         x
&lt;/pre&gt;
&lt;p&gt;I will be working more on this and hope to add more functionality in this method.&lt;/p&gt;
&lt;p&gt;Right now I am working on an algorithm to convert a given Holonomic Function to Meijer G-function. This also doesn&amp;#8217;t look so straightforward. Kalevi helped me with the theory and we wrote a basic that works for some cases. We hope to add more things in it.&lt;/p&gt;
&lt;pre class="brush: python; title: ; notranslate"&gt;
In [17]: hyperexpand(expr_to_holonomic(exp(x)).to_meijerg())
Out[17]:
 x
&amp;#8495;
In [19]: hyperexpand(expr_to_holonomic(log(x)).to_meijerg()).simplify()
Out[19]: log(x)
&lt;/pre&gt;
&lt;p&gt;These are at&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11360"&gt;#11360&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/shubhamtibra.wordpress.com/604/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/shubhamtibra.wordpress.com/604/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=shubhamtibra.wordpress.com&amp;#038;blog=106149936&amp;#038;post=604&amp;#038;subd=shubhamtibra&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sampadblog.wordpress.com/?p=761</guid>
      <title>GSoc Week 7</title>
      <author>Sampad Saha (sampadsaha5)</author>
      <pubDate>Sat, 09 Jul 2016 16:52:24 GMT</pubDate>
      <link>https://sampadblog.wordpress.com/2016/07/09/gsoc-week-7/</link>
      <description>&lt;p&gt;Hi there! It&amp;#8217;s been seven weeks into the coding period&amp;#160;and the&amp;#160;second half has started now. I had a meeting with Jason on 3&lt;sup&gt;rd&lt;/sup&gt; of July. We discussed some modifications that were needed to be done in the existing PRs. Further, we had a conversation on the beam bending module. We ended up with some good ideas regarding the&amp;#160;implementation of beam object.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;So Far&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In PR&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;, I have added the suggested modifications.&lt;/li&gt;
&lt;li&gt;In PR&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11266"&gt;11266&lt;/a&gt;, I have done some modifications in the DistributedLoad class. Initially, it had &amp;#8220;start&amp;#8221;,&amp;#8221; end&amp;#8221; and &amp;#8220;value&amp;#8221; as its attribute but Jason suggested me to add an attribute which would denote the order of the load. This attribute would help while representing a load in the&amp;#160;form of Singularity Functions. Such as:
&lt;ul&gt;
&lt;li&gt;Order = 0 will denote Step Function,&lt;/li&gt;
&lt;li&gt;Order = 1 will denote Ramp Function,&lt;/li&gt;
&lt;li&gt;Order = 2 will denote Parabolic Ramp Function and&lt;/li&gt;
&lt;li&gt;so on &amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the same PR, I have added some more method for taking boundary conditions explicitly for different cases such as for deflection, slope and moment as inputs. I made a private attribute &lt;em&gt;_boundary_conditions&lt;/em&gt; and initiated as an empty dictionary of lists with keywords&amp;#160;&amp;#160;deflection, slope and moment. Later on each of the methods, namely,
&lt;ul&gt;
&lt;li&gt;apply_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_moment_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_slope_boundary_conditions&lt;/li&gt;
&lt;li&gt;apply_deflection_boundary_conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just updates that dictionary. The method &lt;em&gt;boundary_conditions&lt;/em&gt; would return the dictionary itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I will try to get&amp;#160;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11178"&gt;PR 11178 &lt;/a&gt;&amp;#160;and&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/11237"&gt;PR 11237&lt;/a&gt;&amp;#160;merged.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;apply_load&lt;/em&gt; method to the Beam class.&lt;/li&gt;
&lt;li&gt;Successfully convert all the load inputs through the &amp;#160;&lt;em&gt;apply_load&lt;/em&gt; method into Singularity Functions.&lt;/li&gt;
&lt;li&gt;Write methods which would output load curve, shear curve and moment curve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s all for this week. Cheers !!&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/sampadblog.wordpress.com/761/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/sampadblog.wordpress.com/761/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=sampadblog.wordpress.com&amp;#038;blog=102728326&amp;#038;post=761&amp;#038;subd=sampadblog&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=362</guid>
      <title>GSoC Weeks 6 &amp; 7 Progress</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Sat, 09 Jul 2016 11:50:05 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/07/09/gsoc-weeks-6-7-progress/</link>
      <description>&lt;p&gt;Week 6 was quite a rush, with many other things happening, and the work getting lagged behind. But with week 7, I was able to put much extra time into the project and get more or less up-to date with the time-line.&lt;/p&gt;
&lt;p&gt;Since, the end of week 5, the progress is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Completed and merged Matrix CWrappers in &lt;a href="https://github.com/symengine/symengine/pull/992" target="_blank"&gt;PR #992&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Completed and merged Parser CWrapper in &lt;a href="https://github.com/symengine/symengine/pull/1029" target="_blank"&gt;PR #1029&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Completed and merged &lt;a href="https://github.com/symengine/symengine/pull/1027" target="_blank"&gt;PR #1027&lt;/a&gt; which had wrappers for various functions for Number class, needed for the tests in Ruby to function properly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/56" target="_blank"&gt;PR #56&lt;/a&gt; in the Ruby Wrapper for Matrices is almost ready, with several review feedback to be incorporated.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/60" target="_blank"&gt;PR #60&lt;/a&gt; in the Ruby Wrapper for Parser is ready to be merged.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/59" target="_blank"&gt;PR #59&lt;/a&gt; contains the updates for the IRuby Notebooks, which will be used by @certik for SciPy 2016&amp;#8217;s SymEngine talk.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/pull/55" target="_blank"&gt;PR #55&lt;/a&gt; with the Ruby wrappers for evalf was finally merged after quite a time going into accmmodating floating point tests.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/symengine/symengine.rb/issues/57"&gt;Issue #57&lt;/a&gt; was closed in the Ruby Wrapper.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the proposal, I had promised an auxiliary feature of LaTeX friendly outputs for SymEngine Expresions, given I am on time. But considering I am barely hanging on to the time line, I decided to push this to the end of the time line.&lt;/p&gt;
&lt;p&gt;So I will immediately start working on the lambdify functions, and hopefully start exception catching in the same week. This will give me time to come back to the LaTeX friendly expressions in the last weeks.&lt;/p&gt;
&lt;p&gt;See you!&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/362/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/362/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=362&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
  </channel>
</rss>
