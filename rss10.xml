<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-7572262454034848939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 8</title>
      <pubDate>Sun, 08 Jul 2018 15:20:15 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-8.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief summary of the progress of rubi integration module in the 8th week of GSoC period.&lt;br /&gt;&lt;br /&gt;We completed the testing of logarithmic test cases. Some of the tests are failing as they depend on trigonometric rules. The rules and tests have been updated in this &lt;a href="https://github.com/sympy/sympy/pull/14756/"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Next, I loaded all trigonometric rules. They are huge in number. So the loading time increased from &lt;i&gt;1 min 30 sec&lt;/i&gt; to around&amp;nbsp;&lt;i&gt;6 min&lt;/i&gt;. For now, I have not loaded them. I also updated the test cases for &lt;i&gt;parsetools&lt;/i&gt; and fixed code quality issues. Currently, the travis is failing due to a bug, which has been fixed in branch &lt;i&gt;1.2.&lt;/i&gt; In the upcoming week, &lt;i&gt;1.2&lt;/i&gt;&amp;nbsp;probably will get merged in master.&lt;br /&gt;&lt;br /&gt;Then I moved on to implementing &lt;i&gt;appellf1&lt;/i&gt; in sympy. Progress can be seen in this &lt;a href="https://github.com/sympy/sympy/pull/14882"&gt;PR.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;We will be updating our &lt;i&gt;utility_functions&lt;/i&gt; to the latest version of RUBI.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-8</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 8 - Improving solving of logarithmic equations</title>
      <pubDate>Sun, 08 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-8</link>
      <description>&lt;p&gt;Before the start of the week Amit and I discussed on a few points on:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt; is an identifier helper for &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; to determine whether the expression is logarithmic or not.
      and &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt; is a solving helper that returns the equation in a tractable form for &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to better handle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What should &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt; return?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While designing the method at first it returned a &lt;code class="highlighter-rouge"&gt;logcombined&lt;/code&gt; equation if found to be logarithmic, but we agreed upon having consistency among all the identifying helpers to return either &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How &lt;code class="highlighter-rouge"&gt;_is_logarithmic()&lt;/code&gt; should work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next question was how it should work. We can implement it in two ways either to make the &lt;code class="highlighter-rouge"&gt;logcombined&lt;/code&gt; equation, if the expression reduces, it is obviously a logarithmic equation otherwise not. We also need to check whether the equation reduced has the variable to be solved in its &lt;code class="highlighter-rouge"&gt;free_symbols&lt;/code&gt;
But &lt;code class="highlighter-rouge"&gt;logcombine&lt;/code&gt; possessed a problem that it unknowingly manipulates the equation, like &lt;code class="highlighter-rouge"&gt;log(x) - log(2*x)&lt;/code&gt; would reduce to &lt;code class="highlighter-rouge"&gt;log(1/2)&lt;/code&gt; for which the routine would return &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt; as there are no symbol involved. So a more better way needs to be implemented.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt; will handle removing unwanted solutions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply reducing the logarithmic equation to a tractable form for &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to handle would cause spurious solutions in the result. Therefore it becomes necessary to remove them. Take for example: &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; gives the result of &lt;code class="highlighter-rouge"&gt;log(x - 3) + log(x + 3)&lt;/code&gt; as &lt;code class="highlighter-rouge"&gt;{-sqrt(10), sqrt(10)}&lt;/code&gt;, but &lt;code class="highlighter-rouge"&gt;-sqrt(10)&lt;/code&gt; is not the solution in &lt;code class="highlighter-rouge"&gt;Real&lt;/code&gt; domain. Therefore one way to remove it was using &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt;. Amit suggested on to have a look over the singularities and try incorporating the check in &lt;code class="highlighter-rouge"&gt;_solveset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Things that I did during the week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improved &lt;code class="highlighter-rouge"&gt;is_logarithmic()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removed the &lt;code class="highlighter-rouge"&gt;logcombine&lt;/code&gt; way of checking the equation. As of now the &lt;code class="highlighter-rouge"&gt;_is_logarithm&lt;/code&gt; checks for every term to be logarithmic in terms of the variable to be solved, if so it returns &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; otherwise &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improved the &lt;code class="highlighter-rouge"&gt;_solve_log()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As per the current documentation of &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; this routine is improved to return a modified form of the equation that &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; could better handle. Checking of the spurious solutions will take place in &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; itself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Way to remove spurious solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To handle this scenario I have added a &lt;a href="https://github.com/sympy/sympy/pull/14792/files#diff-eec0422923e8f100745c015cd8fdd6cfR985"&gt;check&lt;/a&gt; in &lt;code class="highlighter-rouge"&gt;_solveset&lt;/code&gt; specifically for logarithmic equations to remove spurious solutions.
The idea is based on the fact that natural log in undefined for negative and zero value, therefore this method gets each term of the expression, substitutes each solution to every term one by one and if for any term the value isn&amp;#8217;t real that solution will not be included.&lt;/p&gt;

&lt;p&gt;Why &lt;code class="highlighter-rouge"&gt;checksol()&lt;/code&gt; is not the appropriate way?&lt;/p&gt;

&lt;p&gt;At first I thought of using the &lt;code class="highlighter-rouge"&gt;checksol()&lt;/code&gt;, but it possessed a problem. &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt; unintensionally allows wrong solution to creep in. Take for example &lt;code class="highlighter-rouge"&gt;log(3*x) - log(-x + 1) - log(4*x + 1)&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; would give &lt;code class="highlighter-rouge"&gt;-1/2 and 1/2&lt;/code&gt; as the solutions but the former isn&amp;#8217;t a solution in real domain. Using &lt;code class="highlighter-rouge"&gt;checksol&lt;/code&gt; would not remove this as &lt;code class="highlighter-rouge"&gt;I*pi&lt;/code&gt; gets cancelled out during evaluating the expression therefore it returns &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt;, which is not correct.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Addressing comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this few changes have been done in the &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; &lt;a href="https://github.com/sympy/sympy/pull/14736"&gt;PR&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I have added a method that would return all the terms present in the expression: &lt;a href="https://github.com/sympy/sympy/pull/14736/files#diff-eec0422923e8f100745c015cd8fdd6cfR988"&gt;make_expr_args()&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Made the expresssion remain unevaluated when doing &lt;a href="https://github.com/sympy/sympy/pull/14736/files#diff-eec0422923e8f100745c015cd8fdd6cfR1299"&gt;lhs - rhs&lt;/a&gt; within &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read this &lt;a href="http://localhost:4000/gsoc-week-5"&gt;blog&lt;/a&gt; for better understanding of logarithmic solving.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/07/gsoc-week8</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 8</title>
      <pubDate>Fri, 06 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/07/gsoc-week8.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;This week I started working on adding M&amp;#246;bius Transform to the &lt;code class="highlighter-rouge"&gt;discrete&lt;/code&gt; module using Yate&amp;#8217;s DP (Dynamic Programming) method for implementation as part of PR &lt;a href="https://github.com/sympy/sympy/pull/14853"&gt;#14853&lt;/a&gt;. The proposed transforms are part of &lt;code class="highlighter-rouge"&gt;sympy.discrete.transforms&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;After discussing with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;, the methods implementing this transform were added with appropriate names. The keyword &lt;code class="highlighter-rouge"&gt;subset&lt;/code&gt; is used as a boolean to choose whether enumeration is done over subsets or supersets. The usage for the transform is:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'w x y z'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inverse_mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mobius_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The PR was merged successfully, after inclusion of docstring and unit tests for the transform.&lt;/p&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://nkhlpappu.wordpress.com/?p=7</guid>
      <author>Nikhil Pappu (NikhilPappu)</author>
      <title>Nikhil Pappu (NikhilPappu): Autolev Parser: Status Update</title>
      <pubDate>Thu, 05 Jul 2018 20:36:54 GMT</pubDate>
      <link>https://nkhlpappu.wordpress.com/2018/07/05/autolev-parser-status-update/</link>
      <description>&lt;p&gt;I have a PR for a working parser now with some test cases. The Travis errors I had previously have been fixed.&lt;/p&gt;
&lt;p&gt;I am currently going through the chapters of the book &lt;em&gt;Dynamics Online: Theory and Implementation with Autolev&amp;#160;&lt;/em&gt;and parsing most of the Autolev codes I come across. I feel this would help to make the parser more complete. After getting the desired parsed code I am also running the code and checking that the results are same/similar to the Autolev responses in the .ALL files.&lt;/p&gt;
&lt;p&gt;I have parsed the codes of Chapter 1 and 2 of the book and am currently working on Chapter 3. There are 6 Chapters overall and the bulk of the stuff is concentrated in Chapters 4 and 5.&lt;/p&gt;
&lt;p&gt;After parsing the codes of this book, I shall update the parser code and the tests in the PR. I will add more test cases as well. I will also send in a file containing all the parsed codes of&amp;#160;&lt;em&gt;Dynamics Online&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A lot of the codes are parsing completely fine. A few I feel are quite difficult to parse to SymPy code using a parser and they wouldn&amp;#8217;t even be in the spirit of SymPy/Python if parsed exactly. I have marked these for later. A few of them are producing slightly altered expressions or in some cases errors in SymPy. I am classifying all the codes appropriately based on criteria like this.&lt;/p&gt;
&lt;p&gt;After parsing the book I plan on finishing up the leftover parts of the &lt;a href="http://web.mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf"&gt;Autolev Tutorial&lt;/a&gt; examples and making sure the Bicycle Model Autolev code is parsed.&lt;/p&gt;
&lt;p&gt;I will then go on to do a complete code cleanup (general cleanup, using standard conventions and better variable names, adding more comments etc).&lt;/p&gt;
&lt;p&gt;Finally, I will wrap things up by writing the Documentation and a Final Report. In these I shall discuss: what the parser can do, how it should be used (there are some minor things in some cases that the user should note to get a proper SymPy parse), limitations and future improvements.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-9120952001144543939</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 7</title>
      <pubDate>Sun, 01 Jul 2018 15:19:06 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/07/gsoc-2018-week-7.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the seventh week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Last week, we found a solution for matching `exp` as `Pow`. This week major part was spent in testing exponential rules. Here are some problem faced.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;1. UnevaluatedExpr is quite untested and results in recursion errors in many places.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;like `u = UnevaluatedExpr(E)` now when we want to find imaginary and real part of `u`, using `im(u)`. It causes recursion error. There were other instances too. So in those functions, I replaced them back to `exp`.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;2. There was a lot of index error because length of args of a `Pow` object is 2. Whereas for `exp` it's 1. Utility functions used in lot of places `.args[1]`. I found all possible places where arguments of a `Pow` object was accessed using `.args[0] and .args[1]` . I replaced them with `.base` and `.exp`.&amp;nbsp;This solved the problem&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;There were more minor changes in many utility functions. Currently, I have finished the exponential testing and almost all are passing. I have pushed all changes in this &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: Arial, Helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I have tested a small part of logarithmic tests. I will try to finish them in 2 days and next move on to either special functions on trigonometric rules.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-7</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 7 - Continuing with transolve Part-IV</title>
      <pubDate>Sun, 01 Jul 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-7</link>
      <description>&lt;p&gt;This week I continued to work on finalising the design of the &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt;. Following were the things discussed and implemented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The loop over the &lt;code class="highlighter-rouge"&gt;rhs_s&lt;/code&gt; was removed because &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; already has a loop and since &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; is called within the loop therefore there won&amp;#8217;t be a case where there would be more than one argument in &lt;code class="highlighter-rouge"&gt;rhs_s&lt;/code&gt; inside &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class="highlighter-rouge"&gt;pow_type()&lt;/code&gt; was created to handle power type equations in &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; but it turns out that power type equations will be handled in the &lt;code class="highlighter-rouge"&gt;_invert()&lt;/code&gt; itself, so it was repetitive to add again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The names of the solving helpers were improved to &lt;code class="highlighter-rouge"&gt;_solve_class&lt;/code&gt; from the previous &lt;code class="highlighter-rouge"&gt;_class_solver&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discussions with Amit and Chris led to the conclusion that &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; should be completely made an internal function of &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;, i.e. it should not be used as an independent function. At first the thought was that it can be used as an independent function, but this created a problem of the code being repeated as that of &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;, so Chris suggested that &lt;code class="highlighter-rouge"&gt;_transolve&lt;/code&gt; should raise an error for equations that &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; can handle, but again this created problem, it would make unnnecessary complications in the code as we need to be very specific as to when and where raise an error.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We decided to have same arguments for all the helpers. Be it identification or solving helper, both will take the equation and the variable as their arguments, with the choice that the helper can ignore to use any of the argument if not needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There were a lot of improvement in the documentation as the design changed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from these changes work in implementing &lt;code class="highlighter-rouge"&gt;log solver&lt;/code&gt; is going on in parallel.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=63</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 6 (23 June &#x2013; 29 June)</title>
      <pubDate>Fri, 29 Jun 2018 06:32:05 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/29/week-6-23-june-29-june/</link>
      <description>&lt;p&gt;Last week I created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;to solve statically indeterminate beam systems using boundary conditions (bc_slope and bc_deflection). This week I mainly focussed on implementing a logic to find the maximum bending moment and maximum shear force in a beam.&lt;/p&gt;
&lt;p&gt;Initially, I thought it would be as simple as differentiating the bending_moment and shear force and then solving those using solve. But solve couldn&amp;#8217;t represent Interval solutions and hence gave a NonImplemented error, as both of these quantities can occur in Intervals.&lt;/p&gt;
&lt;p&gt;So instead of using solve over whole spam length, I found out points of discontinuity in the respective equations using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for term in terms:
    if isinstance(term, Mul):
         term = term.args[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where terms are all the Muls extracted from Add. and&amp;#160;&lt;code&gt;term.args[-1]&lt;/code&gt;&amp;#160;gives us the point of singularity.&lt;/p&gt;
&lt;p&gt;Now between two singularity points, our function can be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A continuous and differentiable function (hence no Interval solution)&lt;/li&gt;
&lt;li&gt;or a constant value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for the first scenario, you just use solve over that interval and see values at the endpoint. The higher one of both gives you maxima in that interval. For the second, the constant value is indeed maximum by itself. Then compare maxims of all intervals and return location and its value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; l, P = symbols('l, P', positive=True)
&amp;gt;&amp;gt;&amp;gt; b = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; R1, R2 = symbols('R1, R2')
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 0, 0, end=l)
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(R1, R2)
&amp;gt;&amp;gt;&amp;gt; b.max_bmoment()
(l/2, P*l**2/8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Beam class gives ValueError if passed value contains unit. So I would focus on fixing it.&lt;/li&gt;
&lt;li&gt;Read relevant theory for implementation of 3dBeam class.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week6and7</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 6 &amp; 7</title>
      <pubDate>Thu, 28 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week6and7.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The second phase of Coding Period has started.&lt;/p&gt;

&lt;p&gt;I started this phase working on &lt;code class="highlighter-rouge"&gt;sympy.discrete.recurrence&lt;/code&gt; module. After having an initial discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; regarding the functionality to be implemented, I did the proof-of-concept for the same on a remote branch.&lt;/p&gt;

&lt;p&gt;After the approach was finalized, the implementation was polished before opening the PR. The PR &lt;a href="https://github.com/sympy/sympy/pull/14816"&gt;#14816&lt;/a&gt; also included documentation, doctests, and unit tests for the module.&lt;/p&gt;

&lt;p&gt;The method &lt;code class="highlighter-rouge"&gt;linrec(coeffs, init, n)&lt;/code&gt; takes coefficients, initial values and point of evaluation for the linear recurrence. Usage for a recurrence like &lt;code class="highlighter-rouge"&gt;f(n) = f(n - 7) + f(n - 13) + f(n - 17)&lt;/code&gt; (having order &lt;code class="highlighter-rouge"&gt;17&lt;/code&gt;) would be:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;linrec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As suggested by &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt;, it will be good to have a user-facing method that calls &lt;code class="highlighter-rouge"&gt;linrec&lt;/code&gt; internally for performing the computation.&lt;/p&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6731843843505254405</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 6</title>
      <pubDate>Sun, 24 Jun 2018 15:53:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-6.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here is the brief work done for rubi in the 6th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;Last week almost 70 % of the miscellaneous algebra was tested. In the start of the week, the miscellaneous algebra testing was completed. The miscellaneous algebra test cases have been pushed in this &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;After this, I moved on to load exponential rules and test them. While loading the exponential rules, there were some parsing issues. Those were fixed. On start of the testing, it was found that some integrals depend upon the logarithmic and special_function rules. Those too needed to be loaded. There were some undefined or wrongly defined utility_functions like `CancelCommonFactors`, `Gamma (gammainc)`, `PolyGamma`, `ProductLog` and few more small functions. These didn't take much time. I fixed all these.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Soon I realised a major issue of `exp` and `Pow`. Sympy doesn't identify exp as Pow. The rubi rules are defined in such a way that exp needs to be realised as Pow. I tried to process an expression to replace exp with Pow. These are the major methods I tried :&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(E, z, evaluate=False) . This does not&amp;nbsp;work well, an expression containing Mul is evaluated to exp. I tried to fix it. I found that `flatten` of Mul causes the evaluation. I found the code messy. These can be solved but requires more time.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(Dummy('E', z, evaluate=False) .This was suggested by Aaron. The matching part has no issues in this. But functions which use&amp;nbsp;the property of `E` does not work properly. Like `Log(E)` should evaluate to 1.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Pow(UnevaluatedExpr(E), z) . In this the matching was as expected. I modified `Log` as `return log(z).doit()` . But then also there were some issues. I made a new subclass `rubi_unevaluated_expr`. To solve the commutative issue, I defined a property in this new subclass.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I think the last one is the best solution for now. Another issue was some rules which caused recursion errors like one in the image&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;&lt;a href="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s1600/blogrubi.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span&gt;&lt;img border="0" height="56" src="https://4.bp.blogspot.com/-umUEO5F9ppw/Wy-7A03ET5I/AAAAAAAAHbM/FQNRIGwO4koCTc_Lb1aoJYCq3ZYYAcOeQCLcBGAs/s640/blogrubi.png" width="640" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;To solve it I checked that if last 5 rules applied are same then return a Function `Integrate` and replace it at last while returning. This works fine.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt; &lt;div style="text-align: justify;"&gt;In this week, I was unable to do much testing. But I am sure the upcoming week will be better in this respect. I have tested a small part of exponential rules. In the upcoming week, I will try to finish exponential rules within 2-3 days and soon move to logarithmic rules.&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=61</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 5 (16 June &#x2013; 22 June)</title>
      <pubDate>Sat, 23 Jun 2018 11:54:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/23/week-5-16-june-22-june/</link>
      <description>&lt;p&gt;This week I worked on solving&amp;#160;statically indeterminate beam systems and created &lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;&amp;#160;for that. Some work was already done in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;, which me and Jason reviewed during community bonding period.&lt;/p&gt;
&lt;p&gt;Now Beam class uses boundary conditions (bc_deflection and bc_slope) to solve for unknown reactions, hence making statically indeterminate systems solvable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; E, I = symbols('E, I')
&amp;gt;&amp;gt;&amp;gt; F = Symbol('F')
&amp;gt;&amp;gt;&amp;gt; l = Symbol('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; b5 = Beam(l, E, I)
&amp;gt;&amp;gt;&amp;gt; b5.bc_deflection = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; b5.bc_slope = [(0, 0),(l, 0)]
&amp;gt;&amp;gt;&amp;gt; R1, R2, M1, M2 = symbols('R1, R2, M1, M2')
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(M2, l, -2)
&amp;gt;&amp;gt;&amp;gt; b5.apply_load(-F, l/2, -1)
&amp;gt;&amp;gt;&amp;gt; b5.solve_for_reaction_loads(R1, R2, M1, M2)
&amp;gt;&amp;gt;&amp;gt; b5.reaction_loads
{R1: F/2, R2: F/2, M1: -F*l/8, M2: F*l/8}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add max_bmoment and mx_shear_force methods to&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14826"&gt;#14826&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-6</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 6 - Continuing with transolve Part-III</title>
      <pubDate>Sat, 23 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-6</link>
      <description>&lt;p&gt;For the sixth week, I started working on a few things as per the discussions with Amit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improving the API of &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; grew over the past few weeks the API became a bit messy, which was against the plan. So Amit suggested on to work on it to make it look clean. For this I added two internal functions &lt;code class="highlighter-rouge"&gt;add_type()&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;pow_type()&lt;/code&gt;, to handle expressions having &lt;code class="highlighter-rouge"&gt;add&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;power&lt;/code&gt; terms respectively. This could help us in achieving what we planned of: making the API extensible without it getting affected from the changes done in the function itself. If new solvers are to be added the modifcation has to be done in either of the internal functions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improved the working of &lt;code class="highlighter-rouge"&gt;_check_expo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The implementation of the &lt;code class="highlighter-rouge"&gt;check_expo&lt;/code&gt; had a probelm, of not being generalised, only equations having two terms were checked. So the task was to make it generalised, so I implemented it using &lt;a href="http://docs.sympy.org/latest/modules/core.html#atom"&gt;atoms&lt;/a&gt;, filtered the equations having &lt;code class="highlighter-rouge"&gt;Pow&lt;/code&gt; or &lt;code class="highlighter-rouge"&gt;exp&lt;/code&gt; with the help of &lt;code class="highlighter-rouge"&gt;.atoms()&lt;/code&gt; and then checked whether the variable that needs to be solved is present in the exponent or not but this too possesed a problem: asking for atoms was not a great choice as they can come from anywhere like &lt;code class="highlighter-rouge"&gt;cos(2**x).atoms(Pow, exp)&lt;/code&gt; would give &lt;code class="highlighter-rouge"&gt;2**x&lt;/code&gt; and consequently the helper would return &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt;, which is wrong. For this &lt;a href="https://github.com/smichr"&gt;smichr&lt;/a&gt; suggested even better method of using &lt;a href="https://github.com/sympy/sympy/blob/master/sympy/core/operations.py#L344"&gt;.make_args()&lt;/a&gt;. We will seperate out all the &lt;code class="highlighter-rouge"&gt;Add&lt;/code&gt; arguments and then in each of them we will look for &lt;code class="highlighter-rouge"&gt;Mul&lt;/code&gt; arguments which will give us the atomic argument of the expression, now this term can be tested to have variable in the exponent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changes in the documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also there were a few things that needed to fixed in the documentation. The docstring of &lt;code class="highlighter-rouge"&gt;expo_solver&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;check_expo&lt;/code&gt; were improved. Few changes were also done in &lt;code class="highlighter-rouge"&gt;transolve's&lt;/code&gt; documentation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Worked on improvement of &lt;code class="highlighter-rouge"&gt;log solver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this I did some improvement in &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt; to handle corner cases. As per the current logic &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt; would return a &amp;#8220;&lt;em&gt;logcombined&lt;/em&gt;&amp;#8221; equation to be further solved by &lt;code class="highlighter-rouge"&gt;log_solver&lt;/code&gt;, but this lead to a problem that the some equation (&lt;code class="highlighter-rouge"&gt;log(x**y) - y*log(x)&lt;/code&gt;) might get reduced to &lt;code class="highlighter-rouge"&gt;0&lt;/code&gt; and the check would fail, therefore this was handled by improving the condition as &lt;code class="highlighter-rouge"&gt;if condition not False&lt;/code&gt;. Apart from this single term expression needs to be properly handled.&lt;/p&gt;

&lt;p&gt;Also I started getting familiar with &lt;code class="highlighter-rouge"&gt;lambert&lt;/code&gt; equations.&lt;/p&gt;

&lt;p&gt;So these were the things that I worked on this week. The PR needs a bit more improvement to get merged, I will try to get it finished by mid of the coming week and start working on implementation of other solvers.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//modif-todd-coxeter/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Modifeid todd Coxeter methods</title>
      <pubDate>Thu, 21 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//modif-todd-coxeter/</link>
      <description>&lt;p&gt;GSoC'18 Week 5</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-5483137592484274057</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 5</title>
      <pubDate>Sun, 17 Jun 2018 17:12:20 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-5.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;Hello everyone. Here is the brief summary of my work in the 5th week of GSoC period.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;I started this week with testing miscellaneous algebraic test cases. Soon it was found that most test cases depend on rules of `Miscellaneous integration`. So I loaded those rules. There were few new structure in constraints. So parser too was updated for incorporating those.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;While testing, `ExpandIntegrand` did not function well. Matcher used in ExpandIntegrand was of sympy. I changed ExpandIntegrand using replace_all of matchpy. In few more functions I changed the structure using matchpy. In this week, a major part of the time was spent in utility functions. There are many changes. Also some of the test cases of last year was wrong. It gave different result in mathematica. The test cases which I have updated matches with Mathematica's output. I have pushed all changes of utility function in this &lt;a href="https://github.com/sympy/sympy/pull/14756/files"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Parallely I have also tested around 70 % of miscellaneous algebraic. I will complete the testing within one or two days. After this I will move on to exponential rules and exponential test cases.&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-5</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 5 - Implementing log solver</title>
      <pubDate>Sun, 17 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-5</link>
      <description>&lt;p&gt;So this is the last week of the first evaluation. I started with implementing log solver as part of &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;. As per the documentation of the &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; we will need two helpers for implementing log solver, &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt; that will check whether the equation is logarithmic or not and &lt;code class="highlighter-rouge"&gt;log_solver&lt;/code&gt; that will solve the equation. Here&amp;#8217;s the &lt;a href="https://github.com/sympy/sympy/pull/14792"&gt;PR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea behind &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Heuristic is implemented to determine whether the equation is logarithmic or not. According to it the logarithmic equations can be reduced to simpler form using log identities. For this purpose we use SymPy&amp;#8217;s function &lt;a href="http://docs.sympy.org/latest/tutorial/simplification.html#logcombine"&gt;logcombine&lt;/a&gt;. If the equation is logarithmic it will be reduced and hence the number of log in the original and modified equation may differ. This will ensure that the equation is logarithmic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea behind the log solver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea is simple, the reduced form from the &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt; is used as the new target equation and is sent to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt; to handle. Solutions are retuned from &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;, but it may contain values that won&amp;#8217;t satisfy the equation (log does not take negative values in real domain). Therfore to remove unwanted values we use &lt;a href="http://docs.sympy.org/latest/modules/solvers/solvers.html#sympy.solvers.solvers.checksol"&gt;checksol&lt;/a&gt; function of solve module which substitutes each solution in the equation and returns &lt;code class="highlighter-rouge"&gt;True&lt;/code&gt; if it satisfies otherwise &lt;code class="highlighter-rouge"&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Apart from implementing helpers, I have added their documentation. Certain things needs to be done before the PR is ready for review: Tests needs to be added for the helpers and &lt;code class="highlighter-rouge"&gt;check_log&lt;/code&gt; needs to be improved a bit to handle corner cases.&lt;/p&gt;

&lt;p&gt;In parallel I am also working on improving &lt;code class="highlighter-rouge"&gt;transolve's&lt;/code&gt; PR to make it merge as soon as possible. After these two gets completely fixed we will be focusing on implementing &lt;code class="highlighter-rouge"&gt;lambert equation solver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the coming week I will be focussing on finishing off the work of these two PR.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=56</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 4 (9 June &#x2013; 15 June)</title>
      <pubDate>Fri, 15 Jun 2018 11:00:25 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/15/week-4-9-june-15-june/</link>
      <description>&lt;p&gt;This week I worked on adding support for beams connected via hinge in &lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;. Support for axially fixed beams and its API was implemented last week.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_solve_hinge_beams&lt;/code&gt;&amp;#160;was added as a helper function to solve such Beams.&amp;#160;&lt;span class="pl-s"&gt;This method resolves the composite Beam into its sub-beams and then&amp;#160;equations of shear force, bending moment, slope and deflection are&amp;#160;evaluated for both of them separately. These equations are then solved&amp;#160;for unknown reactions and integration constants using the boundary&amp;#160;conditions applied on the Beam. Equal deflection of both sub-beams&amp;#160;at the hinge joint gives us another equation to solve the system.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So the final API looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hinge_hinge_blog" class=" size-full wp-image-57 aligncenter" src="https://singhjashan.files.wordpress.com/2018/06/hinge_hinge_blog.png?w=730" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.physics.continuum_mechanics.beam import Beam
&amp;gt;&amp;gt;&amp;gt; from sympy import symbols
&amp;gt;&amp;gt;&amp;gt; l = symbols('l', positive=True)
&amp;gt;&amp;gt;&amp;gt; R1, M1, R2, R3, P = symbols('R1 M1 R2 R3 P')
&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2*l, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2,"hinge")
&amp;gt;&amp;gt;&amp;gt; b.apply_load(M1, 0, -2)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R1, 0, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R2, l, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(R3, 4*l, -1
&amp;gt;&amp;gt;&amp;gt; b.apply_load(P, 3*l, -1)
&amp;gt;&amp;gt;&amp;gt; b.bc_slope = [(0, 0)]
&amp;gt;&amp;gt;&amp;gt; b.bc_deflection = [(0, 0), (l, 0), (4*l, 0)]
&amp;gt;&amp;gt;&amp;gt; b.solve_for_reaction_loads(M1, R1, R2, R3)
&amp;gt;&amp;gt;&amp;gt; b.reaction_loads
{R3: -P/2, R2: -5*P/4, M1: -P*l/4, R1: 3*P/4}
&amp;gt;&amp;gt;&amp;gt; b.slope().subs(x, 3*l)
-7*P*l**2/(48*E*I)
&amp;gt;&amp;gt;&amp;gt; b.deflection().subs(x, 2*l)
7*P*l**3/(24*E*I)&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See for changes in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;to get it merged.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week5</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 5</title>
      <pubDate>Fri, 15 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week5.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The first phase of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;This week, I started working on the convolution for &lt;img src="http://latex.codecogs.com/svg.latex?\dpi{300}&amp;space;\large&amp;space;2^n" title="\large 2^n" /&gt;&lt;code class="highlighter-rouge"&gt;-group&lt;/code&gt; using &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt; - Dyadic (XOR) Convolution. The PR &lt;a href="https://github.com/sympy/sympy/pull/14783"&gt;#14783&lt;/a&gt; dealt with this addition to the module.&lt;/p&gt;

&lt;p&gt;I had a useful discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; for clearing the API and naming convention. &lt;br /&gt;
The &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method uses &lt;code class="highlighter-rouge"&gt;dyadic=True&lt;/code&gt; as the hint which uses &lt;code class="highlighter-rouge"&gt;convolution_fwht&lt;/code&gt; for the implementation. Appropriate documentation, doctests and unit tests are also included.&lt;/p&gt;

&lt;p&gt;Successive reviews helped in refining the PR, before the final merge later in the week.&lt;/p&gt;

&lt;p&gt;The usage for the same is:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.discrete.convolution&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convolution_fwht&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'u v x y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dyadic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;convolution_fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plan for this phase has executed according to the timeline, and the first evaluation has been successful.&lt;/p&gt;

&lt;p&gt;Looking forward to the next phase of Coding Period.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//Isomorphism/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Computation of Isomorpism between 2 groups</title>
      <pubDate>Mon, 11 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//Isomorphism/</link>
      <description>&lt;p&gt;Week 3-4 and Week 6</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2004986996788736575</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 4</title>
      <pubDate>Sun, 10 Jun 2018 16:47:19 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-4.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;Hello everyone. Here is the brief work done in the 4th week.&lt;br /&gt;&lt;br /&gt;In this week I have completed the testing of &lt;i&gt;trinomial products. &lt;/i&gt;There are around 2700 test cases. I have tested them all in sympy. I have updated the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&amp;nbsp;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Currently, a few tests are failing because of 2 major issues :&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Apart - Some features are unimplemented in apart of sympy. So expressions are not simplified.&lt;/li&gt;&lt;li&gt;appellf1 - There is a missing implementation of appellf1 in sympy.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;If the above two issues are solved, almost all tests will pass.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Utility functions have been improved a lot this week. The &lt;i&gt;is_polynomial &lt;/i&gt;of sympy&amp;nbsp;has certain issues and so the constraints were affected. I have re-written PolynomialQ. It&amp;nbsp;is not full proof, but it handles most of the cases. There are many small changes in utility functions. They can be seen in the &lt;a href="https://github.com/sympy/sympy/pull/14756"&gt;PR&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am lagging behind my proposed timeline. But the work in rubi is time-consuming. When a test fails, finding the same rule in Mathematica, finding whether all constraints return the same result in Mathematica and sympy and finding whether utility functions are working in a different way takes time. I apologise for the same. I will try to speed up my work as much as possible.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this week, I will be testing Miscellaneous algebra and Exponential tests.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=53</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 3 (2 June &#x2013; 8 June)</title>
      <pubDate>Sat, 09 Jun 2018 23:40:11 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/09/week-3-2-june-8-june/</link>
      <description>&lt;p&gt;This week me, Arihant and Jason discussed the API for creating composite Beam objects. Initially, we used &lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;SingularityFunction&lt;/code&gt;&amp;#160;to represent our changing second_moment but then we agreed upon&amp;#160;&lt;code&gt;.join&lt;/code&gt; method to represent such beams. So the final API was like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b1 = Beam(2, E, 1.5*I)
&amp;gt;&amp;gt;&amp;gt; b2 = Beam(2, E, I)
&amp;gt;&amp;gt;&amp;gt; b = b1.join(b2, "fixed")
&amp;gt;&amp;gt;&amp;gt; b.length
&lt;span class="pl-c1"&gt;4&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; b.second_moment
Piecewise((&lt;span class="pl-c1"&gt;1.5&lt;/span&gt;&lt;span class="pl-k"&gt;*&lt;/span&gt;I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;), (I, x &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#160;&lt;code&gt;b1.join(b2, "fixed")&lt;/code&gt;&amp;#160;joins b2 at the right end of b1 via a fixed connection.All this was implemented in&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14773"&gt;#14773&lt;/a&gt;&amp;#160;and hopefully it would be merged in coming few days.&lt;/p&gt;
&lt;p&gt;I also created&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14786"&gt;#14786&lt;/a&gt;&amp;#160;at the end of this week implementing&amp;#160;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;and&amp;#160;&lt;code&gt;max_deflection&lt;/code&gt;&amp;#160;methods.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apply_support&lt;/code&gt;&amp;#160;is an easier way to apply support structures on our Beam object rather than adding all the reaction loads and moments and constraints on it by yourself. Its API is not finalised yet but for now it is something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;b.apply_support(position, type='hinge')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;position&lt;/code&gt;&amp;#160;represents the position at which support was applied&lt;/p&gt;
&lt;p&gt;and type is type of support structure. It can be either&amp;#160;&lt;code&gt;hinge&lt;/code&gt;, &lt;code&gt;roller&lt;/code&gt;&amp;#160;or &lt;code&gt;cantilever&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add support for composite beams connected via hinge.&lt;/li&gt;
&lt;li&gt;Add support for non-horizontal beams.&lt;/li&gt;
&lt;li&gt;See for any remaining implementation from first two stages of my proposal.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week4</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 4</title>
      <pubDate>Sat, 09 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week4.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;Another week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;Starting this week, I worked on PR &lt;a href="https://github.com/sympy/sympy/pull/14765"&gt;#14765&lt;/a&gt; for implementing Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As pointed out by &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt;, symbolic coefficients could be supported by this transform as the general Kronecker matrix only contains &lt;code class="highlighter-rouge"&gt;+/-1&lt;/code&gt;, which means it essentialy requires only addition or subtraction to perform the transformation. Also, the PR review helped fix a minor issue related to string concatenation.&lt;/p&gt;

&lt;p&gt;Usage for &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt; looks like:&lt;/p&gt;
&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a b c d'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fwht&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ifwht&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Documentation, doctests, and unit tests are also added for this transform.&lt;/p&gt;

&lt;p&gt;Looking forward to next week, where I will be implementing XOR convolution using &lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-4</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 4 - Continuing with transolve Part-II</title>
      <pubDate>Sat, 09 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-4</link>
      <description>&lt;p&gt;By the end of the previous week I had completed majority of the TODO&amp;#8217;s of the &lt;a href="https://github.com/sympy/sympy/pull/14736/"&gt;PR #14736&lt;/a&gt;.
This week I started on minor improvements suggested by Amit. This included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Minor Documentation changes&lt;br /&gt;
Included proof of correctness, typo fixes, rephrasing lines etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removing &lt;code class="highlighter-rouge"&gt;flag&lt;/code&gt; variable from transolve.&lt;br /&gt;
&lt;code class="highlighter-rouge"&gt;flag&lt;/code&gt; variable was passed as a function parameter in &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; and was used to check on the recursive call. The thought was that there might be a case when equation could not be solved by any of the helpers but during the process the equation might get modified, so we wanted to double check whether the modified equation could be solved again, thats why we used &lt;code class="highlighter-rouge"&gt;flag&lt;/code&gt; but Amit suggested on removing it as there wasn&amp;#8217;t a case as of now and it will only make things unnecessarily complicated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also worked on XFAILS, mainly on solving equations containing only symbols. There was an exception raised in &lt;code class="highlighter-rouge"&gt;_invert_real&lt;/code&gt;, because of a relational comparison made with &lt;code class="highlighter-rouge"&gt;0&lt;/code&gt; which caused the faiure of the tests. It has been fixed by handling the exception.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imported tests of log and lambert.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another thing we discussed was about log solver. The helpers for solving logarithmic equations will be implemented in a seperated PR, to make the review and implementing task easy and independent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this I started a working on solving exponential equations in complex domain, though it turns out that we will be focussing on only the real domain as of now. But I have added tests for it as XFAIL.&lt;br /&gt;
To make exponents work in complex domain, we require the &lt;a href="https://en.wikipedia.org/wiki/Complex_logarithm"&gt;complex logarithm&lt;/a&gt;.
If we have equation as&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;	z = e**w,
	where w is complex number and z is non-zero complex number,
	then 
	Ln(z) = ln|z| + I*(Arg(z) + 2*n*pi)
	where Ln(z) is the complex logarithm and ln|z| is the
        logarithm evaluated with real number argument.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from this we also had a meeting yesterday in which we discussed about how we will be wrapping up things before the first evaluation.&lt;br /&gt;
I will be completing few leftovers of the current PR to make it merge and start working on implementing log solver (making a commit probably by tomorrow).&lt;/p&gt;

&lt;p&gt;Amit also suggested on creating a coverage report so as to get an idea about the amount of tests covered by the code. The current coverage report can be found &lt;a href="https://yathartha22.github.io/covhtml/sympy_solvers_solveset_py.html"&gt;here&lt;/a&gt;. Other than this he also advised on reading &lt;a href="https://www.investigatii.md/uploads/resurse/Clean_Code.pdf"&gt;Clean Code&lt;/a&gt; by &lt;code class="highlighter-rouge"&gt;Robert C. Martin&lt;/code&gt; which will help me improve in writing clean and efficient code.&lt;/p&gt;

&lt;p&gt;The main target for the coming week will be merging &lt;code class="highlighter-rouge"&gt;PR #14736&lt;/code&gt;, implementing &lt;code class="highlighter-rouge"&gt;log solver&lt;/code&gt; (will try to merge this as well), starting with implementing &lt;code class="highlighter-rouge"&gt;lambert solver&lt;/code&gt; (try to add atleast a WIP PR) and reading the book.&lt;/p&gt;

&lt;p&gt;Hope things go as planned!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-6327049288703125321</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 3</title>
      <pubDate>Sun, 03 Jun 2018 12:02:48 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/06/gsoc-2018-week-3.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the update of my work in the third week of GSoC.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Unlike last week, this week clarified some of the real problems of our implementation of rubi.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;I began to freshly test trinomial products after getting the older test-suite.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Initially, I came across the problem of &lt;i&gt;Coeff &lt;/i&gt;and &lt;i&gt;Sum&lt;/i&gt;. I solved this by redefining &lt;i&gt;Coeff&lt;/i&gt; and introducing a function &lt;i&gt;Sum_doit&lt;/i&gt;. After this, I realised &lt;i&gt;With&lt;/i&gt; statement was not being parsed correctly for many cases. Parsetools was improved to take care of the &lt;i&gt;with&lt;/i&gt; statements.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;After this, I encountered with some utility functions where the output was not as expected. This is the major cause of the failing tests. Constraints too are affected by this. I tried to find and solve as much as possible. I have to trace all functions in cases of failing tests and compare the output with Mathematica. I improved few utility functions and updated in the &lt;/span&gt;&lt;a href="https://github.com/sympy/sympy/pull/14756" style="font-family: arial, helvetica, sans-serif;"&gt;PR&lt;/a&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;. Also, there were some exceptions in &lt;/span&gt;Matchpy&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, where constraints were being checked taking x as a numerical value. It resulted in TypeErrors. So I updated the constraints in such a way that it avoids such exceptions.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;After all this and some small changes, I almost have tested half of the trinomial products in the test-suite. Some issues are not solved yet, like :&amp;nbsp;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Sorting of variables.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Not implemented error in apart of sympy.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;And few rules, which are not well defined.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;Here is the brief work of this week:&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Solved the issue of Sum and Coeff.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved parsetools for with statements.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;little modification to constraints definition.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;improved utility functions&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;minor changes in parsetools.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;I was supposed to completely test trinomial products within this week. I tried hard, but the debugging part is time taking. Finding the real issue for failing &lt;/span&gt;test&lt;span style="font-family: arial, helvetica, sans-serif;"&gt;, takes time. Also, it needs to be compared with Mathematica. But the good thing is that, after finding the issue and fixing it, tests are&amp;nbsp;passing. So after this week, I can say that if we are good with our utility functions, we will be able to test more than 90% of the original &lt;/span&gt;rubi&lt;span style="font-family: arial, helvetica, sans-serif;"&gt; test suite.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the upcoming week, I will do more testing and complete trinomial products.&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/06/gsoc-week3</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 3</title>
      <pubDate>Sun, 03 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/06/gsoc-week3.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The third week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;I started the week by finalizing the PR &lt;a href="https://github.com/sympy/sympy/pull/14745"&gt;#14745&lt;/a&gt;. The PR has been merged successfully. The master branch of &lt;code class="highlighter-rouge"&gt;sympy&lt;/code&gt; now contains &lt;code class="highlighter-rouge"&gt;sympy.discrete.transforms&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;sympy.discrete.convolution&lt;/code&gt;. I have tested corner cases as well. Documentation and Doctests are complete for the transforms and types of convolution that are currently part of master.&lt;/p&gt;

&lt;p&gt;Late this week, I pushed commits to &lt;a href="https://github.com/sympy/sympy/pull/14712"&gt;PR #14712&lt;/a&gt; with the aim of fixing failing tests in &lt;code class="highlighter-rouge"&gt;test_util.py&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;test_inequalities.py&lt;/code&gt; due to &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;. The remaining tests are failing as &lt;code class="highlighter-rouge"&gt;solvers&lt;/code&gt; can not currently solve the transcendental equations when rewritten in exponential form.&lt;/p&gt;

&lt;p&gt;Looking forward to next week, where I will be working on the Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-3</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 3 - Continuing with transolve</title>
      <pubDate>Sat, 02 Jun 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-3</link>
      <description>&lt;p&gt;I continued my work of week 2 in this week as well. Though I was travelling for 2-3 days, I was able to give most of the hours to the work dedicated for this week. I had to add a detailed descriptive documentation for &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;, for this I read documentation of the &lt;code class="highlighter-rouge"&gt;ode&lt;/code&gt; module as Amit and Harsh suggested, apart from this I read several other documentation of sympy modules. Made a commit regarding this in the &lt;a href="https://github.com/sympy/sympy/pull/14736/"&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of now transolve supports solving majority of exponential equations.
I have also imported exponential tests of solve and added a few of mine. Some of them needs another look, I have added them to &lt;code class="highlighter-rouge"&gt;XFAIL&lt;/code&gt; as of now. I am working on these tests to pass. Also done minor changes in the function, like removed &lt;code class="highlighter-rouge"&gt;force=True&lt;/code&gt; option from &lt;code class="highlighter-rouge"&gt;expand_log&lt;/code&gt; because using this option is not a healthy choice as the function expands logarithm without considering the assumptions (for exponents the variable should be real) which may sometime get a wrong result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea behind &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea is simple, we are mainly focusing on making it modular and extensible. So to achieve this different identifying and solving helpers will be implemented that will identify the type of equation and then solve it. For detailed information refer to the &lt;a href="https://github.com/sympy/sympy/pull/14736/"&gt;PR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idea behind &lt;code class="highlighter-rouge"&gt;exponential solver&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exponential equations are solved by using logarithms. Currently the &lt;code class="highlighter-rouge"&gt;expo_solver&lt;/code&gt; reduces the equation to log form which can further be handled by solveset itself. For this purpose &lt;a href="http://docs.sympy.org/latest/tutorial/simplification.html#expand-log"&gt;expand_log&lt;/a&gt; function of sympy is used which reduces the equation using log identities.
Take for example a simple exponential equation &lt;code class="highlighter-rouge"&gt;3**(2*x) - 2**(x + 3)&lt;/code&gt;, this equation can be reduced to &lt;code class="highlighter-rouge"&gt;2*x*log(3) - (x+3)*log(2)&lt;/code&gt;, this type of equation is easily solvable by &lt;code class="highlighter-rouge"&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once we approve on the documentation and the working of exponential solver I will proceed to implement logarithmic solver (probably in the coming week).&lt;/p&gt;

&lt;p&gt;Hope things go as planned!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://singhjashan.wordpress.com/?p=45</guid>
      <author>Jashanpreet Singh Sraw (jashan498)</author>
      <title>Jashanpreet Singh Sraw (jashan498): Week 2 (25 May &#x2013; 1 June)</title>
      <pubDate>Fri, 01 Jun 2018 18:53:34 GMT</pubDate>
      <link>https://singhjashan.wordpress.com/2018/06/01/week-3-25-may-1-june/</link>
      <description>&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Exams kept me occupied for previous 11 days so I wasn&amp;#8217;t able to contribute much. Coming to this week&amp;#8217;s work, I created two pull request:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; :This PR implemented&amp;#160;&lt;code&gt;remove_load&lt;/code&gt;&amp;#160;method to remove previously applied loads on the beam object.&amp;#160;This method is&amp;#160; little different from adding a negative load to make net equal to zero and would work only if that particular load exists on beam.&lt;/li&gt;
&lt;li&gt;&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; : This PR implemented&amp;#160;&lt;code&gt;point_cflexure&lt;/code&gt;&amp;#160;method to find &lt;a href="https://en.wikipedia.org/wiki/Contraflexure"&gt;point of contraflexure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/14751"&gt;#14751&lt;/a&gt; also included&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;method which keeps a track of all load applied on beam.&lt;/p&gt;
&lt;p&gt;It is different from&amp;#160;&lt;code&gt;b.load&lt;/code&gt;&amp;#160;as it treat each load as a separate entity.&amp;#160;&lt;code&gt;load&lt;/code&gt;&amp;#160;property would sum up all the loads at a particular point but&amp;#160;&lt;code&gt;applied_loads&lt;/code&gt;&amp;#160;will still show them as separate loads. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; b.apply_load(4, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.apply_load(2, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.load
6*SingularityFunction(x, 2, -1)
&amp;gt;&amp;gt;&amp;gt; b.applied_loads
[(4, 2, -1, None), (2, 2, -1, None)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only difficulty with &lt;a href="https://github.com/sympy/sympy/pull/14753"&gt;#14753&lt;/a&gt;&amp;#160; occured in finding solution of&amp;#160;&lt;code&gt;moment_curve&lt;/code&gt;&amp;#160;.&amp;#160; Actually moment is zero outside the spam length too, which made&amp;#160;&lt;code&gt;solve&lt;/code&gt;&amp;#160;to return a solution in form of&amp;#160;&lt;code&gt;Interval&lt;/code&gt;&amp;#160;which is not a compatible return type for&amp;#160;&lt;code&gt;solve&lt;/code&gt;.&amp;#160;&lt;code&gt;solveset&lt;/code&gt;&amp;#160;was of no help too as it can&amp;#8217;t be used with multivariate expressions. The problem, however, was solved by wrapping&amp;#160;&lt;code&gt;bending_moment&lt;/code&gt;&amp;#160; with a&amp;#160;&lt;code&gt;Piecewise&lt;/code&gt;&amp;#160;function with its value equal to&amp;#160;&lt;code&gt;float("nan")&lt;/code&gt;&amp;#160;outside the spam length.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;&lt;strong&gt;Next Week&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make&amp;#160;&lt;code&gt;beam.py&lt;/code&gt;&amp;#160;compatible to solve non-prismatic beams.&lt;/li&gt;
&lt;li&gt;Try to find a way around for the issue occurring in PR&amp;#160;&lt;a href="https://github.com/sympy/sympy/pull/14681"&gt;#14681&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for non-horizontal beams.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/blogs/os_day2</guid>
      <author>Gaurav Dhingra (gxyd)</author>
      <title>Gaurav Dhingra (gxyd): Operating Systems - Day 2</title>
      <pubDate>Wed, 30 May 2018 00:00:00 GMT</pubDate>
      <link>https://gxyd.github.io/blogs/os_day2/</link>
      <description>&lt;p&gt;Patch policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Patch should have a &lt;i&gt;&lt;b&gt;Subject&lt;/b&gt;: [PATCH] Docs: Add info on supported kernels to REPORTING-BUGS.&lt;/i&gt;. Here clearly &lt;i&gt;Docs&lt;/i&gt; indicate that it that the patch makes changes to the documentation section.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;i&gt;Why&amp;#8217;s&lt;/i&gt; are more important than &lt;i&gt;What&lt;/i&gt; in body of patch (aka commit message?).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It seems like a lot of drivers subfolder have a separate file &amp;#8220;TODO&amp;#8221; listing the work that needs to be done. For example, currently there is a file drivers/dma/TODO which lists a few tasks that needs to be done, here is the list of task mentioned in that file:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Move remaining drivers to use new slave interface&lt;/li&gt;
      &lt;li&gt;Remove old slave pointer machansim&lt;/li&gt;
      &lt;li&gt;Check other subsystems for dma drivers and merge/move to dmaengine&lt;/li&gt;
      &lt;li&gt;Remove &lt;code class="highlighter-rouge"&gt;dma_slave_config&lt;/code&gt;&amp;#8217;s dma direction.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id="include-guard"&gt;Include guard&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Include_guard"&gt;Include guard&lt;/a&gt; is one of the topics I went through since seeing header file, it seems to be appearing at the top. Since I am also using CodeBlocks for coding in C these days, Codeblocks provides with automatic inclusion of &lt;i&gt;include guard&lt;/i&gt;(aka &lt;i&gt;macro guard&lt;/i&gt;) when we start a new header file.&lt;/p&gt;

&lt;p&gt;In a C/C++ program if a function/struct/&amp;#8230; is defined more than once, then it raises an error (&lt;b&gt;one definition rule&lt;/b&gt;). To avoid this problem include guards are used.&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;#ifndef FILE_NAME_H
#define FILE_NAME_H


/* code goes here */


#endif /* end of include guard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for complete understandstanding, see &lt;a href="https://en.wikipedia.org/wiki/Include_guard#Use_of_#include_guards"&gt;this example&lt;/a&gt;. Though I still need to figure out why on this line &lt;a href="https://elixir.bootlin.com/linux/latest/source/drivers/staging/board/board.h#L2"&gt;drivers/staging/board/board.h#line2&lt;/a&gt; we have use of &lt;code class="highlighter-rouge"&gt;__&lt;/code&gt; around the file name.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="static-keyword-in-c"&gt;static keyword in C&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;This &lt;a href="https://stackoverflow.com/a/572550/3396379"&gt;stackoverflow answer suffices&lt;/a&gt;, actually &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; is used quite a lot in kernel code, which made me to have a look at its meaning.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="difference-between-header-and-source-file-in-c-also-in-c"&gt;difference between header and source file in C (also in C++)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;This &lt;a href="https://gxyd.github.io/answer on stackoverflow"&gt;https://stackoverflow.com/questions/3482948/any-fundamental-difference-between-source-and-header-files-in-c&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id="typedef-in-c"&gt;typedef in C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; is a reserved keyword in C. It creates an alias name for another datatype. Example (from wikipedia):&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;typedef int length;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#8217;s see an example from linux kernel source code:&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;typedef unsigned char  uch;
typedef unsigned short  ush;
typedef unsigned long  ulg;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this, it is very clear what purpose does &lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; does have. But, I beilieve I saw someuse of &lt;code class="highlighter-rouge"&gt;typedef&lt;/code&gt; related to &lt;code class="highlighter-rouge"&gt;struct&lt;/code&gt; in linux kernel code but I don&amp;#8217;t remember where, but will write about it when I come across it.&lt;/p&gt;

&lt;p&gt;USEFUL INFO: I found this website which hosts the kernel source online &lt;a href="https://elixir.bootlin.com/linux/latest/source"&gt;https://elixir.bootlin.com/linux/latest/source&lt;/a&gt;, I found it to be pretty handy to use. It&amp;#8217;s better than github&amp;#8217;s online source code viewer I&amp;#8217;d say.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id="code-analysing-section"&gt;code analysing section&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;#8217;s see this codeblock taken from []&lt;/p&gt;
&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;struct ashmem_area {
    char name[ASHMEM_FULL_NAME_LEN];
    struct list_head_unpinned_list;
    struct file *file;
    size_t size;
    unsigned long prot_mask;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id="hexadecimal-representation-of-address"&gt;Hexadecimal representation of address&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often used is the hexadecimal representation for address (saw that in lecture by Prof. Jakob Eriksson). For ex, convert 10,995 into hexadecimal value would be 2AF3. The prefix &lt;code class="highlighter-rouge"&gt;0x&lt;/code&gt; is used in C (and probably also in assembly) to denote this in hexadecimal system, which would denote this value by &lt;code class="highlighter-rouge"&gt;0x2AF3&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sidhantnagpal.github.io/2018/05/gsoc-week2</guid>
      <author>Sidhant Nagpal (sidhantnagpal)</author>
      <title>Sidhant Nagpal (sidhantnagpal): GSoC: SymPy - Week 2</title>
      <pubDate>Tue, 29 May 2018 00:00:00 GMT</pubDate>
      <link>https://sidhantnagpal.github.io/2018/05/gsoc-week2.html</link>
      <description>&lt;p&gt;&lt;img src="https://sidhantnagpal.github.io/files/gsoc-sympy.png" style="width: 80%; height: 80%; float: left; margin-left: 50px;" /&gt;
&lt;br clear="all" /&gt;&lt;/p&gt;

&lt;p&gt;The second week of Coding Period has concluded.&lt;/p&gt;

&lt;p&gt;I started the week by finalizing the PR &lt;a href="https://github.com/sympy/sympy/pull/14725"&gt;#14725&lt;/a&gt;. The PR has been merged successfully. Fast Walsh Hadamard Transform (&lt;code class="highlighter-rouge"&gt;fwht&lt;/code&gt;) will be added along with XOR Convolution at a later point of time.&lt;/p&gt;

&lt;p&gt;Late this week, I started working on the convolution module &lt;a href="https://github.com/sympy/sympy/pull/14745"&gt;PR #14745&lt;/a&gt; with the aim of adding the following along with appropriate tests.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Convolution using Fast Fourier Transform (&lt;code class="highlighter-rouge"&gt;convolution_fft&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Convolution using Number Theoretic Transform (&lt;code class="highlighter-rouge"&gt;convolution_ntt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;General Convolution method (&lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; and &lt;a href="https://github.com/asmeurer"&gt;Aaron&lt;/a&gt; suggested using &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; as the name for the methods instead of &lt;code class="highlighter-rouge"&gt;conv&lt;/code&gt;.
I had a detailed discussion with &lt;a href="https://github.com/jksuom"&gt;Kalevi&lt;/a&gt; regarding the API of the methods, the need to tie convolution with DFT (Discrete Fourier Transform), and handling the cyclic convolution case.&lt;/p&gt;

&lt;p&gt;Successive reviews helped in the following changes to PR:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;including &lt;code class="highlighter-rouge"&gt;cycle&lt;/code&gt; for general &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; method&lt;/li&gt;
  &lt;li&gt;usage of &lt;code class="highlighter-rouge"&gt;**hints&lt;/code&gt; argument in &lt;code class="highlighter-rouge"&gt;convolution&lt;/code&gt; for flexibility of the API&lt;/li&gt;
  &lt;li&gt;handling empty list &lt;code class="highlighter-rouge"&gt;[]&lt;/code&gt; cases&lt;/li&gt;
  &lt;li&gt;defaulting &lt;code class="highlighter-rouge"&gt;cycle=0&lt;/code&gt; as normal convolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to another exciting week.&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://ravicharann.github.io/blog//Word-Reduction/</guid>
      <author>Ravicharan (RavicharanN)</author>
      <title>Ravicharan (RavicharanN): Using automaton for word reduction in Rewriting Systems</title>
      <pubDate>Mon, 28 May 2018 00:00:00 GMT</pubDate>
      <link>https://ravicharann.github.io/blog//Word-Reduction/</link>
      <description>&lt;p&gt;GSoC'18 Week 1 and 2</description>
    </item>
    <item>
      <guid isPermaLink="false">https://Yathartha22.github.io//gsoc-week-2</guid>
      <author>Yathartha Joshi (Yathartha22)</author>
      <title>Yathartha Joshi (Yathartha22): GSoC 2018 - Week 2 - Getting started with transolve</title>
      <pubDate>Sun, 27 May 2018 00:00:00 GMT</pubDate>
      <link>https://Yathartha22.github.io//gsoc-week-2</link>
      <description>&lt;p&gt;So this is the end of the second week of GSoC and I am still working on implementing and improving &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;. In the previous week Amit and I discussed about the things that are necessary for implementing &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt;. I have covered it in the previous &lt;a href="https://yathartha22.github.io//gsoc-week-1"&gt;blog post&lt;/a&gt;. Based on the discussions I have a submitted a WIP PR &lt;a href="https://github.com/sympy/sympy/pull/14736"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the second meeting we had &lt;a href="https://github.com/hargup"&gt;Harsh&lt;/a&gt; joining us to the discussion.&lt;/p&gt;

&lt;p&gt;Amit and Harsh stressed on making transolve modular and extensilbe, unlike &lt;code class="highlighter-rouge"&gt;_tsolve&lt;/code&gt; which lacks these features (though it is very powerful).&lt;/p&gt;

&lt;p&gt;So there are few things that &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; should have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proper documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentation is always a very important aspect of any software. Therefore to make it easy to understand to the users, transolve needs to have a proper descriptive documentation that should explain why, what and how of transolve. Amit suggested on covering every detail of the working of function. It should cover the following:&lt;/p&gt;

&lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;- What is transolve.
- How to use transolve.
- Why it is better than `_tsolve`.
- How equations are solved.
- How to add a new class of equations.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Extensibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; should be extensible, i.e. the design of the API should be such that it becomes easy to add a new class of equation solver without affecting the structure of the function.
The idea to make this happen is to have a two step procedure of equation solving. &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; will solve any equation by first identifying the class of the equations (a helper will do that) and then calling another helper to solve that equation. So in this way one needs to figure out how to identify the equation and how to solve it. Once this is done he just needs to invoke the helpers at the proper location in transolve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modularity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it is clear from the above point, &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; will have two step procedure for solving different classes of equations. Helper function needs to be implemented for identification and solving equations. This will make &lt;code class="highlighter-rouge"&gt;transolve&lt;/code&gt; modular as solving equations will not depend on the main function.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proof of correctness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since identification and solving equations will be achieved with few heuristics/algorithms. There should be a proper document of its prof of correctness. I will be adding proper documentation with examples explaining its authenticity.&lt;/p&gt;

&lt;p&gt;Apart from this Amit also adviced on reading documentation of &lt;a href="https://github.com/sympy/sympy/blob/master/sympy/solvers/ode.py"&gt;ode&lt;/a&gt; module so as to get an idea, also importing tests from solve, making it atleast as powerful as _tsolve will be other things that needs care.&lt;/p&gt;

&lt;p&gt;I will be focussing on completing it by this week!!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-1036447522835236737.post-2627530986362511513</guid>
      <author>Ashish Kumar Gaurav (ashishkg0022)</author>
      <title>Ashish Kumar Gaurav (ashishkg0022): GSoC 2018: Week 2</title>
      <pubDate>Sat, 26 May 2018 20:39:44 GMT</pubDate>
      <link>http://ashishkg0022.blogspot.com/2018/05/gsoc-2018-week-2.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Hello everyone. Here is the brief work done and progress in my project (Rubi) in the second week.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;This week was quite frustrating for me. I gave a lot of time but the outcome was little less. Initially my aim was to solve the problem of the order in which rule was matched. But I have to revert back to my initial structure as the new structure was extremely time consuming. Next I thought to keep track of the rules applied to an expression. This could be a great help in debugging too. So I implemented it.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Next I moved on to testing &lt;i&gt;trinomial_products . &lt;/i&gt;But here also results were not good. Our rules are of older version (4.10.8) , but we did not have the test-suite of that version. So I tried extremely hard to test those tests with rubi 4.10.8 . For 3 - 4 days , I put a great effort. At last I realised, things will not work this way. So, I then mailed to Albert, the maintainer of original Rubi, asking him for the test-suite of older version. And the good part is that he has provided me the test-suite today. So now I will move to test our rubi with this test-suite.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;In between all this, I found some errors in utility function . I corrected them and updated the &lt;a href="https://github.com/sympy/sympy/pull/14724"&gt;PR&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;Here are the works done by me this week :&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Made necessary changes in the &lt;i&gt;parsetools&lt;/i&gt; and &lt;i&gt;rubi , &lt;/i&gt;so that it keeps track of the rules applied to an expression.&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;&lt;i&gt;test_1_2 &lt;/i&gt;of algebraic rules completely passes without any failure. (Removed all &lt;i&gt;@XFAIL &lt;/i&gt;from &lt;i&gt;test_1_2 &lt;/i&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li style="text-align: justify;"&gt;&lt;span&gt;Corrected &lt;i&gt;AppellF1, NegQ, PositiveQ, BinomialMatchQ, TrinomialMatchQ &lt;/i&gt;in the utility functions.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div style="text-align: justify;"&gt;&lt;span&gt;For the upcoming week I plan to make test suits of &lt;i&gt;trinomial&lt;/i&gt; and &lt;i&gt;miscellaneous algebra &lt;/i&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
