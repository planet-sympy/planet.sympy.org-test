<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Planet SymPy</title>
    <link>http://planet.sympy.org/</link>
    <language>en</language>
    <description>Planet SymPy - http://planet.sympy.org/</description>
    <atom:link href="http://planet.sympy.org/rss10.xml" rel="self" type="application/rss+xml"/>
    <item>
      <guid isPermaLink="false">https://gxyd.github.io/GSoC 2016 Phase I : Proposal, Acceptance</guid>
      <title>GSoC 2016 Phase I : Proposal, Acceptance</title>
      <author>Gaurav Dhingra (gxyd)</author>
      <pubDate>Wed, 04 May 2016 18:30:00 GMT</pubDate>
      <link>https://gxyd.github.io/gsoc2016/gsoc-with-sympy.html</link>
      <description>&lt;p&gt;Hello, I'm Gaurav Dhingra a 3rd year undergraduate student at IIT Roorkee, my proposal on Group Theory with &lt;i&gt;SymPy&lt;/i&gt; has been accepted as a part of &lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
First, a little bit about &lt;a href="http://www.sympy.org/"&gt;SymPy&lt;/a&gt;, a &lt;i&gt;Computer Algebra System&lt;/i&gt; (CAS) written entirely in Python. SymPy 1.0 was released about 2 months ago, &lt;i&gt;Sympy&lt;/i&gt; has been created by hundreds of contributors starting from 2006.

I will be working on Group Theory over the summer, for the next 3 months, to implement Computational Group Theory (CGT) and Group Theory, which are parts of mathematics I particularly enjoy. You can view my project proposal &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2016-Application-Gaurav-Dhingra:-Group-Theory"&gt;GSoC 2016 Application Gaurav Dhingra: Group Theory&lt;/a&gt;. Until a few days ago I was pretty busy with my exams, but in the next few weeks I will go over working on the project. I will particularly focus on Finite and Finitely Presented Groups.
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
I hope that I'll be able to implement everything that I promised in it. Moving onto the ongoing community bonding. Since I am very well acquitted with the workflow of SymPy, I can get straight to few important things, which i will do in the next few days.

&lt;br /&gt;&lt;br /&gt;
This includes things like:
&lt;ul&gt;
  &lt;li&gt;
    Setting up a blog with RSS feed i.e this blog in which I am supposed to add an RSS feed functionality.
  &lt;/li&gt;
  &lt;li&gt;
    Talking to my mentors regarding the time, and place of chat on internet, we differ by almost 5hrs. Time wouldn't be an issue, since seeing from past, I haven't faced such difficulty as both me and my mentor work for almost the same time intervals. From the GSoC 2015 discussions, I remember that Ondrej tries to make sure everyone knows what time student-mentor meet, since of different time zones.
  &lt;/li&gt;
  &lt;li&gt;
    In the past we have had discussion on my private gitter channel &lt;a href="https://gxyd.github.io/feeds/atom.xml"&gt;Group Theory Implementation&lt;/a&gt;. &lt;i&gt;Would it be wise to continue code discussions there?&lt;/i&gt;. Since no one can be added in the channel without my permission.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
One thing that has been a hell of a lot annoying has been the GSoC mailing list, it's a lot distracting. I changed list settings to abridged daily updates because I was getting like 50 mails every day and that too about some really stupid and irrelevant things. But yeah like whatever.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;i&gt;"LESS TALK, MORE CODE"&lt;/i&gt; is the policy that I always tend to follow (not for blog!!). I will try my best to implement it in a strict way this summer. I have seen this policy working fine for me, mostly first I start writing question in a message box to my mentor, and then i think more about it myself and in the end I come up with a solution on my own, instead of asking.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'm quite sure that I will write more than enough blog posts about my project during the summers. Since I enjoy writing and that too regarding things that occupy larger part of my day.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I'd like to thank all the people involved with contributions to &lt;i&gt;SymPy&lt;/i&gt;. My special thanks to my mentor - &lt;a href="https://github.com/jksuom"&gt;Kalevi Suominen&lt;/a&gt; and my co-mentor - &lt;a href="https://github.com/asmeurer"&gt;Aaron Meurer&lt;/a&gt; for all the suggestions while making my proposal, and showing faith and enthusiasm in my ability and my proposal.
&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//Selected</guid>
      <title>Selected</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Fri, 29 Apr 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//Selected/</link>
      <description>&lt;p&gt;I have been selected for GSoC&amp;#8217;16! The results came out on Apr 23, and I have never been happier! I got around to writing this blog post only now, because of my end semester examinations which ended yesterday. I have been alotted &lt;a href="https://github.com/isuruf"&gt;Isuru&lt;/a&gt; and &lt;a href="https://github.com/sumith1896"&gt;Sumith&lt;/a&gt; as my official mentors. I&amp;#8217;m very excited to start working on the project, alongside them.&lt;/p&gt;

&lt;p&gt;Right now, I&amp;#8217;ll start my discussions on the implementation details, and overall structure of the code. Also I will begin work on the Fast Fourier algorithm for univariate polynomial multiplication.&lt;/p&gt;

&lt;p&gt;Looking forward to a busy summer!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://rajithsays.wordpress.com/?p=46</guid>
      <title>GSoC &#x2013; Prologue</title>
      <author>Rajith Vidanaarachchi (rajithv)</author>
      <pubDate>Tue, 26 Apr 2016 06:53:46 GMT</pubDate>
      <link>https://rajithsays.wordpress.com/2016/04/26/gsoc-prologue/</link>
      <description>&lt;p&gt;So, I have been accepted for the Google Summer of Code &amp;#8211; 2016 for the project &amp;#8220;Ruby Wrappers for SymEngine&amp;#8221;, under the mentoring organization SciRuby.&lt;/p&gt;
&lt;p&gt;The aim of this post is to give an introduction to the project.&lt;/p&gt;
&lt;p&gt;The abstract of the project is as follows:&lt;/p&gt;
&lt;div&gt;A project started by the SymPy organisation, SymEngine is a standalone fast C++ symbolic manipulation library. It solves mathematical problems the same way a human does, but way more quickly and precisely. The motivation for SymEngine is to develop the Computer Algebra System once in C++ and then use it from other languages rather than doing the same thing all over again for each language that it is required in. The project for Ruby bindings has already been setup at symengine.rb. Few things that the project involves are:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Extending the C interface of SymEngine library.&lt;/li&gt;
&lt;li&gt;Wrapping up the C interface for Ruby using Ruby C API, including error handling.&lt;/li&gt;
&lt;li&gt;Designing the Ruby interface.&lt;/li&gt;
&lt;li&gt;Integrating IRuby with symengine gem for better printing and writing IRuby notebooks.&lt;/li&gt;
&lt;li&gt;Integrating the gem with existing gems like gmp, mpfr and mpc.&lt;/li&gt;
&lt;li&gt;Making the installation of symengine gem easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, the &lt;a href="https://docs.google.com/document/d/1HKEzqpm3yk9ax5Fs7POQaBFZFxSOjy1MXNyeB7JXBxg/edit?usp=sharing" target="_blank"&gt;full proposal&lt;/a&gt;, which includes the timeline is available online.&lt;/p&gt;
&lt;p&gt;Also, the GitHub repository for the project is at &lt;a href="https://github.com/symengine/symengine.rb" target="_blank"&gt;SymEngine/SymEngine.rb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The actual coding phase starts in about a month, and before that I plan to complete the&amp;#160;&lt;a href="https://github.com/symengine/symengine.rb/pull/23"&gt;&lt;span style="font-weight: 400;"&gt;Ruby Wrappers for the Trigonometric and Hyperbolic Functions&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and to write the necessary tests.&amp;#160;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Next, the NTheory CWrappers can be wrapped into Ruby. This too will be done before the GSoC period starts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Keep checking the blog if you are interested to track the progress of this project. I will be posting&amp;#160;weekly updates in the blog.&lt;/p&gt;
&lt;p&gt;Auf Wiedersehen!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br /&gt;  &lt;a href="http://feeds.wordpress.com/1.0/gocomments/rajithsays.wordpress.com/46/" rel="nofollow"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/rajithsays.wordpress.com/46/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" height="1" src="https://pixel.wp.com/b.gif?host=rajithsays.wordpress.com&amp;#038;blog=110498904&amp;#038;post=46&amp;#038;subd=rajithsays&amp;#038;ref=&amp;#038;feed=1" width="1" /&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/SymPy Workshop at FOSSASIA 2016, Singapore</guid>
      <title>SymPy Workshop at FOSSASIA 2016, Singapore</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Fri, 25 Mar 2016 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/sympy-workshop-fossasia-2016</link>
      <description>&lt;p&gt;Hi there! Last week I went to &lt;a href="https://en.wikipedia.org/wiki/Singapore"&gt;Singapore&lt;/a&gt; for &lt;a href="http://2016.fossasia.org/"&gt;FOSSASIA&lt;/a&gt; Open Tech Summit  2016. I conducted a Worskhop on &lt;a href="http://sympy.org"&gt;SymPy&lt;/a&gt; and assisted the &lt;a href="http://pydy.org"&gt;PyDy&lt;/a&gt; Workshop in Python track hosted by &lt;a href="https://kushaldas.in/"&gt;Kushal Das&lt;/a&gt;. This blog post accounts to my experience as a speaker, as a attendee at FOSSASIA and as a traveler to Singapore.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;About FOSSASIA&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia.png" width="200" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FOSSASIA is the premier Free and Open Source technology event in Asia for developers, start-ups, and contributors. Projects at FOSSASIA range from open hardware, to design, graphics and software. FOSSASIA was established in 2009. Previous events took place in Cambodia and Vietnam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the name suggests its one of the largest tech conferences in Asia and my expectations were pretty high from this conference and moreover It was my first international conference. I witnessed lots of amazing people in the conference and interacted with a few as well. This is how it started: &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/harish-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;The SymPy/PyDy Workshop&lt;/h2&gt;

&lt;p&gt;Community is more important than Code @ Singapore Science Center Level 3, Pauling Lab
&lt;img align="center" src="http://iamit.in/assets/sympy-zen.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;The SymPy and PyDy workshop was scheduled on 20th March at 1:00 - 2:00 PM (PyDy) and 2:00 - 4:00 PM (SymPy). &lt;a href="http://www.moorepants.info/"&gt;Jason&lt;/a&gt; suggested to conduct the SymPy workshop first since PyDy uses SymPy and it would be easier for people to learn SymPy first and then PyDy, but since the &lt;a href="http://2016.fossasia.org/schedule/"&gt;schedule&lt;/a&gt; was already published, It was not possible to reschedule the workshops, so we had to continue with PyDy first.
&lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; started the PyDy workshop at 1:00 PM, though we had to spend a lot of time installing Anaconda to everyone's systems by creating a local server and distributing flash drives as most of the people didn't had Anaconda or Canopy installed. This has been the problem for almost all the workshops I have conducted in the past. It seems I need to invent an efficient way to do this faster in future as we spent 30-40 odd minutes in installation. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href="https://github.com/sahilshekhawat"&gt;Sahil&lt;/a&gt; finished his presentation at around 2:15 PM. Then I took over for SymPy workshop, I started with the basic introduction to SymPy, the slides can be found &lt;a href="http://slides.com/aktech/sympy"&gt;here&lt;/a&gt;. Then I jumped to IPython notebook exercises to demonstrate more of SymPy. People were amazed by the capabilities of this amazing piece of software. The most beautiful feature they liked was printing and integration. The workshop went pretty well except for the glitches in the HDMI port of my laptop (probably, its the right time to get a new laptop). Here are some SymPy stickers for you, if you missed there.  &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/sympy-sticker-fossasia.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Singapore was Fun ;)&lt;/h2&gt;

&lt;p&gt;Visiting Singapore has been a great experience, the culture is a mix of &lt;a href="https://en.wikipedia.org/wiki/Malaysian"&gt;Malaysian&lt;/a&gt;, Indian and native Singaporean. The City is well connected with &lt;a href="https://en.wikipedia.org/wiki/Mass_Rapid_Transit_(Singapore)"&gt;MRT/SMRT&lt;/a&gt; (Metro and Buses). It's quite easy get anywhere around the city. People here are very helpful and nice. I didn't faced any problems throughout my stay there. I spent most of my time near &lt;a href="https://en.wikipedia.org/wiki/Science_Centre_Singapore"&gt;Science Center&lt;/a&gt;, China Town and Little India. There were lot of people from India and particularly from Delhi and three from my University. It was awesome time spent with geeks all around. Tagging some of them &lt;a href="http://devmaany.co/"&gt;Mayank&lt;/a&gt;, &lt;a href="http://www.ishankhanna.in/"&gt;Ishaan&lt;/a&gt;, &lt;a href="http://omerjerk.in/"&gt;Umair&lt;/a&gt;, &lt;a href="https://github.com/jig08"&gt;Jigyasa&lt;/a&gt;, &lt;a href="http://iyask.me/"&gt;Yask&lt;/a&gt;, &lt;a href="http://garvitdelhi.blogspot.in/"&gt;Garvit&lt;/a&gt;, &lt;a href="http://home.iiitd.edu.in/%7Emanan13056/"&gt;Manan&lt;/a&gt;, sorry If I missed someone. Here is a pic of the last day of the conference. &lt;/p&gt;

&lt;p&gt;&lt;img align="center" src="http://iamit.in/assets/fossasia-all.jpg" width="400" /&gt;&lt;/p&gt;

&lt;h2&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you FOSSASIA Organizing Team, Hong Phuc Dang for inviting me to be part of this awesome FOSS community.
I would not have been able to attend the conference without the generous financial support from SymPy, Thank you &lt;a href="http://www.ondrejcertik.com/"&gt;Ondrej Certik&lt;/a&gt;, &lt;a href="http://asmeurer.github.io/blog/"&gt;Aaron Meurer&lt;/a&gt; &amp;amp; SymPy contributors.&lt;/p&gt;

&lt;h3&gt;Good Bye!&lt;/h3&gt;

&lt;p&gt;Good bye! everyone, see you on my next blog post, meanwhile you can have a look at a Picture of me doing back flip at Sentosa ;)
&lt;img align="center" src="http://iamit.in/assets/amit-backflip.gif" /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://srajangarg.github.io//Initial-Commit</guid>
      <title>Initial Commit</title>
      <author>Srajan Garg (srajangarg)</author>
      <pubDate>Mon, 07 Mar 2016 00:00:00 GMT</pubDate>
      <link>http://srajangarg.github.io//Initial-Commit/</link>
      <description>&lt;p&gt;This is my first blog post. The blog was made to track progress of my GSoC project and get feedback from my mentors, if my proposal gets selected. I&amp;#8217;m proposing to implement the Multivariate and Univariate polynomial class in SymEngine.&lt;/p&gt;

&lt;p&gt;Wish me luck!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/SymPy Workshop at PyDelhi Meetup</guid>
      <title>SymPy Workshop at PyDelhi Meetup</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Sat, 06 Feb 2016 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/sympy-workshop-pydelhi-meetup</link>
      <description>&lt;p&gt;Hi there! It's been sometime now since my last blog post, It's probably the right time to write one now. Yesterday, I gave a talk on SymPy at Python Delhi User group Meetup at &lt;a href="https://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;q=29%2C+Rajpur+Road%2C+Delhi%2C+in"&gt;CSDS&lt;/a&gt;, New Delhi. Things never go the way you want, an hour was wasted in just setting up Anaconda on everyone's system, eventually I had to cut on the material I could demonstrate, though It was nice to see that people were very enthusiatic about SymPy, they actively solved excercises. It was fun interacting with everyone.&lt;/p&gt;

&lt;p&gt;Here is a Pic of the Seminar room at CSDS:
&lt;img align="center" src="http://iamit.in/assets/sympy-workshop.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I should also admit that, I have increased my appetite for attending conferences and meetups, these days. In the last 4 months I have attended 3 Meetups (PyDelhi Meetup) and 1 Conference (PyCon India 2015). I think this is one of the best things I have done in last few years &amp;amp; I would recommend anyone with a slight interest in Python either Beginner or Expert should attend &lt;a href="http://www.pydelhi.org"&gt;PyDelhi&lt;/a&gt; &lt;a href="http://www.meetup.com/pydelhi/events/"&gt;Meetups&lt;/a&gt;. Looking forward to more such meetups and conferences.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://iamit.in/assets/sympy-sticker.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I gave SymPy stickers to everyone who solved atleast one excercise (Since, I didn't had enough stickers).&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</guid>
      <title>What happens when you mess with hashing in Python</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Tue, 26 Jan 2016 04:13:53 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</link>
      <description>&lt;div&gt;&lt;p&gt;&lt;em&gt;This post is based off a Jupyter notebook I made in 2013. You can download
the original &lt;a href="https://gist.github.com/asmeurer/6046766"&gt;here&lt;/a&gt;. That notebook
was based off a
&lt;a href="https://github.com/sympy/sympy/wiki/What-happens-when-you-mess-with-hashing"&gt;wiki page&lt;/a&gt;
on the SymPy wiki, which in turn was based on
&lt;a href="https://groups.google.com/forum/#%21msg/sympy/pJ2jg2csKgU/0nn21xqZEmwJ"&gt;a message&lt;/a&gt;
to the SymPy mailing list.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What is hashing?&lt;/h2&gt;
&lt;p&gt;Before we start, let's have a brief introduction to hashing. A
&lt;a href="https://en.wikipedia.org/wiki/Hash_function"&gt;&lt;em&gt;hash function&lt;/em&gt;&lt;/a&gt; is a function
that maps a set of objects to a set of integers. There are many kinds of hash
functions, which satisfy many different properties, but the most important
property that must be satisfied by any hash function is that it be a function
(in the mathematical sense), that is, if two objects are equal, then their
hash should also be equal.&lt;/p&gt;
&lt;p&gt;Usually, the set of integers that the hash function maps to is much smaller
than the set of objects, so that there will be multiple objects that hash to
the same value. However, generally for a hash function to be useful, the set
of integers should be large enough, and the hash function well distributed
enough that if two objects hash to the same value, then they are very likely
to be equal.&lt;/p&gt;
&lt;p&gt;To summarize, a hash function &lt;em&gt;must&lt;/em&gt; satisfy the property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If two objects are equal, then their hashes should be equal.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, a &lt;em&gt;good&lt;/em&gt; hash function should satisfy the property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If two objects have the same hash, then they are likely to be the same
object.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since there are generally more possible objects than hash values, two objects
may hash to the same value. This is called a
&lt;a href="https://en.wikipedia.org/wiki/Hash_collision"&gt;hash collision&lt;/a&gt;, and anything
that deals with hashes should be able to deal with them.&lt;/p&gt;
&lt;p&gt;This won't be discussed here, but an additional property that a good hash
function should satisfy to be useful is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The hash of an object should be cheap to compute.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is it used for?&lt;/h2&gt;
&lt;p&gt;If we have a hash function that satisfies the above properties, then we can
use it to create from a collection of objects something called a &lt;em&gt;hash table&lt;/em&gt;.
Suppose we have a collection of objects, and given any object, we want to be
able to compute very quickly if that object belongs to our collection. We
could store these objects in an ordered array, but then to determine if it is
in the array, we would have to search potentially through every element of the
array (in other words, an \(O(n)\)) algorithm.&lt;/p&gt;
&lt;p&gt;With hashing, we can do better. We create what is known as a
&lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;&lt;em&gt;hash table&lt;/em&gt;&lt;/a&gt;. Instead of storing
the objects in an ordered array, we create an array of buckets, each
corresponding to some hash values. We then hash each object, and store it into
the array corresponding to its hash value (if there are more hash values than
buckets, we distribute them using a second hash function, which can be as
simple as taking the modulus with respect to the number of buckets, &lt;code&gt;% n&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This image from
&lt;a href="https://en.wikipedia.org/wiki/File:Hash_table_3_1_1_0_1_0_0_SP.svg"&gt;Wikipedia&lt;/a&gt;
shows an example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="https://upload.wikimedia.org/wikipedia/commons/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg" /&gt;&lt;/p&gt;
&lt;p&gt;To determine if an object is in a hash table, we only have to hash the object,
and look in the bucket corresponding to that hash. This is an \(O(1)\)
algorithm, assuming we have a good hash function, because each bucket will
generally hold very few objects, possibly even none.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: there are some additional things that need to be done to handle hash
collisions, but the basic idea is the same, and as long as there aren't too
many hash collisions, which should happen if hash values are evenly
distributed and the size of the hash table is large compared to the number of
objects stored in it, the average time to determine if an object is in the
hash table is still \(O(1)\).&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Hashing in Python&lt;/h2&gt;
&lt;p&gt;Python has a built in function that performs a hash called &lt;code&gt;hash()&lt;/code&gt;.  For many
objects, the hash is not very surprising.  Note, the hashes you see below may
not be the same ones you see if you run the examples, because Python hashing
depends on the architecture of the machine you are running on, and, in newer
versions of Python, hashes are randomized for security purposes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(10)
10
&amp;gt;&amp;gt;&amp;gt; hash(()) # An empty tuple
3527539
&amp;gt;&amp;gt;&amp;gt; hash('a')
12416037344
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Python, not all objects are hashable. For example&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash([]) # An empty list
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: unhashable type: 'list'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because Python has an additional restriction on hashing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In order for an object to be hashable, it must be immutable.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is important basically because we want the hash of an object to remain
the same across the object's lifetime. But if we have a mutable object, then
that object itself can change over its lifetime. But then according to our
first bullet point above, that object's hash has to change too.&lt;/p&gt;
&lt;p&gt;This restriction simplifies hash tables. If we allowed an object's hash to
change while it is in a hash table, we would have to move it to a different
bucket. Not only is this costly, but the hash table would have to &lt;em&gt;notice&lt;/em&gt;
that this happened; the object itself doesn't know that it is sitting in a
hash table, at least not in the Python implementation.&lt;/p&gt;
&lt;p&gt;In Python, there are two objects that correspond to hash tables, &lt;code&gt;dict&lt;/code&gt; and
&lt;code&gt;set&lt;/code&gt;. A &lt;code&gt;dict&lt;/code&gt; is a special kind of hash table called an
&lt;a href="https://en.wikipedia.org/wiki/Associative_array"&gt;&lt;em&gt;associative array&lt;/em&gt;&lt;/a&gt;. An
associative array is a hash table where each element of the hash table points
to another object. The other object itself is not hashed.&lt;/p&gt;
&lt;p&gt;Think of an associative array as a generalization of a regular array (like a
&lt;code&gt;list&lt;/code&gt;). In a &lt;code&gt;list&lt;/code&gt;, objects are associated to nonnegative integer indices,
like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; l = ['a', 'b', 7]
&amp;gt;&amp;gt; l[0]
'a'
&amp;gt;&amp;gt;&amp;gt; l[2]
7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In an associative array (i.e., a &lt;code&gt;dict&lt;/code&gt;) we can index objects by anything, so
long as the key is hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; d = {0: 'a', 'hello': ['world']}
&amp;gt;&amp;gt;&amp;gt; d[0]
'a'
&amp;gt;&amp;gt;&amp;gt; d['hello']
['world']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that only the keys need to be hashable. The values can be anything, even
unhashable objects like lists.&lt;/p&gt;
&lt;p&gt;The uses for associative arrays are boundless. &lt;code&gt;dict&lt;/code&gt; is one of the most
useful data types in the Python language. Some example uses are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Extension of &lt;code&gt;list&lt;/code&gt; with "missing values". For example, &lt;code&gt;{0: 'a', 2: 7}&lt;/code&gt;
would correspond to the above list &lt;code&gt;l&lt;/code&gt; with the value &lt;code&gt;'b'&lt;/code&gt; corresponding to
the key &lt;code&gt;1&lt;/code&gt; removed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Representation of a mathematical function with a finite domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A poor-man's database (the Wikipedia image above is an associative array
mapping names to telephone numbers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementing a &lt;a href="https://stackoverflow.com/q/60208/161801"&gt;Pythonic version&lt;/a&gt;
of the switch-case statement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other type of hash table, &lt;code&gt;set&lt;/code&gt;, more closely matches the definition I
gave above for a hash table. A &lt;code&gt;set&lt;/code&gt; is just a container of hashable
objects. &lt;code&gt;set&lt;/code&gt;s are unordered, and can only contain one of each object (this
is why they are called "sets," because this matches the mathematical
definition of a &lt;a href="https://en.wikipedia.org/wiki/Set_(mathematics)"&gt;set&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Python 2.7 or later, you can create a set with &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, like &lt;code&gt;{a, b, c}&lt;/code&gt;. Otherwise, use &lt;code&gt;set([a, b, c])&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; s = {0, (), '2'}
&amp;gt;&amp;gt;&amp;gt; s
{0, '2', ()}
&amp;gt;&amp;gt;&amp;gt; s.add(1)
&amp;gt;&amp;gt;&amp;gt; s
{0, 1, '2', ()}
&amp;gt;&amp;gt;&amp;gt; s.add(0)
&amp;gt;&amp;gt;&amp;gt; s
{0, 1, '2', ()}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A final note: &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt; are themselves mutable, and hence not hashable!
There is an immutable version of &lt;code&gt;set&lt;/code&gt; called &lt;code&gt;frozenset&lt;/code&gt;. There are no
immutable dictionaries.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; f = frozenset([0, (), '2'])
&amp;gt;&amp;gt;&amp;gt; f
frozenset({0, '2', ()})
&amp;gt;&amp;gt;&amp;gt; hash(f)
-7776452922777075760
&amp;gt;&amp;gt;&amp;gt; # A frozenset, unlike a set, can be used as a dictionary key
&amp;gt;&amp;gt;&amp;gt; d[f] = 'a set'
&amp;gt;&amp;gt;&amp;gt; d
{0: 'a', frozenset({0, '2', ()}): 'a set', 'hello': ['world']}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Creating your own hashable objects&lt;/h2&gt;
&lt;p&gt;Before we move on, there is one final thing we need to know about hashing in
Python, which is how to create hashes for custom objects. By default, if we
create an object, it will be hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class Nothing(object):
...     pass
...
&amp;gt;&amp;gt;&amp;gt; N = Nothing()
&amp;gt;&amp;gt;&amp;gt; hash(N)
270498113
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implementation-wise, the hash is just the object's &lt;code&gt;id&lt;/code&gt;, which corresponds to
its position in memory. This satisfies the above conditions: it is (extremely)
cheap to compute, and since by default objects in Python compare unequal to
one another, objects with different hashes will be unequal.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; M = Nothing()
&amp;gt;&amp;gt;&amp;gt; M == N
False
&amp;gt;&amp;gt;&amp;gt; hash(M)
270498117
&amp;gt;&amp;gt;&amp;gt; hash(M) == hash(N)
False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To define a hash function for an object, define the &lt;code&gt;__hash__&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class HashToOne(object):
...     def __hash__(self):
...         return 1
...
&amp;gt;&amp;gt;&amp;gt; HTO = HashToOne()
&amp;gt;&amp;gt;&amp;gt; hash(HTO)
1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To set an object as not hashable, set &lt;code&gt;__hash__&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class NotHashable(object):
...     __hash__ = None
...
&amp;gt;&amp;gt;&amp;gt; NH = NotHashable()
&amp;gt;&amp;gt;&amp;gt; hash(NH)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: unhashable type: 'NotHashable'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, to override the equality operator &lt;code&gt;==&lt;/code&gt;, define &lt;code&gt;__eq__&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class AlwaysEqual(object):
...     def __eq__(self, other):
...         if isinstance(other, AlwaysEqual):
...             return True
...        return False
...
&amp;gt;&amp;gt;&amp;gt; AE1 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; AE2 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; AE1 == AE2
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the key points that I hope you will take away from this post is that if
you override &lt;code&gt;__eq__&lt;/code&gt;, you &lt;strong&gt;must&lt;/strong&gt; also override &lt;code&gt;__hash__&lt;/code&gt; to agree. Note
that Python 3 will actually require this: in Python 3, you cannot override
&lt;code&gt;__eq__&lt;/code&gt; and not override &lt;code&gt;__hash__&lt;/code&gt;. But that's as far as Python goes in
enforcing these rules, as we will see below. In particular, Python will never
actually check that your &lt;code&gt;__hash__&lt;/code&gt; actually agrees with your &lt;code&gt;__eq__&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Messing with hashing&lt;/h2&gt;
&lt;p&gt;Now to the fun stuff. What happens if we break some of the invariants that
Python expects of hashing. Python expects two key invariants to hold&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The hash of an object does not change across the object's lifetime (in
other words, a hashable object should be immutable).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; (note that the reverse might not
hold in the case of a hash collision).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we shall see, Python expects, but does not enforce either of these.&lt;/p&gt;
&lt;h3&gt;Example 1: Mutating a hash&lt;/h3&gt;
&lt;p&gt;Let's break rule 1 first. Let's create an object with a hash, and then change
that object's hash over its lifetime, and see what sorts of things can happen.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class Bad(object):
...     def __init__(self, hash): # The object's hash will be hash
...         self.hash = hash
...     def __hash__(self):
...         return self.hash
...
&amp;gt;&amp;gt;&amp;gt; b = Bad(1)
&amp;gt;&amp;gt;&amp;gt; hash(b)
1
&amp;gt;&amp;gt;&amp;gt; d = {b:42}
&amp;gt;&amp;gt;&amp;gt; d[b]
42
&amp;gt;&amp;gt;&amp;gt; b.hash = 2
&amp;gt;&amp;gt;&amp;gt; hash(b)
2
&amp;gt;&amp;gt;&amp;gt; d[b]
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: &amp;lt;__main__.Bad object at 0x1047e7438&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we implicitly changed the hash of &lt;code&gt;b&lt;/code&gt; by mutating the attribute of &lt;code&gt;b&lt;/code&gt;
that is used to compute the hash. As a result, the object is no longer found
in a dictionary, which uses the hash to find the object.&lt;/p&gt;
&lt;p&gt;The object is still there, we just can't access it any more.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; d
{&amp;lt;__main__.Bad object at 0x1047e7438&amp;gt;: 42}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Python doesn't prevent me from doing this. We could make it if we
want (e.g., by making &lt;code&gt;__setattr__&lt;/code&gt; raise &lt;code&gt;AttributeError&lt;/code&gt;), but even then we
could forcibly change it by modifying the object's &lt;code&gt;__dict__&lt;/code&gt;. We could try
some more fancy things using descriptors, metaclasses, and/or
&lt;code&gt;__getattribute__&lt;/code&gt;, but even then, if we knew what was happening, we could
probably find a way to change it.&lt;/p&gt;
&lt;p&gt;This is what is meant when people say that Python is a "consenting adults"
language. You are expected to not try to break things, but generally aren't
prevented from doing so if you try.&lt;/p&gt;
&lt;h3&gt;Example 2: More mutation&lt;/h3&gt;
&lt;p&gt;Let's try something even more crazy. Let's make an object that hashes to a
different value each time we look at the hash.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class DifferentHash(object):
...     def __init__(self):
...         self.hashcounter = 0
...     def __hash__(self):
...         self.hashcounter += 1
...         return self.hashcounter
...
&amp;gt;&amp;gt;&amp;gt; DH = DifferentHash()
&amp;gt;&amp;gt;&amp;gt; hash(DH)
1
&amp;gt;&amp;gt;&amp;gt; hash(DH)
2
&amp;gt;&amp;gt;&amp;gt; hash(DH)
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, if we use &lt;code&gt;DH&lt;/code&gt; as a key to a dictionary, then it will not work,
because we will run into the same issue we had with &lt;code&gt;Bad&lt;/code&gt;. But what about
putting &lt;code&gt;DH&lt;/code&gt; in a &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset = {DH, DH, DH}
&amp;gt;&amp;gt;&amp;gt; DHset
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woah! We put the exact same object in a &lt;code&gt;set&lt;/code&gt; three times, and it appeared all
three times. This is not what is supposed to happen with a set.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; {1, 1, 1}
{1}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when we do stuff with &lt;code&gt;DHset&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset.remove(DH)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
KeyError: &amp;lt;__main__.DifferentHash object at 0x1047e75f8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That didn't work, because &lt;code&gt;set.remove&lt;/code&gt; searches for an object by its hash,
which is different by this point.&lt;/p&gt;
&lt;p&gt;Now let's make a copy of &lt;code&gt;DHset&lt;/code&gt;. The &lt;code&gt;set.copy&lt;/code&gt; method will create a shallow
copy (meaning that the set container itself will be different, according to
&lt;code&gt;is&lt;/code&gt; comparison, but the objects themselves will the same, according to &lt;code&gt;is&lt;/code&gt;
comparison).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; DHset2 = DHset.copy()
&amp;gt;&amp;gt;&amp;gt; DHset2 == DHset
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is fine so far. This object is only going to cause trouble if
something recomputes its hash. But remember that the whole reason that we had
trouble with something like &lt;code&gt;Bad&lt;/code&gt; above is that Python &lt;em&gt;doesn't&lt;/em&gt; recompute
that hash of an object, unless it has to. So let's do something that will
force it to do so: let's pop an object from one of the sets and add it back
in.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; D = DHset.pop()
&amp;gt;&amp;gt;&amp;gt; DHset.add(D)
&amp;gt;&amp;gt;&amp;gt; DHset
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; DHset2
{&amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;,
 &amp;lt;__main__.DifferentHash at 0x101f79f50&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; DHset == DHset2
False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go. By removing it from the set, we made the set forget about its
hash, so it had to be recomputed when we added it again. This version of
&lt;code&gt;DHset&lt;/code&gt; now has a &lt;code&gt;DH&lt;/code&gt; with a different hash than it had before. Thinking back
to &lt;code&gt;set&lt;/code&gt; being a hash table, in this &lt;code&gt;DHset&lt;/code&gt;, the three &lt;code&gt;DH&lt;/code&gt; objects are in
different "buckets" than they were in before. &lt;code&gt;DHset.__eq__(DHset2)&lt;/code&gt; notices
that the bucket structure is different right away and returns &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By the way, what hash value are we up to these days?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(DH)
9
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example 3: When &lt;code&gt;a == b&lt;/code&gt; does not imply &lt;code&gt;hash(a) == hash(b)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now let's look at point 2. What happens if we create an object with &lt;code&gt;__eq__&lt;/code&gt;
that disagrees with &lt;code&gt;__hash__&lt;/code&gt;. We actually already have made a class like
this, the &lt;code&gt;AlwaysEqual&lt;/code&gt; object above. Instances of &lt;code&gt;AlwaysEqual&lt;/code&gt; will always
compare equal to one another, but they will not have the same hash, because
they will use &lt;code&gt;object&lt;/code&gt;'s default &lt;code&gt;__hash__&lt;/code&gt; of &lt;code&gt;id&lt;/code&gt;. Let's take a closer look
at the &lt;code&gt;AE1&lt;/code&gt; and &lt;code&gt;AE2&lt;/code&gt; objects we created above.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(AE1)
270498221
&amp;gt;&amp;gt;&amp;gt; hash(AE2)
270498197
&amp;gt;&amp;gt;&amp;gt; hash(AE1) == hash(AE2)
False
&amp;gt;&amp;gt;&amp;gt; AE1 == AE2
True
&amp;gt;&amp;gt;&amp;gt; {AE1, AE2}
{&amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can already see that we have broken one of the key properties of a &lt;code&gt;set&lt;/code&gt;,
which is that it does not contain the same object twice (remember that &lt;code&gt;AE1&lt;/code&gt;
and &lt;code&gt;AE2&lt;/code&gt; should be considered the "same object" because &lt;code&gt;AE1 == AE2&lt;/code&gt; is
&lt;code&gt;True&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This can lead to subtle issues. For example, suppose we had a list and we
wanted to remove all the duplicate items from it. An easy way to do this is to
convert the list to a set and then convert it back to a list.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; l = ['a', 'a', 'c', 'a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; list(set(l))
['a', 'c', 'b']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, this method is obviously not going to work for a list of &lt;code&gt;AlwaysEqual&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE3 = AlwaysEqual()
&amp;gt;&amp;gt;&amp;gt; l = [AE1, AE1, AE3, AE2, AE3]
&amp;gt;&amp;gt;&amp;gt; list(set(l))
[&amp;lt;__main__.AlwaysEqual at 0x102c1d590&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actually, what happened here is that the equality that we defined on
&lt;code&gt;AlwaysEqual&lt;/code&gt; was essentially ignored. We got a list of unique items by &lt;code&gt;id&lt;/code&gt;,
instead of by &lt;code&gt;__eq__&lt;/code&gt;. You can imagine that if &lt;code&gt;__eq__&lt;/code&gt; were something a
little less trivial, where some, but not all, objects are considered equal,
that this could lead to very subtle issues.&lt;/p&gt;
&lt;p&gt;But there is an issue with the above algorithm. It isn't stable, that is, it
removes the ordering that we had on the list. We could do this better by
making a new list, and looping through the old one, adding elements to the new
list if they aren't already there.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def uniq(l):
...     newl = []
...     for i in l:
...         if i not in newl:
...             newl.append(i)
...     return newl
...
&amp;gt;&amp;gt;&amp;gt; uniq(['a', 'a', 'c', 'a', 'c', 'b'])
['a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; uniq([AE1, AE1, AE3, AE2, AE3])
[&amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, we used &lt;code&gt;in&lt;/code&gt;, which uses &lt;code&gt;==&lt;/code&gt;, so we got only one unique element of
the list of &lt;code&gt;AlwaysEqual&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;But there is an issue with this algorithm as well. Checking if something is in
a list is \(O(n)\), but we have an object that allows checking in \(O(1)\)
time, namely, a &lt;code&gt;set&lt;/code&gt;. So a more efficient version might be to create a set
alongside the new list for containment checking purposes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; def uniq2(l):
...     newl = []
...     newlset = set()
...     for i in l:
...         if i not in newlset:
...             newl.append(i)
...             newlset.add(i)
...     return newl
...
&amp;gt;&amp;gt;&amp;gt; uniq2(['a', 'a', 'c', 'a', 'c', 'b'])
['a', 'c', 'b']
&amp;gt;&amp;gt;&amp;gt; uniq2([AE1, AE1, AE3, AE2, AE3])
[&amp;lt;__main__.AlwaysEqual at 0x101f79ad0&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x102c1d590&amp;gt;,
 &amp;lt;__main__.AlwaysEqual at 0x101f79950&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bah! Since we used a set, we compared by hashing, not equality, so we are left
with three objects again. Notice the extremely subtle difference
here. Basically, it is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE1 in {AE2}
False
&amp;gt;&amp;gt;&amp;gt; AE1 in [AE2]
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set containment uses hashing; list containment uses equality. If the two don't
agree, then the result of your algorithm will depend on which one you use!&lt;/p&gt;
&lt;p&gt;By the way, as you might expect, dictionary containment also uses hashing, and
tuple containment uses equality:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; AE1 in {AE2: 42}
False
&amp;gt;&amp;gt;&amp;gt; AE1 in (AE2,)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example 4: Caching hashing&lt;/h3&gt;
&lt;p&gt;If you ever want to add subtle bizarreness to a system, add some sort of
caching, and then do it wrong.&lt;/p&gt;
&lt;p&gt;As we noted in the beginning, one important property of a hash function is
that it is quick to compute. A nice way to achieve this for heavily cached
objects is to cache the value of the cache on the object, so that it only
needs to be computed once. The pattern (which is modeled after SymPy's
&lt;code&gt;Basic&lt;/code&gt;) is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; class HashCache(object):
...     def __init__(self, arg):
...         self.arg = arg
...         self.hash_cache = None
...     def __hash__(self):
...         if self.hash_cache is None:
...             self.hash_cache = hash(self.arg)
...         return self.hash_cache
...     def __eq__(self, other):
...         if not isinstance(other, HashCache):
...             return False
...         return self.arg == other.arg
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HashCache&lt;/code&gt; is nothing more than a small wrapper around a hashable argument,
which caches its hash.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash('a')
12416037344
&amp;gt;&amp;gt;&amp;gt; a = HashCache('a')
&amp;gt;&amp;gt;&amp;gt; hash(a)
12416037344
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For ordinary Python builtins, simply recomputing the hash will be faster than
the attribute lookup used by &lt;code&gt;HashCache&lt;/code&gt;. &lt;em&gt;Note: This uses the &lt;code&gt;%timeit&lt;/code&gt; magic
from IPython. &lt;code&gt;%timeit&lt;/code&gt; only works when run in IPython or Jupyter.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; %timeit hash('a')
10000000 loops, best of 3: 69.9 ns per loop
&amp;gt;&amp;gt;&amp;gt; %timeit hash(a)
1000000 loops, best of 3: 328 ns per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But for a custom object, computing the hash may be more computationally
expensive. As hashing is supposed to agree with equality (as I hope you've
realized by now!), if computing equality is expensive, computing a hash
function that agrees with it might be expensive as well.&lt;/p&gt;
&lt;p&gt;As a simple example of where this might be useful, consider a highly nested
tuple, an object whose hash that is relatively expensive to compute.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = ()
&amp;gt;&amp;gt;&amp;gt; for i in range(1000):
...     a = (a,)
...
&amp;gt;&amp;gt;&amp;gt; A = HashCache(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; %timeit hash(a)
100000 loops, best of 3: 9.61 &amp;#181;s per loop
&amp;gt;&amp;gt;&amp;gt; %timeit hash(A)
1000000 loops, best of 3: 325 ns per loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, we haven't done anything wrong. &lt;code&gt;HashCache&lt;/code&gt;, as you may have noticed,
has &lt;code&gt;__eq__&lt;/code&gt; defined correctly:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; HashCache(1) == HashCache(2)
False
&amp;gt;&amp;gt;&amp;gt; HashCache(1) == HashCache(1)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what happens if we mutate a &lt;code&gt;HashCache&lt;/code&gt;. This is different from examples 1
and 2 above, because we will be mutating what happens with equality testing,
but not the hash (because of the cache).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the below example, recall that small integers hash to themselves, so
&lt;code&gt;hash(1) == 1&lt;/code&gt; and &lt;code&gt;hash(2) == 2&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; d = {a: 42}
&amp;gt;&amp;gt;&amp;gt; a.arg = 2
&amp;gt;&amp;gt;&amp;gt; hash(a)
1
&amp;gt;&amp;gt;&amp;gt; d[a]
42
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we cached the hash of &lt;code&gt;a&lt;/code&gt;, which was computed as soon as we created
the dictionary &lt;code&gt;d&lt;/code&gt;, it remained unchanged when modified the arg to be
&lt;code&gt;2&lt;/code&gt;. Thus, we can still find the key of the dictionary. But since we have
mutated &lt;code&gt;a&lt;/code&gt;, the equality testing on it has changed. This means that, as with
the previous example, we are going to have issues with dicts and sets keeping
unique keys and entries (respectively).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; hash(a)
1
&amp;gt;&amp;gt;&amp;gt; hash(b)
2
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; a == b
True
&amp;gt;&amp;gt;&amp;gt; hash(a) == hash(b)
False
&amp;gt;&amp;gt;&amp;gt; {a, b}
{&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;, &amp;lt;__main__.HashCache at 0x102c32450&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
[&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
[&amp;lt;__main__.HashCache at 0x102c32050&amp;gt;, &amp;lt;__main__.HashCache at 0x102c32450&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we mutate &lt;code&gt;b&lt;/code&gt; so that it compares equal to &lt;code&gt;a&lt;/code&gt;, we start to have the same sort of issues that we had in example 3 with &lt;code&gt;AlwaysEqual&lt;/code&gt;. Let's look at an instant replay.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
True
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32a10&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32a50&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32a50&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait a minute, this time it's different! Comparing it to above, it's pretty
easy to see what was different this time. We left out the part where we showed
the hash of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. When we did that the first time, it cached the hash
of &lt;code&gt;b&lt;/code&gt;, making it forever be &lt;code&gt;2&lt;/code&gt;, but when we didn't do it the second time,
the hash had not been cached yet, so the first time it is computed (in the
&lt;code&gt;print(hash(a) == hash(b))&lt;/code&gt; line), &lt;code&gt;b.arg&lt;/code&gt; has already been changed to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And herein lies the extreme subtlety: if you mutate an object with that hashes
its cache like this, you will run into issues &lt;strong&gt;only if&lt;/strong&gt; you had already
called some function that hashed the object somewhere. Now just about anything
might compute the hash of an object. Or it might not. For example, our &lt;code&gt;uniq2&lt;/code&gt;
function computes the hash of the objects in its input list, because it stores
them in a set, but &lt;code&gt;uniq&lt;/code&gt; does not:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
False
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;, &amp;lt;__main__.HashCache object at 0x102c32c10&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32c50&amp;gt;, &amp;lt;__main__.HashCache object at 0x102c32c10&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashCache(1)
&amp;gt;&amp;gt;&amp;gt; b = HashCache(2)
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
&amp;gt;&amp;gt;&amp;gt; b.arg = 1
&amp;gt;&amp;gt;&amp;gt; print(a == b)
True
&amp;gt;&amp;gt;&amp;gt; print(hash(a) == hash(b))
True
&amp;gt;&amp;gt;&amp;gt; print({a, b})
set([&amp;lt;__main__.HashCache object at 0x102c32c90&amp;gt;])
&amp;gt;&amp;gt;&amp;gt; print(uniq([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32bd0&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; print(uniq2([a, b]))
[&amp;lt;__main__.HashCache object at 0x102c32bd0&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The moral of this final example is that if you are going to cache something,
that something had better be immutable.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The conclusion is this: don't mess with hashing. The two invariants above are
important. Let's restate them here,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The hash of an object must not change across the object's lifetime (in
other words, a hashable object should be immutable).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; (note that the reverse might not
hold in the case of a hash collision).&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don't follow these rules, you will run into very subtle issues, because
very basic Python operations expect these invariants.&lt;/p&gt;
&lt;p&gt;If you want to be able to mutate an object's properties, you have two
options. First, make the object unhashable (set &lt;code&gt;__hash__ = None&lt;/code&gt;). You won't
be able to use it in sets or as keys to a dictionary, but you will be free to
change the object in-place however you want.&lt;/p&gt;
&lt;p&gt;A second option is to make all mutable properties non-dependent on hashing or
equality testing. This option works well if you just want to cache some
internal state that doesn't inherently change the object. Both &lt;code&gt;__eq__&lt;/code&gt; and
&lt;code&gt;__hash__&lt;/code&gt; should remain unchanged by changes to this state. You may also want
to make sure you use proper getters and setters to prevent modification of
internal state that equality testing and hashing does depend on.&lt;/p&gt;
&lt;p&gt;If you choose this second option, however, be aware that Python considers it
fair game to swap out two identical immutable (i.e., hashable) objects at any
time. If &lt;code&gt;a == b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is hashable, Python (and Python libraries) are free
to replace &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt; anywhere. For example, Python uses an optimization on
strings called &lt;em&gt;interning&lt;/em&gt;, where common strings are stored only once in
memory. A similar optimization is used in CPython for small integers. If store
something on &lt;code&gt;a&lt;/code&gt; but not &lt;code&gt;b&lt;/code&gt; and make &lt;code&gt;a&lt;/code&gt;'s hash ignore that data, you may
find that some function that should return &lt;code&gt;a&lt;/code&gt; may actually return &lt;code&gt;b&lt;/code&gt;. For
this reason, I generally don't recommend this second option unless you know
what you are doing.&lt;/p&gt;
&lt;p&gt;Finally, to keep invariant 2, here are some tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure that the parts of the object that you use to compare equality are
not themselves mutable. If they are, then your object cannot itself be
immutable. This means that if &lt;code&gt;a == b&lt;/code&gt; depends on &lt;code&gt;a.attr == b.attr&lt;/code&gt;, and
&lt;code&gt;a.attr&lt;/code&gt; is a list, then you will need to use a tuple instead (if you want
&lt;code&gt;a&lt;/code&gt; to be hashable).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't have to invent a hash function. If you find yourself doing
bitshifts and XORs, you're doing it wrong. Reuse Python's builtin hashable
objects. If the hash of your object should depend on the hash of &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt;, define &lt;code&gt;__hash__&lt;/code&gt; to return &lt;code&gt;hash((a, b))&lt;/code&gt;. If the order of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;
does not matter, use &lt;code&gt;hash(frozenset([a, b]))&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't cache something unless you know that the entire cached state will not
be changed over the lifetime of the cache. Hashable objects are actually
great for caches. If they properly satisfy invariant 1, and all the state
that should be cached is part of the hash, then you will not need to
worry. And the best part is that you can just use &lt;code&gt;dict&lt;/code&gt; for your cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unless you really need the performance or memory gains, don't make your
objects mutable. This makes programs much harder to reason about. Some
functional programming languages take this idea so far that they don't allow
any mutable objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't worry about the situation where &lt;code&gt;hash(a) == hash(b)&lt;/code&gt; but &lt;code&gt;a != b&lt;/code&gt;. This is a hash collision. Unlike the issues we looked at here, hash
collisions are expected and checked for in Python. For example, our
&lt;code&gt;HashToOne&lt;/code&gt; object from the beginning will always hash to 1, but different
instances will compare unequal. We can see that the right thing is done in
every case with them.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; a = HashToOne()
&amp;gt;&amp;gt;&amp;gt; b = HashToOne()
&amp;gt;&amp;gt;&amp;gt; a == b
False
&amp;gt;&amp;gt;&amp;gt; hash(a) == hash(b)
True
&amp;gt;&amp;gt;&amp;gt; {a, b}
{&amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; uniq([a, b])
[&amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; uniq2([a, b])
[&amp;lt;__main__.HashToOne at 0x102c32cd0&amp;gt;, &amp;lt;__main__.HashToOne at 0x102c32a10&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only concern with hash collisions is that too many of them can remove
the performance gains of &lt;code&gt;dict&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conversely, if you are writing something that uses an object's hash, remember
that hash collisions are possible and unavoidable.&lt;/p&gt;
&lt;p&gt;A classic example of a hash collision is &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;-2&lt;/code&gt;. Remember I
mentioned above that small integers hash to themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(1)
1
&amp;gt;&amp;gt;&amp;gt; hash(-3)
-3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The exception to this is &lt;code&gt;-1&lt;/code&gt;. The CPython interpreter uses &lt;code&gt;-1&lt;/code&gt; as an error
state, so -1 is not a valid hash value. Hence, &lt;code&gt;hash(-1)&lt;/code&gt; can't be &lt;code&gt;-1&lt;/code&gt;. So
the Python developers picked the next closest thing.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; hash(-1)
-2
&amp;gt;&amp;gt;&amp;gt; hash(-2)
-2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to check if something handles hash collisions correctly, this is
a simple example.  I should also note that the fact that integers hash to
themselves is an implementation detail of CPython that may not be true in
alternate Python implementations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we didn't discuss this much here, but don't assume that the hash of
your object will be the same across Python sessions. In Python 3.3 and up,
hash values of strings are randomized from a value that is seeded when
Python starts up. This also affects any object whose hash is computed
from the hash of strings. In Python 2.7, you can enable hash randomization
with the &lt;code&gt;-R&lt;/code&gt; flag to the interpreter. The following are two different
Python sessions.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; print(hash('a'))
-7750608935454338104
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;&amp;gt;&amp;gt;&amp;gt; print(hash('a'))
8897161376854729812
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/doing-math-with-python-by-amit-saha-book-review/</guid>
      <title>"Doing Math with Python" by Amit Saha: Book Review</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Sat, 19 Dec 2015 21:01:21 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/doing-math-with-python-by-amit-saha-book-review/</link>
      <description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Note: No Starch Press has sent me a copy of this book for review purposes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SHORT VERSION: &lt;em&gt;Doing Math with Python&lt;/em&gt; is well written and introduces
topics in a nice, mathematical way. I would recommend it for new users of
SymPy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.nostarch.com/doingmathwithpython"&gt;&lt;em&gt;Doing Math with Python&lt;/em&gt;&lt;/a&gt; by
Amit Saha is a new book published by No Starch Press. The book shows how to
use Python to do high school-level mathematics. It makes heavy use of SymPy in
many chapters, and this review will focus mainly on those parts, as that is
the area I have expertise in.&lt;/p&gt;
&lt;p&gt;The book assumes a basic understanding of programming in Python 3, as well as
the mathematics used (although advanced topics are explained). No prior
background in the libraries used, SymPy and matplotlib, is assumed. For this
reason, this book can serve as an introduction them. Each chapter ends with
some programming exercises, which range from easy exercises to more advanced
ones.&lt;/p&gt;
&lt;p&gt;The book has seven chapters. In the first chapter, "Working with numbers",
basic mathematics using pure Python is introduced (no SymPy yet). It should be
noted that Python 3 (not Python 2) is required for this book. One of the
earliest examples in the book (&lt;code&gt;3/2 == 1.5&lt;/code&gt;) will not work correctly without
it. I applaud this choice, although I might have added a more prominent
warning to wary users. (As a side note, in the appendix, it is recommended to
install Python via &lt;a href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt;, which I
also applaud). This chapter also introduces the &lt;code&gt;fractions&lt;/code&gt; module, which
seems odd since &lt;code&gt;sympy.Rational&lt;/code&gt; will be implicitly used for rational numbers
later in the text (to little harm, however, since SymPy automatically converts
&lt;code&gt;fractions.Fraction&lt;/code&gt; instances to &lt;code&gt;sympy.Rational&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In all, this chapter is a good introduction to the basics of the mathematics
of Python. There is also an introduction to variables and strings. However, as
I noted above, one should really have some background with basic Python before
reading this book, as concepts like flow control and function definition are
assumed (note: there is an appendix that goes over this).&lt;/p&gt;
&lt;p&gt;Chapters 2 and 3 cover plotting with matplotlib and basic statistics,
respectively. I will not say much about the matplotlib chapter, since I know
only basic matplotlib myself. I will note that the chapter covers matplotlib
from a (high school) mathematics point of view, starting with a definition of
the Cartesian plane, which seems a fitting choice for the book.&lt;/p&gt;
&lt;p&gt;Chapter 3 shows how to do basic statistics (mean, median, standard deviation,
etc.) using pure Python. This chapter is clearly meant for pedagogical
purposes for basic statistics, since the basic functions &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;median&lt;/code&gt;,
etc. are implemented from scratch (as opposed to using &lt;code&gt;numpy.mean&lt;/code&gt; or the
standard library &lt;code&gt;statistics.mean&lt;/code&gt;). This serves as a good introduction to
more Python concepts (like &lt;code&gt;collections.Counter&lt;/code&gt;) and statistics.&lt;/p&gt;
&lt;p&gt;Note that the functions in this chapter assume that the data is the entire
population, not a sample. This is mentioned at the beginning of the chapter,
but not elaborated on. For example, this leads to a different definition of
variance than what might be seen elsewhere (the &lt;code&gt;calculate_variance&lt;/code&gt; used in
this chapter is &lt;code&gt;statistics.pvariance&lt;/code&gt;, not &lt;code&gt;statistics.variance&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It is good to see that a numerically stable definition of variance is used
here (see &lt;a href="https://www.python.org/dev/peps/pep-0450/"&gt;PEP 450&lt;/a&gt; for more
discussion on this). These numerical issues show why it is important to use a
real statistics library rather than a home grown one. In other words, use this
chapter to learn more about statistics and Python, but if you ever need to do
statistics on real data, use a statistics library like &lt;code&gt;statistics&lt;/code&gt; or
&lt;code&gt;numpy&lt;/code&gt;. Finally, I should note that this book appears to be written against
Python 3.3, whereas &lt;code&gt;statistics&lt;/code&gt; was added to the Python standard library in
Python 3.4. Perhaps it will get a mention in future editions.&lt;/p&gt;
&lt;p&gt;Chapter 4, "Algebra and Symbolic Math with SymPy" starts the introduction to
SymPy. The chapter starts similar to the
&lt;a href="http://docs.sympy.org/latest/tutorial/index.html"&gt;official SymPy tutorial&lt;/a&gt; in
describing what symbolics is, and guiding the reader away from common
misconceptions and gotchas. The chapter does a good job of explaining common
gotchas and avoiding antipatterns.&lt;/p&gt;
&lt;p&gt;This chapter may serve as an alternative to the official tutorial. Unlike the
official tutorial, which jumps into
&lt;a href="http://docs.sympy.org/latest/tutorial/simplification.html#powers"&gt;higher-level mathematics&lt;/a&gt;
and &lt;a href="http://docs.sympy.org/latest/tutorial/matrices.html"&gt;broader use-cases&lt;/a&gt;,
this chapter may be better suited to those wishing to use SymPy from the
standpoint of high school mathematics.&lt;/p&gt;
&lt;p&gt;My only gripes with this chapter, which, in total, are minor, relate to printing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The typesetting of the pretty printing is inconsistent and, in some cases,
incorrect. Powers are printed in the book using superscript numbers, like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x&amp;#178;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, SymPy prints powers like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2
x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;even when Unicode pretty printing is enabled. This is a minor point, but it
may confuse users. Also, the output appears to use ASCII pretty printing
(mixed with superscript powers), for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    x&amp;#178;   x&amp;#179;   x&amp;#8308;   x&amp;#8309;
x + -- + -- + -- + --
    2    3    4    5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most users will either get MathJax printing (if they are using the Jupyter
notebook), or Unicode printing, like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     2    3    4    5
    x    x    x    x
x + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472; + &amp;#9472;&amp;#9472;
    2    3    4    5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this is a minor point, but at the very least the correct printing
looks better than the fake printing used here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In line with the previous point, I would recommend telling the user to
start with &lt;code&gt;init_printing()&lt;/code&gt;. The function is used once to change the order
of printing to rev-lex (for series printing). There is a link to the
&lt;a href="http://docs.sympy.org/latest/tutorial/printing.html"&gt;tutorial page on printing&lt;/a&gt;. That
page goes into more depth than is necessary for the book, but I would
recommend at least mentioning to always call &lt;code&gt;init_printing()&lt;/code&gt;, as 2-D
printing can make a huge difference over the default &lt;code&gt;str&lt;/code&gt; printing, and it
obviates the need to call &lt;code&gt;pprint&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Chapter 5, "Playing with Sets and Probability" covers SymPy's set objects
(particularly &lt;code&gt;FiniteSet&lt;/code&gt;) to do some basic set theory and probability. I'm
excited to see this in the book. The sets module in SymPy is relatively new,
but quite powerful. We do not yet have an introduction to the sets module in
the SymPy tutorial. This chapter serves as a good introduction to it (albeit
only with finite sets, but the SymPy functions that operate on infinite sets
are exactly the same as the ones that operate on finite sets). In all, I don't
have much to say about this chapter other than that I was pleasantly surprised
to see it included.&lt;/p&gt;
&lt;p&gt;Chapter 6 shows how to draw geometric shapes and fractals with matplotlib. I
again won't say much on this, as I am no matplotlib expert. The ability to
draw leaf fractals and Sierpi&amp;#324;ski triangles with Python does look
entertaining, and should keep readers enthralled.&lt;/p&gt;
&lt;p&gt;Chapter 7, "Solving Calculus Problems" goes into more depth with SymPy. In
particular, assumptions, limits, derivatives, and integrals.  The chapter
alternates between symbolic formulations using SymPy and numeric
calculations (using &lt;code&gt;evalf&lt;/code&gt;). The numeric calculations are done both for
simple examples and more advanced things (like implementing gradient descent).&lt;/p&gt;
&lt;p&gt;One small gripe here. The book shows that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sympy import Symbol
x = Symbol('x')
if (x + 5) &amp;gt; 0:
    print('Do Something')
else:
    print('Do Something else')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;raises &lt;code&gt;TypeError&lt;/code&gt; at the evaluation of &lt;code&gt;(x + 5) &amp;gt; 0&lt;/code&gt; because its truth value
cannot be determined. The solution to this issue is given as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = Symbol('x', positive=True)
if (x + 5) &amp;gt; 0:
    print('Do Something')
else:
    print('Do Something else')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting &lt;code&gt;x&lt;/code&gt; to be positive via &lt;code&gt;Symbol('x', positive=True)&lt;/code&gt; is correct, but
even in this case, evaluating an inequality may still raise a &lt;code&gt;TypeError&lt;/code&gt; (for
example, &lt;code&gt;if (x - 5) &amp;gt; 0&lt;/code&gt;). The better way to do this is to use &lt;code&gt;(x + 5).is_positive&lt;/code&gt;. This would require a bit more discussion, especially since
SymPy uses a three-valued logic for assumptions, but I do consider "if
&amp;lt;symbolic inequality&amp;gt;" to be a SymPy antipattern.&lt;/p&gt;
&lt;p&gt;I like Saha's approach in this chapter of first showing unevaluated forms
(&lt;code&gt;Limit&lt;/code&gt;, &lt;code&gt;Derivative&lt;/code&gt;, &lt;code&gt;Integral&lt;/code&gt;), and then evaluating them with
&lt;code&gt;doit()&lt;/code&gt;. This puts users in the mindset of a mathematical expression being a
formula which may or may not later be "calculated". The opposite approach,
using the function forms, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;, and &lt;code&gt;integrate&lt;/code&gt;, which evaluate if
they can and return an unevaluated object if they can't, can be confusing to
new users in my experience. A common new SymPy user question is (some form of)
"how do I evaluate an expression?" (the answer is &lt;code&gt;doit()&lt;/code&gt;). Saha's approach
avoids this question by showing &lt;code&gt;doit()&lt;/code&gt; from the outset.&lt;/p&gt;
&lt;p&gt;I also like that this chapter explains the gotcha of &lt;code&gt;math.sin(Symbol('x'))&lt;/code&gt;,
although I personally would have included this earlier in the text.&lt;/p&gt;
&lt;p&gt;(Side note: now that I look, these are both areas in which the official
tutorial could be improved).&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This book is a good introduction to doing math with Python, and, for the
chapters that use it, a good basic introduction to SymPy. I would recommend it
to anyone wishing to learn SymPy, but especially to anyone whose knowledge of
mathematics may preclude them from getting the most out of the official SymPy
tutorial.&lt;/p&gt;
&lt;p&gt;I imagine this book would work well as a pedagogical tool, either for math
teachers or for self-learners. The exercises in this book should push the
motivated to learn more.&lt;/p&gt;
&lt;p&gt;I have a few minor gripes, but no major issues.&lt;/p&gt;
&lt;p&gt;You can purchase this book from the
&lt;a href="https://www.nostarch.com/doingmathwithpython"&gt;No Starch Press&lt;/a&gt; website, both
as a print book or an ebook. The website also includes a sample chapter
(&lt;a href="https://www.nostarch.com/download/Doing%20Math%20with%20Python_sample_Chapter1.pdf"&gt;chapter 1&lt;/a&gt;),
code samples from the book, and exercise solutions.&lt;/p&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//SymPy-at-PyCon-India-2015</guid>
      <title>SymPy at PyCon India 2015</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Wed, 21 Oct 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//SymPy-at-PyCon-India-2015</link>
      <description>&lt;h3&gt;The excitement&lt;/h3&gt;

&lt;p&gt;People travelling from all over the country(and outside!) to Bangalore for a conference on a weekend, Yay! &lt;br /&gt;
We were really excited about the workshop and devsprint that the SymPy team was about to deliver. More so excited we were about the fact that we will finally be meeting one another.&lt;/p&gt;

&lt;h3&gt;Day 0&lt;/h3&gt;

&lt;h4&gt;DevSprint&lt;/h4&gt;

&lt;p&gt;The first day of the conference kicked off with the devsprints. That morning the whole team met up, present there were Harsh, Sudhanshu, AMiT, Sartaj, Shivam and Sumith . Abinash couldn't make it but he was there in spirit :) &lt;br /&gt; We all got our awesome SymPy tees and stickers, thanks to AMiT. &lt;br /&gt;
Having got alloted mentoring space in the  devsprint, basic introduction of SymPy was given by Sumith. Some interesting mentoring spaces were CPython by Kushal Das, Data Science by Bargava. The whole list is &lt;a href="https://in.pycon.org/cfp/pycon-india-dev-sprint-2015/proposals/"&gt;here&lt;/a&gt; &lt;br /&gt;
We got the participants started off with setting up the development workflow of SymPy and then they started working on the internals. We alloted bugs to many and directed them to the solution. Sadly, not many issues could alloted or closed due to the really poor internet connection at the conference hall but it was cool interacting with the enthusiasts. We also happened to meet Saurabh Jha, a contributor to SymPy who had worked on Linear Algebra and he helped us out with the devsprint.&lt;/p&gt;

&lt;h4&gt;Workshop&lt;/h4&gt;

&lt;p&gt;The workshops ran in two and a half hour slot. This was conducted by Harsh, Sudhanshu, AMiT and Sumith. &lt;br /&gt;
Sumith started off with introduction to SymPy. Then we spent some helping everyone setup their systems with SymPy and IPython notebooks, even though prior instructions were given, we had to do this so as to get everyone on level ground. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Harsh took first half of the content and exercises &lt;br /&gt;
Sudhanshu took the second half, while AMiT and Sumith were helping out the participants with their queries. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/workshop1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;We distributed t-shirts to all the participants at the end. Thanks to all those who participated, we had an awesome time.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/workshop2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Day 0 ended with all of us wrapping off the devsprint. &lt;br /&gt;
After having dinner together, everybody headed back looking forward to the coming two days of the conference.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;

&lt;p&gt;Day 1 started off with a keynote by Dr Ajith Kumar B.P followed by multiple talks and lightning talks. &lt;br /&gt;
More interesting than the scheduled talks were the conversations that we had with people present in the conference. Exchanging views, discussing on a common point of interest was surely one of the best experience that I had.&lt;/p&gt;

&lt;h4&gt;Lightning talk&lt;/h4&gt;

&lt;p&gt;Shivam delivered a lightning talk titled &lt;code&gt;Python can be fast&lt;/code&gt;. Here, he stressed on the fact that implementing correct data structures is important and Python is not always to be blamed. He gave relevant examples from his summers work at SymPy.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/lightningtalk.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;By this point, we had reached considerable audience in the conference and lot of them were really interested in SymPy. We had a lot of younger participants who were enthusiastic about SymPy as it participates in GSoC, some of them also sent in patches.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p dir="ltr" lang="en"&gt;Hacking sympy with &lt;a href="https://twitter.com/abraarsyed01"&gt;@abraarsyed01&lt;/a&gt; &lt;a href="https://twitter.com/ethcelon"&gt;@ethcelon&lt;/a&gt;&lt;/p&gt;&amp;mdash; Devyani Kota(divs) (@Devyani_kush) &lt;a href="https://twitter.com/Devyani_kush/status/650565162584268800"&gt;October 4, 2015&lt;/a&gt;&lt;/blockquote&gt;



&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;p&gt;Day 2 started off with a keynote by Nicholas H.Tollervey.&lt;/p&gt;

&lt;h4&gt;Talk&lt;/h4&gt;

&lt;p&gt;Sumith delivered a talk titled &lt;code&gt;SymEngine: The future fast core of computer algebra systems&lt;/code&gt;. The content included SymPy, SymEngine and the interface. Some light was shed on Python wrappers to C++ code. Thanks to all the audience present there.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/talk.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;As the day was closing in, Harsh and Shivam had to leave to catch their flights.&lt;/p&gt;

&lt;h4&gt;Open Space&lt;/h4&gt;

&lt;p&gt;After multiple people requesting to help them get started with SymPy, we decided to conduct an open space. &lt;br /&gt;
Open spaces are a way for people to come together to talk about topics, ideas or whatever they want. All people had to do is just show up :) Present there were Sudhanshu, Sartaj, AMiT and Sumith. Sartaj luckily came up with a &lt;code&gt;solveset&lt;/code&gt; bug. We had a live show of how bug-fixing is done. Filing an issue, fixing the code, writing tests and sending in a PR was all demonstrated.&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/openspace.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;Conferences are the perfect place to discuss and share knowledge and ideas. The people present there were experts in their area of interests and conversations with them is a cool experience. Meeting the team was something that we were looking forward right from the start. &lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/team1.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Missing Sartaj and Abinash&lt;/p&gt;

&lt;p&gt;&lt;img alt="PyCon" src="http://sumith1896.github.io/assets/pycon2015/team2.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Discussing SymPy and the gossips in person is a different experience altogether. I'll make sure to attend all the conference that I possibly can from hereon. &lt;/p&gt;

&lt;p&gt;Thanks for the reading &lt;br /&gt;
Be back for more &lt;br /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/</guid>
      <title>Lessons learned from working at Continuum</title>
      <author>Aaron Meurer (asmeurer)</author>
      <pubDate>Mon, 05 Oct 2015 22:29:03 GMT</pubDate>
      <link>https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/</link>
      <description>&lt;div&gt;&lt;p&gt;Last Friday was my last day working at Continuum Analytics. I enjoyed my
time at the company, and wish success to it, but the time has come for me to
move on. Starting later this year, I will start working with
&lt;a href="https://twitter.com/scopatz"&gt;Anthony Scopatz&lt;/a&gt; at his new lab
&lt;a href="http://www.ergs.sc.edu/index.html"&gt;ERGS&lt;/a&gt; at the University of South
Carolina.&lt;/p&gt;
&lt;p&gt;During my time at Continuum (over two years if you count a summer internship),
I primarily worked on the
&lt;a href="https://www.continuum.io/downloads"&gt;Anaconda distribution&lt;/a&gt; and its open
source package manager, &lt;a href="http://conda.pydata.org/"&gt;conda&lt;/a&gt;.  I learned a lot of
lessons in that time, and I'd like to share some of them here.&lt;/p&gt;
&lt;p&gt;In no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Left to their own devices, people will make the minimal possible solution to
  packaging. They won't try to architect something. The result will be
  over-engineered, specific to their use-case, and lack reproducibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The best way to ensure that some software has no bugs is for it to have many
  users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be wary of the "software would be great if it weren't for all the users"
  mentality (cf. the previous point).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most people don't code defensively. If you are working on a project that
  requires extreme stability, be cautious of contributions from those outside
  the development team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hostility towards Windows and Windows users doesn't help anyone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/asmeurer/status/593170976981913600"&gt;https://twitter.com/asmeurer/status/593170976981913600&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a software updater, stability is the number one priority. If the updater
  breaks, how can a fix be deployed?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even if you configure your program to update itself every time it runs you
  will still get bug reports with arbitrarily old versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separating components into separate git repositories leads to a
  philosophical separation of concerns among the components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everyone who isn't an active developer on the project will ignore this
  separation and open issues in the wrong repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid object oriented programming when procedural programming will do just
  fine.&lt;sup id="fnref:fn1"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open source is more about the open than the source. Develop things in the
  open, and you will create a community that respects you.&lt;sup id="fnref:fn1"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Academics (often) don't know good software practices, nor good licensing
  practices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neither do some large corporations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid over-engineering things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Far fewer people than I would have thought understand the difference between
  hard links and soft links.&lt;sup id="fnref:fn2"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changelogs are useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semantic versioning is over-hyped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you make something and release it, the first version should be 1.0 (not
  0.1 or 0.0.1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting a difficult package to compile is like hacking a computer. All it
  takes is time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It doesn't matter how open source friendly your business is, there will
  always be people who will be skeptical and point their fingers at the
  smallest proprietary components, fear monger, and overgeneralize unrelated
  issues into FUD. These people should generally be ignored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't feed the trolls.&lt;sup id="fnref:fn1"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People constantly misspell the name of
  &lt;a href="https://twitter.com/asmeurer/status/618595687958122496"&gt;Apple's desktop operating system&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People always assume you have way more automation than you really do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Python standard library is not a Zen garden. Some parts of it are
  completely broken, and if you need to rely on them, you'll have to rewrite
  them. &lt;code&gt;shutil.rmtree&lt;/code&gt; on Windows is one example of this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux is strictly backwards compatible. Windows is strictly forwards
  compatible. &lt;sup id="fnref:fn3"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Linux, things tend to be very simple. On Windows, things tend to be very
  complicated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can't decide about OS X. It lies somewhere in between.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nobody uses 32-bit Linux. Why do we even support that?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People oversimplify the problem of solving for package dependencies in their
  heads.  No one realizes that it's meaningless to say something like "the
  dependencies of NumPy" (every build of every version of NumPy has its own
  set of dependencies, which may or may not be the same).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing a set of rules and a solver to solve against those rules is
  relatively easy. Writing heuristics to tell users why those rules are
  unsolvable when they are is hard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAT solvers solve NP-complete problems in general, but they can be very fast
  to solve common case problems. &lt;sup id="fnref:fn1"&gt;&lt;a class="footnote-ref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fn:fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the smartest people I know, who otherwise make very rational and
  intelligent decisions,
  &lt;a href="https://asmeurer.github.io/python3-presentation/slides.html"&gt;refuse to update to Python 3&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an introvert, the option of working from home is great for maintaining
  sanity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.codinghorror.com/a-developers-second-most-important-asset/"&gt;Aeron chairs are awesome&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If living in Austin doesn't turn you into a foodie you will at least gain a
  respect for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter, if used correctly, is a great way to interact with your users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter is also a great place to learn new things. Follow
  &lt;a href="https://twitter.com/JohnDCook"&gt;John Cook&lt;/a&gt; and
  &lt;a href="https://twitter.com/worrydream"&gt;Bret Victor&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of the best ways to make heavily shared content is to make it about git
  (at least if you're an expert).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good optimization algorithm avoids getting caught in local maxima by
  trying different parts of the search space that initially appear to be
  worse. The same approach should be taken in life.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:fn1"&gt;
&lt;p&gt;These are things that I already knew, but were reiterated.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fnref:fn1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn2"&gt;
&lt;p&gt;If you are one of those people, I have a small presentation that
   explains the difference &lt;a href="https://speakerdeck.com/asmeurer/hard-links-and-soft-links"&gt;here&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fnref:fn2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fn3"&gt;
&lt;p&gt;These terms can be confusing, and I admit I got this backwards the
    first time I wrote this. According to Wikipedia,
    &lt;a href="https://en.wikipedia.org/wiki/Forward_compatibility"&gt;forwards compatible&lt;/a&gt;
    means a system can accept input intended for a later version of itself
    and
    &lt;a href="https://en.wikipedia.org/wiki/Backward_compatibility"&gt;backwards compatible&lt;/a&gt;
    means a system can accept input intended for an earlier version of
    itself.&lt;/p&gt;
&lt;p&gt;What I specifically mean here is that in terms of building packages
for Linux or Windows, for Linux, you should build a package on the
oldest version that you wish to support. That package will work on
newer versions of Linux, but not anything older (generally due to the
version of libc you are linked against).&lt;/p&gt;
&lt;p&gt;On the other hand, on Windows, you can can compile things on the
newest version (I used Windows 8 on my main Windows build VM), and it
will work on older versions of Windows like XP (as long as you ship
the right runtime DLLs). This is also somewhat confusing because
Windows tends to be both forwards compatible &lt;em&gt;and&lt;/em&gt; backwards
compatible.&amp;#160;&lt;a class="footnote-backref" href="https://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/#fnref:fn3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : Throughout in SymPy # Wrap Up</guid>
      <title>GSoC : Throughout in SymPy # Wrap Up</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Thu, 27 Aug 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-wrap-up</link>
      <description>&lt;p&gt;Hi! I am Amit Kumar (&lt;a href="http://www.github.com/aktech"&gt;&lt;strong&gt;@aktech&lt;/strong&gt;&lt;/a&gt;), a final year undergraduate student of Mathematics &amp;amp; Computing at Delhi Technological University. This post summarizes my experience working on GSoC Project on Improving Solvers in SymPy.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I first stumbled upon SymPy last year, while looking for some Open Source Computer Algebra Systems to contribute. I didn't had any Open Source experience by then, So SymPy was an Ideal Choice for getting into the beautiful world of Open Source. I wasn't even Proficient in Python so at first it was little difficult for me, but Thanks! to the beauty of the language itself, which makes anyone comfortable with it in no time. Soon, I decided to participate into Google Summer of Code under SymPy. Though at this point of time, I didn't had decided about the project, I would like to work in Summers. &lt;/p&gt;

&lt;h5&gt;First Contribution&lt;/h5&gt;

&lt;p&gt;I started learning the codebase &amp;amp; made my first contribution by Fixing an EasyToFix bug in &lt;code&gt;solvers.py&lt;/code&gt; through the PR &lt;a href="https://github.com/sympy/sympy/pull/8647"&gt;#8647&lt;/a&gt;, Thanks to &lt;a href="http://iamit.in/blog/feeds/sympy.xml"&gt;@smichr&lt;/a&gt; for helping me making my first ever open source contribution. After my first PR, I started looking for more things to work and improve upon and I started commiting quite often. During this period I learnt the basics of Git, which is one of the most important tools for contributing to Open Source.&lt;/p&gt;

&lt;h2&gt;Project Ideas&lt;/h2&gt;

&lt;p&gt;When I got a bit comfortable with the basics of SymPy &amp;amp; contributing to open source in general, I decided to chose an area (module) to concentrate on. The modules I was interested in, were Solvers and Integrals, I was literally amazed by the capability of a CAS to integrate and solve equations. I decided to work on one of these in the summers. There was already some work done on the Integrals module in 2013, which was yet to be Merged. I wasn't well versed about the Manuel Bronsteins works on Methods of Integration in a Computer Algebra System, so I was little skeptical about working on Integrals. The Solvers module attracted me due it's awesome capabilities, I found it one of the most useful features of any Computer Algebra Systems, So I finally decided to work on Solvers Module.&lt;/p&gt;

&lt;h2&gt;Coding&lt;/h2&gt;

&lt;p&gt;I was finally accepted to work on Solvers this summer. I had my exams during the community bonding period, So I started almost in the first week of Coding Period. I made a detailed timeline of my work in summers, but through my experience I can say that's seldom useful. Since, you never know what may come out in between you and your schedule. As an instance PR &lt;a href="https://github.com/sympy/sympy/pull/9540"&gt;#9540&lt;/a&gt;, was a stumbling block in lot of my work, which was necessary to fix for proceeding ahead.&lt;/p&gt;

&lt;h4&gt;Phase I (Before Mid Terms)&lt;/h4&gt;

&lt;p&gt;When coding period commenced, I started implementing the &lt;code&gt;linsolve&lt;/code&gt;, the linear system solver which is tolerant to different input forms &amp;amp; can solve almost all forms of linear systems. At the start I got lot of reviews from Jason and Harsh, regarding improvement of the function. One of the most important thing I learnt which they focused on was Test Driven Development, they suggested me to write extensive tests before implementing the logic, which helps in reducing the problems in visualizing the final implementaion of the function and avoids API changes.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;linsolve&lt;/code&gt; I implemented &lt;code&gt;ComplexPlane&lt;/code&gt;, which is basically Complex Sets. It is useful for representing infinite solutions in argand plane. While implementing this I learnt that chosing the right API is one of the most important factors while designing aa important functionality. To know more about it, see my blog post &lt;a href="http://iamit.in/blog/GSoC-week-3/"&gt;here&lt;/a&gt;. During this period I also worked on fixing Intersection's of FiniteSet with symbolic elements, which was a stumbling block.&lt;/p&gt;

&lt;h4&gt;Phase II (After Mid Terms)&lt;/h4&gt;

&lt;p&gt;After successfully passing the Mid Terms, I started working more on robustness of &lt;code&gt;solveset&lt;/code&gt;, Thanks to @hargup for pointing out the motivation for this work. The idea is to tell the user about the domain of solution returned. Simplest motivation was the solution of the equation &lt;code&gt;|x| - n&lt;/code&gt;, for more info see my blog post &lt;a href="http://iamit.in/blog/GSoC-week-7/"&gt;here&lt;/a&gt;. I also worked on various trivial and non trivial bugs which were more or less blocking my work. &lt;/p&gt;

&lt;p&gt;Then I started replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; in the codebase, the idea was to make a smooth transition between &lt;code&gt;solve&lt;/code&gt; and &lt;code&gt;solveset&lt;/code&gt;, while doing this Jason pointed out that I should not remove &lt;code&gt;solve&lt;/code&gt; tests, which can make &lt;code&gt;solve&lt;/code&gt; vunerable to break, So I reverted removing of solve tests. Later we decided to add &lt;code&gt;domain&lt;/code&gt; argument to &lt;code&gt;solveset&lt;/code&gt;, which would help the user in easily dictating to solveset about what solutions they are interested in, thanks to @shivamvats for doing this in a PR.
After the decision of adding &lt;code&gt;domain&lt;/code&gt; argument, Harsh figured out that, as of now &lt;code&gt;solveset&lt;/code&gt; is vunerable to API changes, so it's not the right time to replace solve with solveset, so we decided to halt this work, as a result I closed my several PR's unmerged. &lt;/p&gt;

&lt;p&gt;I also worked on Implementing Differential Calculus Method such as &lt;code&gt;is_increasing&lt;/code&gt; etc, which is also Merged now. Meanwhile I have been working on documenting &lt;code&gt;solveset&lt;/code&gt;, because a lot of people don't know what we are doing &amp;amp; why we are doing, so It's very important to answer all those subtle questions which may come up in there mind, So we decided to create a FAQ style documentation of &lt;code&gt;solveset&lt;/code&gt; see PR &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;#9500&lt;/a&gt;. This is almost done, some polishing is needed. It would be Merged soon.&lt;/p&gt;

&lt;p&gt;During this period apart from my work, there are some other works as well which is worth mentioning, one of them is &lt;code&gt;ConditionSet&lt;/code&gt; by Harsh which serves the purpose of unevaluated solve object and even much more than that for our future endeavours with &lt;code&gt;solveset&lt;/code&gt;. Others being &lt;code&gt;codomain&lt;/code&gt; &amp;amp; &lt;code&gt;not_empty&lt;/code&gt; by Gaurav &lt;a href="http://github.com/gxyd"&gt;@gxyd&lt;/a&gt; which are also important additions to SymPy.&lt;/p&gt;

&lt;h2&gt;Advice&lt;/h2&gt;

&lt;p&gt;TODO: Probably, this will need a comprehensive post, I would write soon.&lt;/p&gt;

&lt;h2&gt;Future Plans&lt;/h2&gt;

&lt;p&gt;Recently Harsh came up with an idea of tree based solver. Since now &lt;code&gt;ConditionSet&lt;/code&gt; has been introduced, the solving of equations can be seen as set transformation, We can do the following things to solve equations (abstract View):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply Various Set Transformations on the given Set.&lt;/li&gt;
&lt;li&gt;Define a Metric of the usability or define a notion of better solution over others.&lt;/li&gt;
&lt;li&gt;Different Transformation would be the nodes of the tree.&lt;/li&gt;
&lt;li&gt;Suitable searching techniques could be applied to get the best solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info see mailing list thread &lt;a href="https://groups.google.com/forum/#!topic/sympy/-SIbX0AFL3Q"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a part of this I worked on implementing a general decomposition function &lt;code&gt;decompogen&lt;/code&gt; in PR &lt;a href="https://github.com/sympy/sympy/pull/9831"&gt;#9831&lt;/a&gt;, It's almost done, will be merged soon.&lt;/p&gt;

&lt;p&gt;I plan for a long term association with SymPy, I take the full responsibilty of my code. I will try to contribute as much as I can particularly in sets and solvers module.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;On a concluding note, I must say that getting the opportunity to work on SymPy this summer has been one of the best things that could happen to me. Thanks to Harsh for helping me all my endeavour, also for being one of the best mentors I could get. I would like to thank Sean as well who from his busy schedule took up the time to attend meetings, hangouts and for doing code reviews. Also thanks to Chris Smith who is the most gentle and helpful person I have ever seen, he is one of the reasons I started contributing to SymPy.
Thanks to Aaron, Ondrej, and last but not the least my fellow GSoCer's at SymPy &lt;a href="http://github.com/leosartaj"&gt;leosartaj&lt;/a&gt;, &lt;a href="http://github.com/debugger22"&gt;debugger22&lt;/a&gt;, &lt;a href="http://github.com/sumith1896"&gt;sumith1896&lt;/a&gt;, &lt;a href="http://github.com/shivamvats"&gt;shivamvats&lt;/a&gt;, &lt;a href="https://github.com/abinashmeher999"&gt;abinashmeher999&lt;/a&gt;. Special Thanks to whole SymPy team and Community for a wonderful collaboration experience. Kudos!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8848761645772749389.post-1932585002089180237</guid>
      <title>GSoc 2015 Week 12 &amp; 13</title>
      <author>Isuru Fernando (isuruf)</author>
      <pubDate>Sun, 23 Aug 2015 15:59:50 GMT</pubDate>
      <link>http://isuruf.blogspot.com/2015/08/gsoc-2015-week-12-13.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;This week we announced the release of SymEngine on Sage list. For that, I made some changes into the build system for versioning and to use SymEngine from other C/C++ projects.&lt;/div&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;First, SymEngineConfig.cmake would output a set of flags, imported dependencies, etc. SymEngineConfigVersion.cmake would check that the version is compatible and if the 32/64-bitness is correct of the SymEngine project and the other CMake project. When SymEngine is only built, then these files would be at the root level and when installed they would be at /lib/cmake/symengine. An excerpt from the wiki page, I wrote at,&amp;nbsp;&lt;a href="https://github.com/sympy/symengine/wiki/Using-SymEngine-from-a-Cpp-project" style="background-color: transparent; color: #4078c0; text-decoration: none;"&gt;https://github.com/sympy/symengine/wiki/Using-SymEngine-from-a-Cpp-project&lt;/a&gt;&lt;/div&gt;&lt;h5 style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em;"&gt;&lt;a class="anchor" href="https://github.com/sympy/symengine/wiki/_new#using-symengine-in-another-cmake-project" id="user-content-using-symengine-in-another-cmake-project"&gt;&lt;/a&gt;Using SymEngine in another CMake project&lt;/h5&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;To use SymEngine from another CMake project include the following in your&lt;code&gt;CMakeLists.txt&lt;/code&gt;&amp;nbsp;file&lt;/div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px;"&gt;&lt;code style="background: transparent; border-radius: 3px; border: 0px; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: inherit; margin: 0px; overflow: initial; padding: 0px;"&gt;find_package(SymEngine 0.1.0 CONFIG)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;You can give the path to the SymEngine installation directory if it was installed to a non standard location by,&lt;/div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px;"&gt;&lt;code style="background: transparent; border-radius: 3px; border: 0px; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: inherit; margin: 0px; overflow: initial; padding: 0px;"&gt;find_package(SymEngine 0.1.0 CONFIG PATHS /path/to/install/dir/lib/cmake/symengine)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Alternatively, you can give the path to the build directory.&lt;/div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px;"&gt;&lt;code style="background: transparent; border-radius: 3px; border: 0px; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: inherit; margin: 0px; overflow: initial; padding: 0px;"&gt;find_package(SymEngine 0.1.0 CONFIG PATHS /path/to/build/dir)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;An example project would be,&lt;/div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px;"&gt;&lt;code style="background: transparent; border-radius: 3px; border: 0px; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: inherit; margin: 0px; overflow: initial; padding: 0px;"&gt;cmake_minimum_required(VERSION 2.8)&lt;br /&gt;find_package(symengine 0.1.0 CONFIG)&lt;br /&gt;set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} "-std=c++0x")&lt;br /&gt;&lt;br /&gt;include_directories(${SYMENGINE_INCLUDE_DIRS})&lt;br /&gt;add_executable(example main.cpp)&lt;br /&gt;target_link_libraries(example ${SYMENGINE_LIBRARIES})&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;More options are&amp;nbsp;&lt;a href="https://github.com/sympy/symengine/blob/master/cmake/SymEngineConfig.cmake.in" style="background-color: transparent; color: #4078c0; text-decoration: none;"&gt;here&lt;/a&gt;&lt;/div&gt;&lt;h5 style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em;"&gt;&lt;a class="anchor" href="https://github.com/sympy/symengine/wiki/_new#using-symengine-in-non-cmake-projects" id="user-content-using-symengine-in-non-cmake-projects"&gt;&lt;/a&gt;Using SymEngine in Non CMake projects&lt;/h5&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;You can get the include flags and link flags needed for SymEngine using the command line CMake.&lt;/div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px;"&gt;&lt;code style="background: transparent; border-radius: 3px; border: 0px; display: inline; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6000003814697px; line-height: inherit; margin: 0px; overflow: initial; padding: 0px;"&gt;compile_flags=`cmake --find-package -DNAME=SymEngine -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=COMPILE`&lt;br /&gt;link_flags=`cmake --find-package -DNAME=SymEngine -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=LINK`&lt;br /&gt;&lt;br /&gt;g++ $compile_flags main.cpp $link_flags&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1em; line-height: 1.4; margin-bottom: 16px; margin-top: 1em;"&gt;&lt;a class="anchor" href="https://github.com/sympy/symengine/wiki/_new#python-wrapeprs" id="user-content-python-wrapeprs"&gt;&lt;/a&gt;Python wrappers&lt;/h5&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;There was a suggestion to make the Python wrappers separate, so that in a distribution like Gentoo, the package sources can be distributed separately.&lt;/div&gt;&lt;div style="background-color: white; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;"&gt;So, I worked on the Python wrappers to get them to be built independently or with the main repo. Now, the python wrappers directory along with the setup.py file from the root folder can be packaged and they would work without a problem.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//GSoC-Wrapping-Up</guid>
      <title>GSoC - Wrapping Up</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Fri, 21 Aug 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//GSoC-Wrapping-Up</link>
      <description>&lt;p&gt;From not knowing anything considerable in programming and open source to reaching this level, has been a wonderful ride. Google Summer of Code has been full of ups and downs but none the less exhilarating. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Didn't even know at the time of my &lt;a href="https://github.com/sympy/symengine/commit/f5243c034953efa228c708e97668a932dc216e37"&gt;first patch&lt;/a&gt; that I would be so closely associated to SymEngine and the team members just a few months down the line.&lt;/p&gt;

&lt;p&gt;After a couple of bug fixes, my first major contribution came in as the &lt;a href="https://github.com/sympy/symengine/blob/master/symengine/polynomial.cpp"&gt;&lt;code&gt;UnivariatePolynomial&lt;/code&gt;&lt;/a&gt; class. The biggest challenge here was implementing multiplication using Kronecker's trick. This was my first experience of implementing an algorithm from a &lt;a href="http://www.cs.berkeley.edu/%7Efateman/papers/polysbyGMP.pdf"&gt;paper&lt;/a&gt;. The &lt;code&gt;UnivariatePolynomial&lt;/code&gt; class shaped up really well, there are minor improvements that can be made and some optimizations that could be done. But standalone, it is a fully functional class.&lt;/p&gt;

&lt;p&gt;Once this was done, my next aim was to optimize multiplication to reach &lt;code&gt;Piranha&lt;/code&gt;'s speed. This was a very enriching period and the discussions with the team members and &lt;a href="https://github.com/bluescarni"&gt;Francesco&lt;/a&gt; was a great learning experience. En route, I also got a chance to explore &lt;code&gt;Piranha&lt;/code&gt; under the hood and trouble Francesco for reasoning why certain things were the way they. End of this, we were able to hit &lt;code&gt;Piranha&lt;/code&gt;'s speed. I remember I was the happiest I had been in days.&lt;/p&gt;

&lt;p&gt;Once we hit the lower level speed, we decided to hard-depend on &lt;code&gt;Piranha&lt;/code&gt; for &lt;code&gt;Polynomial&lt;/code&gt;. This meant adding &lt;code&gt;Piranha&lt;/code&gt; as SymEngine dependence. Here I had to learnt how to write and wrote &lt;code&gt;CMake&lt;/code&gt; files as well as setting up Piranha testing in &lt;code&gt;Travis&lt;/code&gt; meant writing &lt;code&gt;shell&lt;/code&gt; and &lt;code&gt;CI&lt;/code&gt; scripts. We faced a problem here, resolution to which meant implementing &lt;code&gt;Catch&lt;/code&gt; as a testing framework for &lt;code&gt;SymEngine&lt;/code&gt;. &lt;code&gt;Catch&lt;/code&gt; is an awesome library and community is very pleasant. Implementing this was a fun work too.
Also the high level value class &lt;code&gt;Expression&lt;/code&gt; was implemented in &lt;code&gt;SymEngine&lt;/code&gt;, mostly taken from Francesco's work.&lt;/p&gt;

&lt;p&gt;I then started writing the &lt;code&gt;Polynomial&lt;/code&gt; class, most of the work is done here(&lt;a href="https://github.com/sympy/symengine/pull/597"&gt;597&lt;/a&gt;). But the design is not very well thought of. I say this because once ready this can only support integer(ZZ) domain. But we will also need rational(QQ) and expression(EX). The code will be of much use but we have been discussing a much cleaner implementation with &lt;code&gt;Ring&lt;/code&gt; class. Most of the progress and the new design decisions are being documented &lt;a href="https://github.com/sympy/symengine/wiki/En-route-to-Polynomial"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second half has been really rough, with the university running. Ondrej has been really patient with me, I thank him for that. The bond that I made with him through mails, technical and non technical, has really grown strong. He has allowed me to continue the work the &lt;code&gt;Polynomial&lt;/code&gt; and implement more details and algorithms in future. I am looking forward to that as long term association is an amazing thing and I am proud to be responsible for the &lt;strong&gt;&lt;code&gt;Polynomial module in SymEngine&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am indebted to my mentor &lt;a href="https://github.com/certik"&gt;Ondrej Certik&lt;/a&gt; and all the &lt;a href="https://gitter.im/sympy/symengine"&gt;SymEngine&lt;/a&gt; and &lt;a href="https://gitter.im/sympy/sympy"&gt;SymPy&lt;/a&gt; developers who were ever ready to help and answer my silliest of questions. It&amp;#8217;s an amazing community and they are really very helpful and always appreciated even the smallest of my contributions. The best part of SymEngine is you know contributors one to one and it is like a huge family of learners. I am looking forward to meeting the team (atleast SymPy India in near future).&lt;/p&gt;

&lt;p&gt;Google Summer of Code has been one exhilarating journey. I don't know if I was a good programmer then or a good programmer now but I can say that I am a better programmer now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is just the beginning of the ride, GSoC a stepping stone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There will be blog posts coming here, so stay tuned. Till then, &lt;br /&gt;
&lt;strong&gt;Bye&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sartajsingh.me/gsoc-update-week-10-11-and-12</guid>
      <title>GSoC: Update Week-10, 11 and 12</title>
      <author>Sartaj Singh (leosartaj)</author>
      <pubDate>Thu, 20 Aug 2015 14:28:44 GMT</pubDate>
      <link>https://sartajsingh.me/gsoc-update-week-10-11-and-12</link>
      <description>&lt;p&gt;This is the 12th week. Hard deadline is this Friday. GSoC is coming to an end leaving behind a wonderful experience.
Well here's how my past few weeks went.&lt;/p&gt;



&lt;h3&gt;Highlights:&lt;/h3&gt;

&lt;p&gt;Work on Formal Power Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9776"&gt;#9776&lt;/a&gt; added the &lt;code&gt;fps&lt;/code&gt; method in &lt;code&gt;Expr&lt;/code&gt; class. Instead of
&lt;code&gt;fps(sin(x))&lt;/code&gt;, user can now simply do &lt;code&gt;sin(x).fps()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9782"&gt;#9782&lt;/a&gt; implements some basic operations like addition, subtraction
on &lt;code&gt;FormalPowerSeries&lt;/code&gt;. The review is almost complete and should get
merged soon.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9783"&gt;#9783&lt;/a&gt; added the sphinx docs for the &lt;code&gt;series.formal&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9789"&gt;#9789&lt;/a&gt; replaced all the &lt;code&gt;solve&lt;/code&gt; calls in the &lt;code&gt;series.formal&lt;/code&gt; with the
new &lt;code&gt;solveset&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Work on computing limits of sequences:&lt;/p&gt;

&lt;p&gt;This is the second part of my GSoC project aiming to implement the algorithm
for computing limits of sequences as described in the poster
&lt;em&gt;Computing Limits Of Sequences&lt;/em&gt; by &lt;em&gt;Manuel Kauers&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9803"&gt;#9803&lt;/a&gt; implemented the &lt;code&gt;difference_delta&lt;/code&gt; function.
&lt;code&gt;difference_delta(a(n), n)&lt;/code&gt; is defined as &lt;code&gt;a(n + 1) - a(n)&lt;/code&gt;. It is the
discrete analogous of differentiation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9836"&gt;#9836&lt;/a&gt; aims at completing the implementation of the algorithm.
It is still under review and hopefully it will be in soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Final Tasks:&lt;/h3&gt;

&lt;p&gt;Get &lt;a href="https://github.com/sympy/sympy/pull/9782"&gt;#9782&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/9836"&gt;#9836&lt;/a&gt; merged soon.&lt;/p&gt;

&lt;h3&gt;Upcoming:&lt;/h3&gt;

&lt;p&gt;A thank you post ;)&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//GSoC-Progress-Week-10-&amp;-11</guid>
      <title>GSoC Progress - Week 10 and 11</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Sun, 16 Aug 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//GSoC-Progress-Week-10-&amp;-11</link>
      <description>&lt;p&gt;Hello all. Here are the most recent developments in the Polynomial wrappers.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Polynomial wrappers was using &lt;code&gt;piranha::hash_set&lt;/code&gt; as the &lt;code&gt;Polynomial&lt;/code&gt; wrappers, hence when there was no &lt;code&gt;Piranha&lt;/code&gt; as a dependence, the &lt;code&gt;Polynomial&lt;/code&gt; wouldn't compile. The fix to this was to use &lt;code&gt;std::unordered_set&lt;/code&gt; with &lt;code&gt;-DWITH_PIRANHA=no&lt;/code&gt; so that there would be atleast a slow version available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another issue was Travis testing of &lt;code&gt;Polynomial&lt;/code&gt;. Since we depend on &lt;code&gt;Piranha&lt;/code&gt;, we had to setup Travis testing with &lt;code&gt;Piranha&lt;/code&gt; included and &lt;code&gt;Polynomial&lt;/code&gt; tests run. This was done in the merged PR &lt;a href="https://github.com/sympy/symengine/pull/585"&gt;585&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we get the &lt;code&gt;Polynomial&lt;/code&gt; merged we have to add &lt;code&gt;mul_poly&lt;/code&gt;, improve printing, and test exhaustively. The &lt;code&gt;mul_poly&lt;/code&gt; is ready &lt;a href="https://github.com/shivamvats/symengine/pull/4"&gt;here&lt;/a&gt;, will be merged once more tests are prepared.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;code&gt;mul_poly&lt;/code&gt;, previously we never checked the variables corresponding to the &lt;code&gt;hash_set&lt;/code&gt;s, which implies you could only multiply a &lt;code&gt;n&lt;/code&gt; variable polynomial with another &lt;code&gt;n&lt;/code&gt; variable polynomial with the variable symbols same in both. When the variables of two hash_sets are different, a work around would be needed. This would result in slow down if done directly.&lt;/p&gt;

&lt;p&gt;As suggested by &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej&lt;/a&gt;, &lt;code&gt;mul_poly&lt;/code&gt; now calls two functions &lt;code&gt;_normalize_mul&lt;/code&gt; and &lt;code&gt;_mul_hashest&lt;/code&gt;. Here &lt;code&gt;_noramlize_mul&lt;/code&gt; sees to it that the &lt;code&gt;hash_set&lt;/code&gt;s satisfy the afore mentioned criteria and then &lt;code&gt;_mul_hashset&lt;/code&gt; operates  &lt;br /&gt;
For example, say &lt;code&gt;mul_poly&lt;/code&gt; is called,
then &lt;code&gt;_normalize_mul&lt;/code&gt; converts &lt;code&gt;{1, 2, 3}&lt;/code&gt; of &lt;code&gt;x, y, z&lt;/code&gt; and &lt;code&gt;{4, 5, 6}&lt;/code&gt; of &lt;code&gt;p, q, r&lt;/code&gt; to &lt;code&gt;{1, 2, 3, 0, 0, 0}&lt;/code&gt; and &lt;code&gt;{0, 0, 0, 4, 5, 6}&lt;/code&gt;
and &lt;code&gt;_mul_hashset&lt;/code&gt; multiplies the two &lt;code&gt;hash_set&lt;/code&gt;. The speed of benchmarks determined by &lt;code&gt;_mul_hashset&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The printing needs improvement. As of now the polynomial &lt;code&gt;2*x + 2*y&lt;/code&gt; gets printed as &lt;code&gt;2*y**1*x**0 + 2*y**0*x**1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not all that was planned could be completed this summers, mostly because of my hectic schedule after the vacations ended and institure began. I am planning to work after the program ends too, when the workload eases. As the final deadline week of GSoC is coming up, I need to ensure at least the PRs on hold gets merged.I am planning to continue after the period ends so as &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all I have &lt;br /&gt;
&lt;strong&gt;See ya&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8848761645772749389.post-4250966876299216441</guid>
      <title>GSoC week 10 and 11</title>
      <author>Isuru Fernando (isuruf)</author>
      <pubDate>Sat, 15 Aug 2015 18:11:54 GMT</pubDate>
      <link>http://isuruf.blogspot.com/2015/08/gsoc-week-10-and-11.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;symengine-0.1.0 beta version was released this week and these two weeks were spent on making sure symengine works without a problem on Sage.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One issue was the linking of the python libraries in Sage. In binary releases of sage, the variable&amp;nbsp;&lt;span style="background-color: #fafafa; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 12px; line-height: 16.7999992370605px; white-space: pre;"&gt;distutils.sysconfig.get_config_var('LIBDIR') &lt;/span&gt;&amp;nbsp;is wrong. It is set to the build machine's location. In Windows this is set to empty. Earlier, to link the python libraries into the python wrappers, python library was found using the above variable, but in some cases like Sage and Windows this method fails. To fix this, CMake now looks in `sys.prefix`/libs and `sys.prefix`/lib as well to find the python libraries.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another issue that came up was cmake generating bad link flags. When installing in Sage, it is important to make sure the libraries in Sage are linked and not the system wide libraries. To do that libraries were searched for in the sage directories ignoring the system wide libraries. When given the full path of the libraries to link, we noticed a strange behaviour. `/path/to/sage/local/lib/libgmp.so` was changed to `-lgmp` causing the linker to pick up the system-wide gmp library.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After reading through CMake documentation, I realized that this was due to `find_library` giving wrong locations of system libraries where there are multiple libraries of the same name for different architectures. For example if the output of `find_library(math NAMES m)` was given to find the standard math library, it may find a `libm.so` that was intended for a different architecture. Therefore when cmake realizes that the library being linked to is a system library then the full path is converted to `-lm` to delegate the task to the linker to find the correct library.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This behaviour is useful for some scenarios, but in our case, this was not the behaviour I needed. Fortunately there was a workaround for this mentioned in the documentation. Using IMPORTED target feature in CMake, I was able to get CMake to use the full path of the library.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;R7 and R8 benchmarks from symbench benchmarks of sage were added to benchmark SymEngine-C++&amp;nbsp;against GiNaC and also SymEngine-Python against SymPy and Sage.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : This week in SymPy #10 &amp;11</guid>
      <title>GSoC : This week in SymPy #10 &amp; #11</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Mon, 10 Aug 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-week-10-11</link>
      <description>&lt;p&gt;Hi there! It's been 11 weeks into &lt;a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;GSoC&lt;/a&gt; 
and we have reached into the last week before the soft deadline. Here is the Progress so far.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 10 &amp;amp; 11&lt;/strong&gt; &lt;img src="http://iamit.in/assets/gsoc/pr.png" style="float: left;" /&gt;&lt;/h3&gt;

&lt;p&gt;
Last couple of weeks, I worked mainly on the Documentation of the solveset module. It's very important to let others know what we are doing and why we are doing, so this &lt;a href="http://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; is an effort to accomplish that.
Here are some of the important questions, I have tried to answer in the &lt;a href="http://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:check: What was the need of a new solvers module? 
 :check: Why do we use sets as an output type? 
 :check: What is this domain argument about? 
 :check: What will you do with the old solve? 
 :check: What are the general design principles behind the development of solveset? 
 :check: What are the general methods employed by solveset to solve an equation? 
 :check: How do we manipulate and return an infinite solutions? 
 :check: How does solveset ensures that it is not returning any wrong solution? &lt;/p&gt;

&lt;p&gt;There is still some polishing required in this as suggested by &lt;a href="http://github.com/hargup"&gt;@hargup&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Linsolve Docs&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I completed the documentation PR for &lt;code&gt;linsolve&lt;/code&gt;. See &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Differential Calculus Methods&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I have also started working on the differential calculus methods as mentioned in my proposal &lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2015-Application-AMiT-Kumar--Solvers-:-Extending-Solveset#week-12"&gt;here&lt;/a&gt;.
See &lt;a href="https://github.com/aktech/sympy/tree/diff-cal"&gt;diff-cal&lt;/a&gt; branch.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #12:&lt;/h3&gt;

&lt;p&gt;This week I plan to finish up all the pending work and wrap up the project and get &lt;a href="http://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; Merged. &lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;
That's all for now, looking forward for week #12. :grinning:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sartajsingh.me/gsoc-update-week-8-and-9</guid>
      <title>GSoC: Update Week 8 and 9</title>
      <author>Sartaj Singh (leosartaj)</author>
      <pubDate>Wed, 29 Jul 2015 18:20:56 GMT</pubDate>
      <link>https://sartajsingh.me/gsoc-update-week-8-and-9</link>
      <description>&lt;p&gt;It's been a long time since my last post. Holidays are now over and 
my classes have started. Last few days have been hectic for me.
Here's the highlights of my last two weeks with SymPy.&lt;/p&gt;



&lt;h3&gt;Highlights:&lt;/h3&gt;

&lt;p&gt;My implementation of the algorithm to compute formal
power series is finally done. As a result &lt;a href="http://github.com/sympy/sympy/pull/9639"&gt;#9639&lt;/a&gt;
finally got merged. Thanks Jim and Sean for all the help. 
As &lt;a href="http://github.com/sympy/sympy/pull/9639"&gt;#9639&lt;/a&gt; brought in all the necessary changes
&lt;a href="http://github.com/sympy/sympy/pull/9572"&gt;#9572&lt;/a&gt; was closed.&lt;/p&gt;

&lt;p&gt;In the SymPy master,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&amp;gt;&amp;gt;&amp;gt; fps(sin(x), x)
x - x**3/6 + x**5/120 + O(x**6)
&amp;gt;&amp;gt;&amp;gt; fps(1/(1-x), x)
1 + x + x**2 + x**3 + x**4 + x**5 + O(x**6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On a side note, I was invited for Push access by Aaron.
Thanks Aaron. :)&lt;/p&gt;

&lt;h3&gt;Tasks:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improve test coverage of &lt;code&gt;series.formal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start working on operations on Formal Power Series.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : This week in SymPy #9</guid>
      <title>GSoC : This week in SymPy #9</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Mon, 27 Jul 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-week-9</link>
      <description>&lt;p&gt;Hi there! It's been nine weeks into &lt;a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;GSoC&lt;/a&gt;
. Here is the Progress for this week.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 9&lt;/strong&gt; &lt;img src="http://iamit.in/assets/gsoc/pr.png" style="float: left;" /&gt;&lt;/h3&gt;

&lt;p&gt;
This week I worked on Replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; or &lt;code&gt;linsolve&lt;/code&gt; in the codebase:
Here are the modules, I covered, as of now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9740"&gt;diffgeom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9718"&gt;calculus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9724"&gt;core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9743"&gt;functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9744"&gt;galgebra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9708"&gt;geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9745"&gt;ntheory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9738"&gt;simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9717"&gt;series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9716"&gt;sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/pull/9710"&gt;stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://iamit.in/blog/feeds/github.com/moorepants"&gt;@moorepants&lt;/a&gt; pointed out that I should not change old &lt;code&gt;solve&lt;/code&gt;tests, since people may break an untested code, this argument is valid, so I have added equivalent tests for &lt;code&gt;solveset&lt;/code&gt;, where it is competent with &lt;code&gt;solve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some untested code in codebase as well, where &lt;code&gt;solve&lt;/code&gt; is used, for those cases replacing has not been done, as the tests would pass anyway, since those lines are not tested. So I have added a TODO for those instances, to replace with &lt;code&gt;solveset&lt;/code&gt;, when those lines are tested.&lt;/p&gt;

&lt;h4&gt;Other Work&lt;/h4&gt;

&lt;p&gt;I also changed the output of &lt;code&gt;linsolve&lt;/code&gt; when no solution are returned, earlier it throwed &lt;code&gt;ValueError&lt;/code&gt; &amp;amp; now it returns an &lt;code&gt;EmptySet()&lt;/code&gt;, which is consistent with rest of the &lt;code&gt;solveset&lt;/code&gt;. See &lt;a href="https://github.com/sympy/sympy/pull/9726"&gt;PR #9726&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #10:&lt;/h3&gt;

&lt;p&gt;This week I plan to Merge my pending PR's on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;, and work on Documentation &amp;amp; &lt;code&gt;lambertw&lt;/code&gt; solver.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9726"&gt;PR #9726&lt;/a&gt; : Return EmptySet() if there are no solution to linear system &lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9724"&gt;PR #9724&lt;/a&gt; : Replace solve with solveset in core&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9717"&gt;PR #9717&lt;/a&gt; : Replace solve with solveset in sympy.calculus&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9716"&gt;PR #9716&lt;/a&gt; : Use solveset instead of solve in sympy.sets&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9717"&gt;PR #9717&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.series&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9710"&gt;PR #9710&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.stats&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9708"&gt;PR #9708&lt;/a&gt; : Use solveset instead of solve in &lt;code&gt;sympy.geometry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
That's all for now, looking forward for week #10. :grinning:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8848761645772749389.post-3483803282136966920</guid>
      <title>GSoC Week 8 and 9</title>
      <author>Isuru Fernando (isuruf)</author>
      <pubDate>Sat, 25 Jul 2015 12:04:22 GMT</pubDate>
      <link>http://isuruf.blogspot.com/2015/07/gsoc-week-8-and-9.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;These two weeks me and Ondrej started adding support for different compilers.&lt;br /&gt;&lt;br /&gt;I added support for MinGW and MinGW-w64. There were some documented, but not yet fixed bugs in MinGW that I encountered. When including cmath, there were errors saying `_hypot` not defined, and `off64_t` not defied. I added flags `-D_hypot=hypot -Doff64_t=_off64_t` to fix this temporarily. With that symengine was successfully built.&lt;br /&gt;&lt;br /&gt;For python wrappers in windows, after building there was a wrapper not found error which was the result of not having the extension name as pyd in windows. Another problem faced was that, python distribution's `libpython27.a` for x64 was compiled for 32 bit architecture and there were linking errors. I found some patched files at http://www.lfd.uci.edu/~gohlke/pythonlibs/#libpython and python wrappers were built successfully. Also added continuous integration for MinGW using appveyor.&lt;br /&gt;&lt;br /&gt;With MinGW, to install gmp all you had to do was run the command `mingw-get install mingw32-gmp`. For MinGW-w64, I had to compile gmp. For this appveyor came in handy. I started a build in appveyor, stopped it and then logged into the appveyor machine remotely using `remmina` (Each VM was shutdown after 40 minutes. Within that 40 minutes you can login and debug the building). I compiled gmp using msys and mingw-w64 and then downloaded them to my machine. For appveyor runs, these pre-compiled binaries of gmp were used to test MinGW-w64&lt;br /&gt;&lt;br /&gt;Ondrej and I worked together to make sure SymEngine could be built using MSVC in Debug mode. Since gmp couldn't be used out of the box in MSVC, we used MPIR project's sources which included visual studio project files. MPIR is a fork of GMP and provides MSVC support. We used it to build SymEngine in MSVC. Later I added support for Release mode and also added continuous integration for both build types and platform types.&lt;br /&gt;&lt;br /&gt;Python extension can also be built with MSVC. We are testing the Python extensions in Release mode only right now, because appveyor has only python release mode libraries and therefore when building the extension in Debug mode it gives an error saying python27_d.lib is not found.&lt;br /&gt;&lt;br /&gt;I also improved the wrappers for Matrix by adding `__getitem__` and `__setitem__` so that the matrices can be used easily in Python.&lt;br /&gt;&lt;br /&gt;Another improvement to SymEngine was the automatic simplification of expressions like `0.0*x` and `x**0.0`. These expressions are not simplified more in master, so I 'm proposing a patch to simplify them to `0.0` and `1.0` respectively.&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//GSoC-Progress-Week-9</guid>
      <title>GSoC Progress - Week 9</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Fri, 24 Jul 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//GSoC-Progress-Week-9</link>
      <description>&lt;p&gt;Hello all. Last week has been rough, here's what I could do.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;The printing now works, hence I could test them. Due to that we could even test both the constructors, one from &lt;code&gt;hash_set&lt;/code&gt; and other from &lt;code&gt;Basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Polynomial wrappers PR, we need to get in quick, our highest priority.&lt;/p&gt;

&lt;p&gt;We need to make the methods more robust, we plan to get it in this weekend. &lt;br /&gt;
Once this is in, &lt;a href="https://github.com/shivamvats"&gt;Shivam&lt;/a&gt; can start writing function expansions.&lt;/p&gt;

&lt;p&gt;I have also couple of other tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;std::unordered_set&lt;/code&gt; so that we can have something even when there is no Piranha as dependency. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;mpz_class&lt;/code&gt; with &lt;code&gt;piranha::integer&lt;/code&gt; throughout SymEngine and checkout benchmarks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I intend to get Polynomial in this weekend because I get free on weekends :) &lt;br /&gt;
As there are only 3-4 weeks remaining, I need to buck up.&lt;/p&gt;

&lt;p&gt;That's all I have &lt;br /&gt;
&lt;strong&gt;Bid&amp;#257;&amp;#7823;a&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : This week in SymPy #8</guid>
      <title>GSoC : This week in SymPy #8</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Mon, 20 Jul 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-week-8</link>
      <description>&lt;p&gt;Hi there! It's been eight weeks into &lt;a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;GSoC&lt;/a&gt;
. Here is the Progress for this week.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 8&lt;/strong&gt; &lt;img src="http://iamit.in/assets/gsoc/pr.png" style="float: left;" /&gt;&lt;/h3&gt;

&lt;p&gt;
This week, my PR for making &lt;code&gt;invert_real&lt;/code&gt; more robust was Merged, along with these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/9628"&gt;PR #9628&lt;/a&gt; : Make &lt;code&gt;invert_real&lt;/code&gt; more robust&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/9668"&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in &lt;code&gt;linsolve&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/9666"&gt;PR #9666&lt;/a&gt; : Equate &lt;code&gt;S.Complexes&lt;/code&gt; with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We renamed &lt;code&gt;S.Complex&lt;/code&gt; to &lt;code&gt;S.Complexes&lt;/code&gt;, which is analogous with &lt;code&gt;S.Reals&lt;/code&gt; as suggested by &lt;a href="https://github.com/jksuom"&gt;@jksuom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also opened &lt;a href="https://github.com/sympy/sympy/pull/9671"&gt;PR #9671&lt;/a&gt; for Simplifying ComplexPlane output when ProductSet of FiniteSets are given as input: &lt;code&gt;ComplexPlane(FiniteSet(x)*FiniteSet(y))&lt;/code&gt;, It was earlier simplified to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;ComplexPlane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It isn't very useful to represent a point or discrete set of points in &lt;code&gt;ComplexPlane&lt;/code&gt; with an expression like above. So in the above PR it is now simplified as &lt;code&gt;FiniteSet&lt;/code&gt; of discrete points in &lt;code&gt;ComplexPlane&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ComplexPlane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FiniteSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;FiniteSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's awaiting Merge, as of now.&lt;/p&gt;

&lt;p&gt;Now, I have started replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; and &lt;code&gt;linsolve&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #9:&lt;/h3&gt;

&lt;p&gt;This week I plan to Merge my pending PR's &amp;amp; work on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9710"&gt;PR #9710&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.stats&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9708"&gt;PR #9708&lt;/a&gt; : Use solveset instead of solve in &lt;code&gt;sympy.geometry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9671"&gt;PR #9671&lt;/a&gt; : Simplify &lt;code&gt;ComplexPlane({x}*{y})&lt;/code&gt; to &lt;code&gt;FiniteSet(x + I*y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9668"&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in linsolve&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9666"&gt;PR #9666&lt;/a&gt; : Equate S.Complexes with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9628"&gt;PR #9628&lt;/a&gt; : Make invert_real more robust&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
That's all for now, looking forward for week #9. :grinning:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//GSoC-Progress-Week-8</guid>
      <title>GSoC Progress - Week 8</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Fri, 17 Jul 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//GSoC-Progress-Week-8</link>
      <description>&lt;p&gt;Hello. Short time since my last post. Here's my report since then.&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;I have continued my work on the Polynomial wrappers.&lt;/p&gt;

&lt;p&gt;Constructors from &lt;code&gt;hash_set&lt;/code&gt; and &lt;code&gt;Basic&lt;/code&gt; have been developed and pushed up. Printing has also been pushed. I'm currently writing tests for both, they'll be ready soon.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;hash_set_eq()&lt;/code&gt; and &lt;code&gt;hash_set_compare()&lt;/code&gt; were developed, we realised that there were many functions in &lt;code&gt;*_eq()&lt;/code&gt; and &lt;code&gt;*_compare()&lt;/code&gt; form with repeated logic, the idea was to templatize them which &lt;a href="https://github.com/shivamvats"&gt;Shivam&lt;/a&gt; did in his PR &lt;a href="https://github.com/sympy/symengine/pull/533"&gt;#533&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Solution to worry of slow compilation was chalked which I wish to try in the coming week, using &lt;code&gt;std::unique_ptr&lt;/code&gt; to a &lt;code&gt;hash_set&lt;/code&gt;, instead of a straight &lt;code&gt;hash_set&lt;/code&gt;. Hence not necessary to know the full definition of &lt;code&gt;hash_set&lt;/code&gt; in the header. I've been reading relevant material, known as &lt;code&gt;PIMPL&lt;/code&gt; idiom.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;br /&gt;
* &lt;a href="https://github.com/sympy/symengine/pull/511"&gt;#511&lt;/a&gt; - Polynomial Wrapper &lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 9&lt;/h3&gt;

&lt;p&gt;I wish to develop the  &lt;code&gt;Polynomial&lt;/code&gt; wrappers further in the following order. &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constructors and basic methods, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;, etc, working with proper tests. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Solve the problem of slow compilation times. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;As mentioned previously, use standard library alternates to Piranha constructs so that we can have something even when there is no Piranha as dependency. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the institute began, the times have been rough. Hoping everything falls in place. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Oh by the way, &lt;a href="http://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt; will be present (and represented heavily) at &lt;a href="https://in.pycon.org/2015/"&gt;PyCon India 2015&lt;/a&gt;. We sent in the content and final proposal for review last week. Have a look at the website for our proposal &lt;a href="http://iamit.in/sympy-pycon/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's all this week. &lt;br /&gt;
&lt;strong&gt;say&amp;#333;nara&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : This week in SymPy #7</guid>
      <title>GSoC : This week in SymPy #7</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Tue, 14 Jul 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-week-7</link>
      <description>&lt;p&gt;Hi there! It's been seven weeks into &lt;a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;GSoC&lt;/a&gt;
and second half has started now. Here is the Progress so far.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 7&lt;/strong&gt; &lt;img src="http://iamit.in/assets/gsoc/pr.png" style="float: left;" /&gt;&lt;/h3&gt;

&lt;p&gt;
This week I Opened &lt;a href="https://github.com/sympy/sympy/pull/9628"&gt;#9628&lt;/a&gt;, which is basically an attempt to make &lt;code&gt;solveset&lt;/code&gt; more robust, as I mentioned in my &lt;a href="http://iamit.in/blog/GSoC-week-6/"&gt;last post&lt;/a&gt;.
The idea is to tell the user about the domain of solution returned.&lt;/p&gt;

&lt;p&gt;Now, It makes sure that n is positive, in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;Intersection&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise it will return an &lt;code&gt;EmptySet()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;EmptySet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, for this to happen, we needed to make changes in the &lt;code&gt;invert_real&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;g_ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g_ys&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;FiniteSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g_ys&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_negative&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_invert_real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;g_ys&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;g_ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
          &lt;span class="n"&gt;imageset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;g_ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
          &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we applied set operations on the invert to make it return non-EmptySet only when there is a solution.&lt;/p&gt;

&lt;h3&gt;Now For more Complex Cases:&lt;/h3&gt;

&lt;p&gt;For the following case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;invert_real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the invert to be real, we must state that &lt;code&gt;a&lt;/code&gt; belongs to the Interval &lt;code&gt;(-oo, 2]&lt;/code&gt; otherwise it would be complex, but no set operation on &lt;code&gt;{log(-a + 2)/log(2)}&lt;/code&gt; can make the interval of &lt;code&gt;a&lt;/code&gt; to be in &lt;code&gt;(-oo, 2]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although, it does returns an &lt;code&gt;EmptySet()&lt;/code&gt; on substituting absurd values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;EmptySet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we need not make any changes to the &lt;code&gt;Pow&lt;/code&gt; handling in &lt;code&gt;invert_real&lt;/code&gt; &amp;amp; It's almost done now, except for a couple of TODO's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document new changes&lt;/li&gt;
&lt;li&gt;Add More tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though, I will wait for final thumbs up from &lt;a href="http://www.github.com/hargup"&gt;@hargup&lt;/a&gt;, regarding this.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #7:&lt;/h3&gt;

&lt;p&gt;This week I plan to complete &lt;a href="https://github.com/sympy/sympy/pull/9618"&gt;PR #9628&lt;/a&gt; &amp;amp; get it Merged &amp;amp; start working on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Below is the list of other PR's I worked on:&lt;/p&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9671"&gt;PR #9671&lt;/a&gt; : Simplify &lt;code&gt;ComplexPlane({x}*{y})&lt;/code&gt; to &lt;code&gt;FiniteSet(x + I*y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9668"&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in linsolve&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9666"&gt;PR #9666&lt;/a&gt; : Equate S.Complexes with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9628"&gt;PR #9628&lt;/a&gt; : [WIP] Make invert_real more robust&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
That's all for now, looking forward for week #8. :grinning:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sartajsingh.me/gsoc-update-week-7</guid>
      <title>GSoC: Update Week-7</title>
      <author>Sartaj Singh (leosartaj)</author>
      <pubDate>Tue, 14 Jul 2015 17:11:22 GMT</pubDate>
      <link>https://sartajsingh.me/gsoc-update-week-7</link>
      <description>&lt;h3&gt;Highlights:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I opened &lt;a href="https://github.com/sympy/sympy/pull/9639"&gt;#9639&lt;/a&gt; bringing in the rest of the algorithm for computing
Formal Power Series. There are still some &lt;a href="https://github.com/sympy/sympy/pull/9639#issue-94189385"&gt;un-implemented&lt;/a&gt; features.
I hope to complete them in this week.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Few of my PR's got merged this week(&lt;a href="https://github.com/sympy/sympy/pull/9622"&gt;#9622&lt;/a&gt;, &lt;a href="https://github.com/sympy/sympy/pull/9615"&gt;#9615&lt;/a&gt;
and &lt;a href="https://github.com/sympy/sympy/pull/9599"&gt;#9599&lt;/a&gt;). Thanks &lt;a href="https://github.com/jcrist"&gt;@jcrist&lt;/a&gt;, &lt;a href="https://github.com/aktech"&gt;@aktech&lt;/a&gt;
and &lt;a href="https://github.com/pbrady"&gt;@pbrady&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Opened &lt;a href="https://github.com/sympy/sympy/pull/9643"&gt;#9643&lt;/a&gt; for adding the docs related to Fourier Series.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;Tasks:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Polish &lt;a href="https://github.com/sympy/sympy/pull/9572"&gt;#9572&lt;/a&gt; and get it ready to be merged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Complete &lt;a href="https://github.com/sympy/sympy/pull/9639"&gt;#9639&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get docs of Fourier Series merged.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it. See you all next week. Happy Coding!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8848761645772749389.post-4902618950186450830</guid>
      <title>GSoC Week 7</title>
      <author>Isuru Fernando (isuruf)</author>
      <pubDate>Mon, 13 Jul 2015 15:12:51 GMT</pubDate>
      <link>http://isuruf.blogspot.com/2015/07/gsoc-week-7.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;This week I worked on the Sage wrappers and Python wrappers. To make it easier to try out symengine, I made changes to the sage wrappers such that if sage does not have symengine_conversions methods, (i.e. sage not updated to the symengine branch) then conversions would be done via python strings. For example, an integer is converted to a Python string and then to a Sage integer. This is slow, but makes it easier to install symengine. You can try it out by downloading cmake-3.2.3.spkg and symengine-0.1.spkg and installing them. (Link to download is .....) To install type&lt;br /&gt;&lt;br /&gt;sage -i /path/to/cmake-3.2.3.spkg&lt;br /&gt;&lt;br /&gt;sage -i /path/to/symengine-0.1.spkg&lt;br /&gt;&lt;br /&gt;Python wrappers included only a small amount of functions from SymEngine. Wrappers were added to functions like log, trigonometric functions, hyperbolic functions and their inverses.&lt;br /&gt;&lt;br /&gt;CMake package for Sage is now ready for review,&amp;nbsp;http://trac.sagemath.org/ticket/18078.&lt;br /&gt;&lt;br /&gt;SymEngine package for Sage can be found here,&amp;nbsp;https://github.com/isuruf/sage/tree/symengine. A PR would be sent as soon as CMake ticket is positively reviewed.&lt;br /&gt;&lt;br /&gt;Next week, testing with Sage, Python docstrings, SymEngine package for Sage are the main things that I have planned for now. Also a PyNumber class to handle python numbers would be started as well.&lt;/div&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://sumith1896.github.io//GSoC-Progress-Week-7</guid>
      <title>GSoC Progress - Week 7</title>
      <author>Sumith (sumith1896)</author>
      <pubDate>Mon, 13 Jul 2015 00:00:00 GMT</pubDate>
      <link>http://sumith1896.github.io//GSoC-Progress-Week-7</link>
      <description>&lt;p&gt;Hello. Sorry for the really late post. As I was moving from home to Mumbai back and also part of the grading team of International Physics Olympiad(IPhO), I could not contribute as much as I had thought I could. Here is what I have for this week.&lt;/p&gt;

&lt;h3&gt;Progress&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Expression&lt;/code&gt; class was built upon the initial works of Francesco. I made a SymEngine patch with his as an initial commit. We now have a top-level value class.&lt;/p&gt;

&lt;p&gt;The slowdowns finally got tackled. It was Piranha that needed amendment. The slowdown, as discussed previously, was due to the class &lt;code&gt;thread_pool&lt;/code&gt;. This was resolved was templatizing &lt;code&gt;thread_pool&lt;/code&gt; i.e. replace &lt;code&gt;class thread_pool: private detail::thread_pool_base&amp;lt;&amp;gt;&lt;/code&gt; with &lt;code&gt;template &amp;lt;typename = void&amp;gt; class thread_pool_: private detail::thread_pool_base&amp;lt;&amp;gt;&lt;/code&gt;. This basically saw to it that inclusion of individual headers. Including single &lt;code&gt;piranha.hpp&lt;/code&gt; still had this problem. The problem was &lt;code&gt;piranha.hpp&lt;/code&gt; includes &lt;code&gt;settings.hpp&lt;/code&gt;, which in turn defines a non-template function called &lt;code&gt;set_n_threads()&lt;/code&gt; which internally invokes the thread pool. This was resolved by a similar fix, the &lt;code&gt;setting&lt;/code&gt; class to &lt;code&gt;&amp;lt;typename = void&amp;gt; class settings_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Many things were reported until now, hence &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej&lt;/a&gt; suggested a documentation of all the decisions taken. The wiki page, &lt;a href="https://github.com/sympy/symengine/wiki/En-route-to-Polynomial"&gt;En route to Polynomial&lt;/a&gt; was hence made.&lt;/p&gt;

&lt;h3&gt;Report&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;br /&gt;
* &lt;a href="https://github.com/sympy/symengine/pull/511"&gt;#511&lt;/a&gt; - Polynomial Wrapper &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merged&lt;/strong&gt; &lt;br /&gt;
* &lt;a href="https://github.com/sympy/symengine/pull/512"&gt;#512&lt;/a&gt; - Add Francesco to AUTHORS &lt;br /&gt;
* &lt;a href="https://github.com/sympy/symengine/pull/500"&gt;#500&lt;/a&gt; - Expression wrapper. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; &lt;br /&gt;
&lt;a href="https://github.com/sympy/symengine/wiki/En-route-to-Polynomial"&gt;En route to Polynomial&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Targets for Week 8&lt;/h3&gt;

&lt;p&gt;Get the &lt;code&gt;Polynomial&lt;/code&gt; wrapper merged.&lt;/p&gt;

&lt;p&gt;Points to be noted: &lt;br /&gt;
* Use standard library alternates to Piranha constructs so that we can have something even when there is no Piranha as dependency. &lt;br /&gt;
* Basic class in, so that &lt;a href="https://github.com/shivamvats"&gt;Shivam&lt;/a&gt; can start some work in SymEngine. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I am thankful to &lt;a href="https://github.com/certik"&gt;Ond&amp;#345;ej&lt;/a&gt; and the &lt;code&gt;SymEngine&lt;/code&gt; team for bearing with my delays. I hope I can compensate in the coming week. &lt;/p&gt;

&lt;p&gt;That's all this week. &lt;br /&gt;
&lt;strong&gt;Ad&amp;#233;u&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">https://sartajsingh.me/gsoc-update-week-6</guid>
      <title>GSoC: Update Week-6</title>
      <author>Sartaj Singh (leosartaj)</author>
      <pubDate>Tue, 07 Jul 2015 17:56:40 GMT</pubDate>
      <link>https://sartajsingh.me/gsoc-update-week-6</link>
      <description>&lt;p&gt;Midterm evaluations are complete. I got to say Google was fairly
quick in mailing the results. It was just after a few minutes
after the deadline, I received a mail telling me I had passed. Yay!&lt;/p&gt;

&lt;p&gt;Here's my report for week 6.&lt;/p&gt;



&lt;h3&gt;Highlights:&lt;/h3&gt;

&lt;h4&gt;1. Formal Power Series:&lt;/h4&gt;

&lt;p&gt;For the most of the week I worked towards improving the implementation for the second part of the algorithm.
I was able to increase the range of admissible functions.
For this I had to write a custom solver for solving the RE of &lt;a href="http://sartajsingh.me/gsoc-update-week-3/#RE"&gt;hypergeometric&lt;/a&gt; type.
It's lot faster and better in solving the specific type of RE's this algorithm generates in comparison to
just using &lt;code&gt;rsolve&lt;/code&gt; for all the cases. However, it still has some issues.
It's currently in testing phase and probably will be PR ready by the end of this week.&lt;/p&gt;

&lt;p&gt;The code can be found &lt;a href="https://github.com/leosartaj/sympy/tree/hyper2"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While working on it, I also added some more features to &lt;code&gt;FormalPowerSeries&lt;/code&gt;(&lt;a href="https://github.com/sympy/sympy/pull/9572"&gt;#9572&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Some working examples.
(All the examples were run in isympy)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text"&gt;In [1]: fps(sin(x), x)
Out[1]: x - x**3/6 + x**5/120 + O(x**6)
In [2]: fps(cos(x), x)
Out[2]: 1 - x**2/2 + x**4/24 + O(x**6)
In [3]: fps(exp(acosh(x))
Out[3]: I + x - I*x**2/2 - I*x**4/8 + O(x**6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2. rsolve:&lt;/h4&gt;

&lt;p&gt;During testing, I found that &lt;code&gt;rsolve&lt;/code&gt; raises exceptions
while trying to solve RE's, like &lt;code&gt;(k + 1)*g(k)&lt;/code&gt;
and &lt;code&gt;(k + 1)*g(k) + (k + 3)*g(k+1) + (k + 5)*g(k+2)&lt;/code&gt; rather
than simply returning &lt;code&gt;None&lt;/code&gt; which it generally does
incase it is unable to solve a particular RE.
The first and the second RE are formed by functions &lt;code&gt;1/x&lt;/code&gt; and
&lt;code&gt;(x**2 + x + 1)/x**3&lt;/code&gt; respectively which can often come up in practice. So, to solve
this I opened &lt;a href="https://github.com/sympy/sympy/pull/9615"&gt;#9615&lt;/a&gt;. It is still under review.&lt;/p&gt;

&lt;h4&gt;3. Fourier Series:&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/sympy/sympy/pull/9523"&gt;#9523&lt;/a&gt; introduced &lt;code&gt;SeriesBase&lt;/code&gt; class and &lt;code&gt;FourierSeries&lt;/code&gt;.
Both &lt;code&gt;FormalPowerSeries&lt;/code&gt; and &lt;code&gt;FourierSeries&lt;/code&gt; are based on &lt;code&gt;SeriesBase&lt;/code&gt;.
Thanks &lt;a href="https://github.com/flacjacket"&gt;@flacjacket&lt;/a&gt; and &lt;a href="https://github.com/jcrist"&gt;@jcrist&lt;/a&gt;
for reviewing and merging this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text"&gt;In [1]: f = Piecewise((0, x &amp;lt;= 0), (1, True))
In [2]: fourier_series(f, (x, -pi, pi)
Out[2]: 2*sin(x)/pi + 2*sin(3*x)/(3*pi) + 1/2 + ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4. Sequences:&lt;/h4&gt;

&lt;p&gt;While playing around with sequences, I realized periodic
sequences can be made more powerful. They can now be used for 
periodic formulas(&lt;a href="https://github.com/sympy/sympy/pull/9613"&gt;#9613&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-text"&gt;In [1]: sequence((k, k**2, k**3))
Out[2]: [0, 1, 8, 3, ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5. Others:&lt;/h4&gt;

&lt;p&gt;Well I got tired with &lt;code&gt;FormalPowerSeries&lt;/code&gt;(I am just a human), so
I took a little detour from my regular project work and opened 
&lt;a href="https://github.com/sympy/sympy/pull/9622"&gt;#9622&lt;/a&gt; and &lt;a href="https://github.com/sympy/sympy/pull/9626"&gt;#9626&lt;/a&gt;
The first one deals with inconsistent diff of Polys while
while the second adds more assumption handler's like &lt;code&gt;is_positive&lt;/code&gt;
to &lt;code&gt;Min/Max&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Tasks Week-7:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Test and polish &lt;a href="https://github.com/leosartaj/sympy/tree/hyper2"&gt;hyper2&lt;/a&gt; branch. Complete the algorithm.&lt;/li&gt;
&lt;li&gt;Add sphinx docs for &lt;code&gt;FourierSeries&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start thinking on the operations that can be performed on &lt;code&gt;FormalPowerSeries&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it. See you all next week. Happy Coding!&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">http://iamit.in/blog/GSoC : This week in SymPy #6</guid>
      <title>GSoC : This week in SymPy #6</title>
      <author>Amit Kumar (aktech)</author>
      <pubDate>Sun, 05 Jul 2015 18:30:00 GMT</pubDate>
      <link>http://iamit.in/blog/GSoC-week-6</link>
      <description>&lt;p&gt;Hi there! It's been six weeks into &lt;a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code"&gt;GSoC&lt;/a&gt;,
and it marks the half of GSoC. The Mid term evaluations have been done now, Google has been preety quick doing this, I recieved the passing mail within 15 minutes after the deadline to fill up evaluations, so basically GSoC Admin did the following, (I guess):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-sql"&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;GSoCStudents&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;EvaluationResult&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'PASS'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-sql"&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;SendThemMail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Don't Judge my SQL, I am not good at it!)&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 6&lt;/strong&gt; &lt;img src="http://iamit.in/assets/gsoc/pr.png" style="float: left;" /&gt;&lt;/h3&gt;

&lt;p&gt;
Last week my &lt;code&gt;Linsolve&lt;/code&gt; &lt;a href="https://github.com/sympy/sympy/pull/9438"&gt;PR #9438&lt;/a&gt;
finally got Merged Thanks! to &lt;a href="http://github.com/hargup"&gt;@hargup&lt;/a&gt; &lt;a href="http://github.com/moorepants"&gt;@moorepants&lt;/a&gt; &lt;a href="http://github.com/flacjacket"&gt;@flacjacket&lt;/a&gt; &lt;a href="http://github.com/debugger22"&gt;@debugger22&lt;/a&gt; for reviewing it and suggesting constructive changes.&lt;/p&gt;

&lt;p&gt;This week I worked on Intersection's of &lt;code&gt;FiniteSet&lt;/code&gt; with symbolic elements, which was a blocking issue for lot of things, I managed to Fix the failing test which I mentioned in my last post. Eventually this PR got Merged as well, which has opened doors for lot of improvements.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/jksuom"&gt;@jksuom&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/hargup"&gt;@hargup&lt;/a&gt; for iterating over this PR, and making some very useful comments for improving it to make it Mergeable.&lt;/p&gt;

&lt;p&gt;I had a couple of hangout meeting with &lt;a href="https://github.com/hargup"&gt;@hargup&lt;/a&gt; this week, (though now he has left for SciPy for a couple of weeks), we discussed about the further plan, for making &lt;code&gt;solveset&lt;/code&gt; more robust, such as like returning the domain of invert while calling the &lt;code&gt;invert_real&lt;/code&gt; , See &lt;a href="https://github.com/sympy/sympy/issues/9617"&gt;#9617&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Motivation for this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-python"&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;solveset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The solution returned above is not actually complete, unless, somehow we state &lt;code&gt;n&lt;/code&gt; should be positive for the output set to be non-Empty. See &lt;a href="https://github.com/sympy/sympy/issues/9588"&gt;#9588&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #7:&lt;/h3&gt;

&lt;p&gt;This week I plan to work on making &lt;code&gt;invert_real&lt;/code&gt; more robust.&lt;/p&gt;

&lt;p&gt;Relavant Issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/issues/9617"&gt;#9617&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sympy/sympy/issues/9588"&gt;#9588&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9618"&gt;PR #9618&lt;/a&gt; : Add test for &lt;code&gt;solveset(x**2 + a, x)&lt;/code&gt; issue 9557&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9587"&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/opr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9500"&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9612"&gt;PR #9612&lt;/a&gt; : solveset return solution for &lt;code&gt;solveset(True, ..)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9540"&gt;PR #9540&lt;/a&gt; : Intersection's of FiniteSet with symbolic elements&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9438"&gt;PR #9438&lt;/a&gt; : Linsolve&lt;/p&gt;

&lt;p&gt;
&lt;img align="left" src="http://iamit.in/assets/gsoc/mpr.png" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9463"&gt;PR #9463&lt;/a&gt; : ComplexPlane &lt;/p&gt;

&lt;p&gt;
&lt;img src="http://iamit.in/assets/gsoc/mpr.png" style="float: left;" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9527"&gt;PR #9527&lt;/a&gt; : Printing of ProductSets   &lt;/p&gt;

&lt;p&gt;
&lt;img src="http://iamit.in/assets/gsoc/mpr.png" style="float: left;" /&gt; &amp;nbsp; &lt;a href="https://github.com/sympy/sympy/pull/9524"&gt;PR # 9524&lt;/a&gt; : Fix solveset returned solution making denom zero &lt;/p&gt;

&lt;p&gt;
That's all for now, looking forward for week #7. :grinning:&lt;/p&gt;</description>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8848761645772749389.post-3854617412195607759</guid>
      <title>GSoC Week 6</title>
      <author>Isuru Fernando (isuruf)</author>
      <pubDate>Sat, 04 Jul 2015 03:03:04 GMT</pubDate>
      <link>http://isuruf.blogspot.com/2015/07/gsoc-week-6.html</link>
      <description>&lt;div dir="ltr" style="text-align: left;"&gt;This week, I worked on improving the testing and making Sage wrappers. First, building with Clang had several issues and they were not tested. One issue was a clang bug when `-ffast-math` optimization is used. This flag would make floating point arithmetic perform better, but it may do arithmetic not allowed by the IEEE floating point standard. Since it performs faster we have enabled it in Release mode and due to a bug in clang, a compiler error is given saying&amp;nbsp;&lt;span style="color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 11.8999996185303px; line-height: inherit;"&gt; error: unknown type name '&lt;/span&gt;&lt;span style="color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 11.8999996185303px; line-height: inherit;"&gt;__extern_always_inline'&amp;nbsp;&lt;/span&gt;. This was fixed by first checking if the error is there in cmake and then adding a flag&amp;nbsp;&lt;span&gt;D__extern_always_inline=inline.&amp;nbsp;&lt;/span&gt;Another issue was that type_traits header was not found. This was fixed by upgrading the standard C++ library, libstdc++&lt;br /&gt;&lt;br /&gt;This week, I finished the wrappers for Sage. Now converters to and from sage can be found at&amp;nbsp;&lt;span style="color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 11.8999996185303px;"&gt;sage.symbolic.symengine&lt;/span&gt;. For this module to convert using the C++ level members,&amp;nbsp;&lt;span style="color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 11.8999996185303px;"&gt;symengine_wrapper.pyx&amp;nbsp;&lt;/span&gt;'s definitions of the classes were taken out and declared in&amp;nbsp;&lt;span style="color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 11.8999996185303px;"&gt;symengine_wrapper.pxd&amp;nbsp;&lt;/span&gt;and implemented in pyx file. To install symengine in sage,&amp;nbsp;https://github.com/sympy/symengine/issues/474 has to be resolved. A cmake check will be added to find whether this issue exists and if so, then the flag -Wa,-q will be added to the list of flags. We have to make a release of symengine if we were to make spkg's to install symengine in Sage, so some of my time next week will involve getting symengine ready for a release and then making spkgs for everyone to try out symengine.&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
